import requests
import json

def test_batch_workflow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ batch workflow –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã OpenAI –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏"""
    
    print("üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BATCH WORKFLOW v7.3")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Backend API
    print("\n1. üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º Backend API...")
    try:
        response = requests.get("http://localhost:8000/api/health")
        if response.status_code == 200:
            print("‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Backend API: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º N8N
    print("\n2. üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º N8N...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å N8N
        response = requests.get("http://localhost:5678/rest/login")
        if response.status_code in [200, 401]:  # 401 —Ç–æ–∂–µ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ N8N —Ä–∞–±–æ—Ç–∞–µ—Ç
            print("‚úÖ N8N –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ùå N8N –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ N8N: {e}")
        return
        
    print("\n3. üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–∞–π–¥–∂–µ—Å—Ç–µ...")
    try:
        response = requests.get("http://localhost:8000/api/digests?limit=1")
        if response.status_code == 200:
            digests = response.json()
            if digests:
                latest = digests[0]
                print(f"üîç –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: {latest['digest_id']}")
                print(f"üìà –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {latest['total_posts']}")
                print(f"üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {latest['relevant_posts']}")
                print(f"‚è∞ –í—Ä–µ–º—è: {latest['processed_at']}")
                
                if latest['total_posts'] == 0:
                    print("üéØ –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: OpenAI –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å—Ç—ã")
                    print("üîß –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º batch workflow v7.3")
                else:
                    print(f"‚úÖ –ü–æ—Å—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ ({latest['total_posts']} –ø–æ—Å—Ç–æ–≤)")
            else:
                print("üìù –î–∞–π–¥–∂–µ—Å—Ç–æ–≤ –Ω–µ—Ç, –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n4. üöÄ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ê–ö–¢–ò–í–ê–¶–ò–ò BATCH WORKFLOW:")
    print("   1. –û—Ç–∫—Ä—ã—Ç—å N8N –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:5678")
    print("   2. –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π workflow:")
    print("      - Copy/paste —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
    print("        n8n/workflows/telegram_digest_workflow_v7_3_with_batches.json")
    print("   3. –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π workflow (telegram_digest_workflow_v7_3_compact)")
    print("   4. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π workflow (telegram_digest_workflow_v7_3_with_batches)")
    print("   5. –ó–∞–ø—É—Å—Ç–∏—Ç—å userbot –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    print("\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø BATCH WORKFLOW:")
    print("   ‚úÖ –†–∞–∑–±–∏–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –±–∞—Ç—á–∏ –ø–æ 30 —à—Ç—É–∫")
    print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ü–∏–∫–ª—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ N8N")
    print("   ‚úÖ –°–±–æ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö –±–∞—Ç—á–µ–π")  
    print("   ‚úÖ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ OpenAI API")
    print("   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ v7.3")
    
    print("\nüìä –ê–†–•–ò–¢–ï–ö–¢–£–†–ê BATCH WORKFLOW:")
    print("   Prepare for AI ‚Üí Split In Batches (30) ‚Üí OpenAI API ‚Üí Process Batch ‚Üí Merge Results")
    print("                         ‚Üë                                    ‚Üì")
    print("                         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LOOP ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")

if __name__ == "__main__":
    test_batch_workflow() 