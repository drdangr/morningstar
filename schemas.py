"""
üéØ SCHEMAS.PY - –ï–î–ò–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö –ü–†–ê–í–î–´ –î–õ–Ø –í–°–ï–• –°–¢–†–£–ö–¢–£–† –î–ê–ù–ù–´–•
=================================================================

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –í–°–ï Pydantic –º–æ–¥–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ MorningStarBot3.
–ó–ê–ü–†–ï–©–ï–ù–û —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ Pydantic –º–æ–¥–µ–ª–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö!

–ü—Ä–∏–Ω—Ü–∏–ø—ã:
1. –ï–¥–∏–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –ø–æ –≤—Å–µ–º—É –ø—Ä–æ–µ–∫—Ç—É
2. –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ + –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏  
3. –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
4. –†–µ—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–∑ analysis_conflicts.md
"""

from pydantic import BaseModel, Field, validator
from datetime import datetime
from typing import Optional, List, Dict, Any
from enum import Enum

# ==================== ENUM'–´ ====================

class ProcessingStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤"""
    PENDING = "pending"
    PROCESSING = "processing" 
    COMPLETED = "completed"
    FAILED = "failed"

class BotStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø—É–±–ª–∏—á–Ω—ã—Ö –±–æ—Ç–æ–≤"""
    SETUP = "setup"
    ACTIVE = "active"
    PAUSED = "paused"
    DEVELOPMENT = "development"

# ==================== –ë–ê–ó–û–í–´–ï –ú–û–î–ï–õ–ò ====================

class TimestampMixin(BaseModel):
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏"""
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

class Category(TimestampMixin):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è - –ï–î–ò–ù–ê–Ø —Å—Ö–µ–º–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    id: Optional[int] = None  # None –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏, int –∏–∑ –ë–î
    name: str = Field(..., min_length=1, max_length=255)  # –í–ï–ó–î–ï name, –ù–ï category_name!
    description: Optional[str] = None  # –ù–ï optional - –Ω—É–∂–Ω–æ –¥–ª—è AI, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å None
    emoji: str = Field("üìù", max_length=10) 
    is_active: bool = True  # üîß –û–°–¢–ê–í–õ–Ø–ï–ú is_active - –¥–ª—è Category —ç—Ç–æ –æ–ø—Ä–∞–≤–¥–∞–Ω–æ (–ø—Ä–æ—Å—Ç–æ –≤–∫–ª/–≤—ã–∫–ª)
    ai_prompt: Optional[str] = None
    sort_order: int = 0

class Channel(TimestampMixin):
    """–ö–∞–Ω–∞–ª - –ï–î–ò–ù–ê–Ø —Å—Ö–µ–º–∞"""
    id: Optional[int] = None
    channel_name: str = Field(..., min_length=1, max_length=255)  # –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ
    username: Optional[str] = None
    telegram_id: int = Field(..., ge=-9223372036854775808, le=9223372036854775807)  # BigInteger –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    title: Optional[str] = None  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ channel_name 
    description: Optional[str] = None
    is_active: bool = True  # üîß –û–°–¢–ê–í–õ–Ø–ï–ú is_active - –¥–ª—è Channel —ç—Ç–æ –æ–ø—Ä–∞–≤–¥–∞–Ω–æ (–ø—Ä–æ—Å—Ç–æ –≤–∫–ª/–≤—ã–∫–ª)
    last_parsed: Optional[datetime] = None
    error_count: int = 0

# ==================== POST –ú–û–î–ï–õ–ò (—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ ‚Ññ1 –∏ ‚Ññ2) ====================

class PostBase(BaseModel):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –ø–æ—Å—Ç–∞ - –æ–±—â–∏–µ –ø–æ–ª—è"""
    channel_telegram_id: int = Field(..., ge=-9223372036854775808, le=9223372036854775807)
    telegram_message_id: int = Field(..., ge=-9223372036854775808, le=9223372036854775807)
    title: Optional[str] = None
    content: Optional[str] = None
    media_urls: List[str] = Field(default_factory=list)  # üîß –†–ï–®–ï–ù–ò–ï –ö–û–ù–§–õ–ò–ö–¢–ê ‚Ññ2: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    views: int = 0
    post_date: datetime  # üîß –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º post_date, –ù–ï published_at
    userbot_metadata: Dict[str, Any] = Field(default_factory=dict)
    
    @validator('media_urls', pre=True, always=True)
    def validate_media_urls(cls, v):
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è media_urls"""
        if v is None:
            return []
        if isinstance(v, str):
            try:
                import json
                return json.loads(v)
            except:
                return []
        return v if isinstance(v, list) else []

class PostRaw(PostBase):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Å—ã—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤ –æ—Ç userbot (–±–µ–∑ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏)"""
    collected_at: datetime
    retention_until: Optional[datetime] = None

class PostDB(PostBase, TimestampMixin):
    """–ú–æ–¥–µ–ª—å –ø–æ—Å—Ç–∞ –¥–ª—è –ë–î (posts_cache)"""
    id: int
    collected_at: datetime
    retention_until: Optional[datetime] = None

class PostForCategorization(PostBase):
    """–ú–æ–¥–µ–ª—å –ø–æ—Å—Ç–∞ –¥–ª—è AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    id: int
    public_bot_id: int

class PostForSummarization(PostBase):
    """–ú–æ–¥–µ–ª—å –ø–æ—Å—Ç–∞ –¥–ª—è AI —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    id: int  
    public_bot_id: int
    categories: List[str] = Field(default_factory=list)  # –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏

# ==================== PUBLIC BOT –ú–û–î–ï–õ–ò (—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ ‚Ññ3 –∏ ‚Ññ4) ====================  

class PublicBotBase(BaseModel):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞"""
    name: str = Field(..., min_length=1, max_length=255)
    description: Optional[str] = None
    status: BotStatus = BotStatus.SETUP  # üîß ENUM –¥–ª—è –±–æ—Ç–æ–≤ - –Ω—É–∂–Ω—ã —Å–ª–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (setup‚Üíactive‚Üípaused‚Üídevelopment)
    default_language: str = "ru"

class PublicBotConfig(PublicBotBase):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ (–¥–ª—è Backend API)"""
    # Telegram Bot –¥–∞–Ω–Ω—ã–µ
    bot_token: Optional[str] = None
    welcome_message: Optional[str] = None
    
    # Digest Settings
    max_posts_per_digest: int = Field(10, ge=1, le=100)
    max_summary_length: int = Field(150, ge=50, le=2000)
    
    # AI Prompts
    categorization_prompt: Optional[str] = None
    summarization_prompt: Optional[str] = None
    
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_schedule: Dict[str, Any] = Field(default_factory=dict)
    timezone: str = "Europe/Moscow"
    
    # Legacy –ø–æ–ª—è
    digest_generation_time: str = Field("09:00", pattern=r"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$")
    digest_schedule: Dict[str, Any] = Field(default_factory=lambda: {"enabled": False})

class PublicBotDB(PublicBotConfig, TimestampMixin):
    """–ú–æ–¥–µ–ª—å –±–æ—Ç–∞ –¥–ª—è –ë–î"""
    id: int
    users_count: int = 0
    digests_count: int = 0
    channels_count: int = 0
    topics_count: int = 0

class PublicBotForAI(PublicBotBase):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –±–æ—Ç–∞ –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–æ–≤"""  
    id: int
    categorization_prompt: Optional[str] = None
    summarization_prompt: Optional[str] = None
    additional_data: Dict[str, Any] = Field(default_factory=dict)

# ==================== AI –†–ï–ó–£–õ–¨–¢–ê–¢–´ ====================

class ProcessedData(TimestampMixin):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ"""
    id: Optional[int] = None
    post_id: int = Field(..., ge=-9223372036854775808, le=9223372036854775807)
    public_bot_id: int
    
    # AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    summaries: Dict[str, str] = Field(default_factory=dict)  # {"ru": "summary", "en": "summary"}
    categories: List[Dict[str, Any]] = Field(default_factory=list)  # [{"name": "–ü–æ–ª–∏—Ç–∏–∫–∞", "relevance": 0.95}]
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    importance: float = Field(default=0.0, ge=0.0, le=10.0)
    urgency: float = Field(default=0.0, ge=0.0, le=10.0)
    significance: float = Field(default=0.0, ge=0.0, le=10.0)
    tokens_used: int = Field(default=0, ge=0)
    processing_time: float = Field(default=0.0, ge=0.0)
    
    # –°—Ç–∞—Ç—É—Å—ã –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    processing_status: ProcessingStatus = ProcessingStatus.PENDING
    processing_version: str = "v3.1"
    is_categorized: bool = False
    is_summarized: bool = False
    ai_metadata: Dict[str, Any] = Field(default_factory=dict)

class ServiceResult(TimestampMixin):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ AI —Å–µ—Ä–≤–∏—Å–∞"""
    id: Optional[int] = None
    post_id: int = Field(..., ge=-9223372036854775808, le=9223372036854775807)
    public_bot_id: int
    service_name: str  # "categorization", "summarization", etc.
    status: ProcessingStatus = ProcessingStatus.PENDING
    payload: Dict[str, Any] = Field(default_factory=dict)
    metrics: Dict[str, Any] = Field(default_factory=dict)
    processed_at: Optional[datetime] = None

# ==================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ò –ü–û–î–ü–ò–°–ö–ò ====================

class User(TimestampMixin):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –±–æ—Ç–∞"""
    id: Optional[int] = None
    telegram_id: int = Field(..., ge=-9223372036854775808, le=9223372036854775807)
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    language_code: str = "ru"
    is_active: bool = True  # üîß is_active –¥–ª—è User - –ø—Ä–æ—Å—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

class Subscription(TimestampMixin):
    """–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    id: Optional[int] = None
    user_telegram_id: int = Field(..., ge=-9223372036854775808, le=9223372036854775807)
    category_id: int
    public_bot_id: int

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class ConfigSetting(TimestampMixin):
    """–°–∏—Å—Ç–µ–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"""
    id: Optional[int] = None
    key: str = Field(..., min_length=1, max_length=255)
    value: Optional[str] = None
    value_type: str = Field("string", pattern=r"^(string|integer|boolean|float|json)$")
    category: Optional[str] = None
    description: Optional[str] = None
    is_editable: bool = True

# ==================== –í–ê–õ–ò–î–ê–¢–û–†–´ ====================
# –í—Å–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤–Ω—É—Ç—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤
# –°–º. PostBase.validate_media_urls()

# ==================== –ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ====================
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:

1. –í–°–ï —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω—ã –≤ –≠–¢–û–ú —Ñ–∞–π–ª–µ
2. –ó–ê–ü–†–ï–©–ï–ù–û —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ Pydantic –º–æ–¥–µ–ª–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö  
3. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–ª–µ - –¥–æ–±–∞–≤—å –≤ —ç—Ç–æ—Ç —Ñ–∞–π–ª
4. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º:
   - PostBase ‚Üí PostRaw, PostDB, PostForCategorization, PostForSummarization
   - PublicBotBase ‚Üí PublicBotConfig, PublicBotDB, PublicBotForAI
5. –ü—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π .model_dump(mode='json'):
   post.model_dump(mode='json') ‚Üí –≤ CELERY ‚Üí Post(**data)

–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
from schemas import PostForCategorization
post = PostForCategorization(**data)
# –î–ª—è Celery (–ö–†–ò–¢–ò–ß–ù–û mode='json' –¥–ª—è datetime ‚Üí ISO —Å—Ç—Ä–æ–∫–∏!):
celery_data = post.model_dump(mode='json')  # –ù–ï .dict()!

–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
class MyPost(BaseModel):  # –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏!
    ...
post.dict()  # –£–°–¢–ê–†–ï–õ–û –≤ Pydantic v2!

–†–ï–®–ï–ù–ù–´–ï –ö–û–ù–§–õ–ò–ö–¢–´:
‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç ‚Ññ1: –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã PostData –∏ PostCacheBase —á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç ‚Ññ2: –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω media_urls: List[str] = Field(default_factory=list)  
‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç ‚Ññ3: –ì–ò–ë–†–ò–î–ù–´–ô –ø–æ–¥—Ö–æ–¥ –∫ —Å—Ç–∞—Ç—É—Å–∞–º - enum –¥–ª—è –±–æ—Ç–æ–≤ (—Å–ª–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è), is_active –¥–ª—è Category/Channel (–ø—Ä–æ—Å—Ç–æ–µ –≤–∫–ª/–≤—ã–∫–ª)
‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç ‚Ññ4: –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã PublicBot –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
""" 