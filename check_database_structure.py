#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü –º–æ–¥–µ–ª—è–º SQLAlchemy
"""

import psycopg2
from psycopg2.extras import RealDictCursor
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    return psycopg2.connect(
        host=os.getenv('DB_HOST', 'localhost'),
        port=os.getenv('DB_PORT', '5432'),
        database=os.getenv('DB_NAME', 'digest_bot'),
        user=os.getenv('DB_USER', 'digest_bot'),
        password=os.getenv('DB_PASSWORD', 'SecurePassword123!')
    )

def get_table_structure(cursor, table_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã"""
    cursor.execute("""
        SELECT 
            column_name, 
            data_type, 
            is_nullable,
            column_default
        FROM information_schema.columns 
        WHERE table_name = %s 
        ORDER BY ordinal_position;
    """, (table_name,))
    return cursor.fetchall()

def get_foreign_keys(cursor, table_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ —Ç–∞–±–ª–∏—Ü—ã"""
    cursor.execute("""
        SELECT
            tc.constraint_name,
            kcu.column_name,
            ccu.table_name AS foreign_table_name,
            ccu.column_name AS foreign_column_name
        FROM information_schema.table_constraints AS tc
        JOIN information_schema.key_column_usage AS kcu
            ON tc.constraint_name = kcu.constraint_name
        JOIN information_schema.constraint_column_usage AS ccu
            ON ccu.constraint_name = tc.constraint_name
        WHERE tc.constraint_type = 'FOREIGN KEY'
            AND tc.table_name = %s;
    """, (table_name,))
    return cursor.fetchall()

def check_table_exists(cursor, table_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
    cursor.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = %s
        );
    """, (table_name,))
    return cursor.fetchone()[0]

def main():
    try:
        conn = get_db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        # –°–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        tables_to_check = [
            'users',
            'user_subscriptions', 
            'categories',
            'channels',
            'channel_categories',
            'posts_cache',
            'digests',
            'system_settings'
        ]
        
        for table_name in tables_to_check:
            print(f"\nüìã –¢–ê–ë–õ–ò–¶–ê: {table_name}")
            print("-" * 30)
            
            if not check_table_exists(cursor, table_name):
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                continue
                
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
            columns = get_table_structure(cursor, table_name)
            print("üìä –°—Ç–æ–ª–±—Ü—ã:")
            for col in columns:
                nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
                default = f" DEFAULT {col['column_default']}" if col['column_default'] else ""
                print(f"  ‚Ä¢ {col['column_name']}: {col['data_type']} {nullable}{default}")
            
            # –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
            fkeys = get_foreign_keys(cursor, table_name)
            if fkeys:
                print("üîó –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏:")
                for fk in fkeys:
                    print(f"  ‚Ä¢ {fk['column_name']} ‚Üí {fk['foreign_table_name']}.{fk['foreign_column_name']}")
            
            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            print(f"üìà –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {count}")
        
        # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê user_subscriptions
        print("\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê user_subscriptions")
        print("=" * 40)
        
        if check_table_exists(cursor, 'user_subscriptions'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            cursor.execute("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'user_subscriptions' 
                ORDER BY ordinal_position;
            """)
            cols = cursor.fetchall()
            
            print("–†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ user_subscriptions:")
            for col in cols:
                print(f"  ‚Ä¢ {col['column_name']}: {col['data_type']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user_id
            user_id_exists = any(col['column_name'] == 'user_id' for col in cols)
            print(f"\n–°—Ç–æ–ª–±–µ—Ü user_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ –î–ê' if user_id_exists else '‚ùå –ù–ï–¢'}")
            
            if not user_id_exists:
                print("üö® –ü–†–û–ë–õ–ï–ú–ê: –°—Ç–æ–ª–±–µ—Ü user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                print("–≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        
        cursor.close()
        conn.close()
        
        print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")

if __name__ == "__main__":
    main() 