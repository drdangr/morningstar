const openAIResponse = $json;

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º batchData –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–æ–¥—ã –Ω–∞–ø—Ä—è–º—É—é
const prepareBatchNode = $('Prepare Batch for AI').first();
const batchData = prepareBatchNode?.json;

console.log(`üìù Processing ENHANCED OpenAI response for batch ${batchData?.batch_index || 'unknown'}`);

let aiAnalysis = [];
let parseSuccess = false;

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É [0].message.content
if (Array.isArray(openAIResponse) && openAIResponse[0]?.message?.content) {
    const contentString = openAIResponse[0].message.content;
    console.log(`üîç Found content string, length: ${contentString.length}`);
    
    try {
        const parsed = JSON.parse(contentString);
        aiAnalysis = parsed.results || [];
        parseSuccess = true;
        console.log(`‚úÖ Successfully parsed from [0].message.content: ${aiAnalysis.length} results`);
    } catch (error) {
        console.log('‚ö†Ô∏è Failed to parse [0].message.content as JSON:', error.message);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π JSON
        try {
            let fixedContent = contentString;
            if (!fixedContent.endsWith('}]}}') && !fixedContent.endsWith('}]}')) {
                const openBraces = (fixedContent.match(/{/g) || []).length;
                const closeBraces = (fixedContent.match(/}/g) || []).length;
                const openBrackets = (fixedContent.match(/\[/g) || []).length;
                const closeBrackets = (fixedContent.match(/\]/g) || []).length;
                
                for (let i = 0; i < openBraces - closeBraces; i++) {
                    fixedContent += '}';
                }
                for (let i = 0; i < openBrackets - closeBrackets; i++) {
                    fixedContent += ']';
                }
                
                console.log(`üîß Attempting to fix truncated JSON...`);
                const fixedParsed = JSON.parse(fixedContent);
                aiAnalysis = fixedParsed.results || [];
                parseSuccess = true;
                console.log(`‚úÖ Fixed truncated JSON: ${aiAnalysis.length} results`);
            }
        } catch (fixError) {
            console.log('‚ùå Failed to fix truncated JSON:', fixError.message);
        }
    }
}

// Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
if (!parseSuccess) {
    if (openAIResponse.message?.content?.results) {
        aiAnalysis = openAIResponse.message.content.results;
        console.log(`‚úÖ Found results in message.content.results: ${aiAnalysis.length}`);
    } else if (openAIResponse.message?.content && typeof openAIResponse.message.content === 'string') {
        try {
            const parsed = JSON.parse(openAIResponse.message.content);
            aiAnalysis = parsed.results || parsed;
            console.log(`‚úÖ Parsed from string content: ${aiAnalysis.length}`);
        } catch (error) {
            console.log('‚ö†Ô∏è Failed to parse string content:', error.message);
        }
    }
}

console.log(`‚úÖ ENHANCED Batch ${batchData?.batch_index || 'unknown'} processed: ${aiAnalysis.length} AI results`);

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º batch_uuid –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const batchUuid = `batch_${batchData?.batch_index || $runIndex + 1}_${Date.now()}`;

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–∏—è–Ω–∏—è
return {
    batch_uuid: batchUuid,
    batch_index: batchData?.batch_index || $runIndex + 1,
    batch_results: aiAnalysis,
    batch_posts_count: batchData?.total_posts_in_batch || 0,
    processed_at: new Date().toISOString(),
    parse_success: parseSuccess,
    channels_metadata: batchData?.channels_metadata,
    channel_category_map: batchData?.channel_category_map,
    category_descriptions: batchData?.category_descriptions,
    category_ai_prompts: batchData?.category_ai_prompts,
    custom_instructions: batchData?.custom_instructions,
    total_batches: batchData?.total_batches,
    posts_for_ai_count: (batchData?.posts_for_ai || []).length
}; 