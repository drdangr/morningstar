#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Celery —á–µ—Ä–µ–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
–ù–ê–ö–û–ù–ï–¶-–¢–û –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!
"""

import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ ai_services
sys.path.append('ai_services')

from ai_services.celery_simple import ping_task, test_task, test_long_task

def test_async_execution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Celery —á–µ—Ä–µ–∑ Docker...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç ping_task:")
    result = ping_task.delay()
    print(f"   Task ID: {result.id}")
    print(f"   Result: {result.get(timeout=10)}")
    
    # –¢–µ—Å—Ç 2: –ó–∞–¥–∞—á–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏  
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç test_task(5, 3):")
    result = test_task.delay(5, 3)
    print(f"   Task ID: {result.id}")
    print(f"   Result: {result.get(timeout=10)}")
    
    # –¢–µ—Å—Ç 3: –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç test_long_task(2 —Å–µ–∫):")
    start_time = time.time()
    result = test_long_task.delay(2)
    print(f"   Task ID: {result.id}")
    print(f"   –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á—É, –Ω–æ –Ω–µ –∂–¥–µ–º... (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ!)")
    
    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"   –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    task_result = result.get(timeout=15)
    end_time = time.time()
    
    print(f"   Result: {task_result}")
    print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {end_time - start_time:.2f} —Å–µ–∫")
    
    # –¢–µ—Å—Ç 4: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
    start_time = time.time()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º 3 –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = []
    for i in range(3):
        task = test_long_task.delay(1)  # –ü–æ 1 —Å–µ–∫—É–Ω–¥–µ –∫–∞–∂–¥–∞—è
        tasks.append(task)
        print(f"   –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {i+1}: {task.id}")
    
    # –ñ–¥–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = []
    for i, task in enumerate(tasks):
        result = task.get(timeout=15)
        results.append(result)
        print(f"   –ó–∞–¥–∞—á–∞ {i+1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
    
    end_time = time.time()
    total_time = end_time - start_time
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print(f"   3 –∑–∞–¥–∞—á–∏ –ø–æ 1 —Å–µ–∫ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å –∑–∞ {total_time:.2f} —Å–µ–∫")
    if total_time < 2.5:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å ~1-1.5 —Å–µ–∫ –µ—Å–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        print("   ‚úÖ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–°–¢–¨ –†–ê–ë–û–¢–ê–ï–¢!")
    else:
        print("   ‚ùå –ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ")
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! REDIS + CELERY + DOCKER = SUCCESS!")

if __name__ == '__main__':
    test_async_execution() 