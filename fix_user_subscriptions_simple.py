#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_subscriptions —á–µ—Ä–µ–∑ SQLite
"""

import sqlite3

def main():
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï user_subscriptions –í SQLITE")
    print("=" * 50)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö backend
    db_path = "backend/morningstar.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='user_subscriptions'
        """)
        table_exists = cursor.fetchone() is not None
        
        if table_exists:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("PRAGMA table_info(user_subscriptions)")
            columns = cursor.fetchall()
            print("üîç –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:")
            for col in columns:
                print(f"  ‚Ä¢ {col[1]}: {col[2]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ user_id
            has_user_id = any(col[1] == 'user_id' for col in columns)
            
            if not has_user_id:
                print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                print("üîß –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π...")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute("DROP TABLE user_subscriptions")
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute("""
                    CREATE TABLE user_subscriptions (
                        user_id INTEGER NOT NULL,
                        category_id INTEGER NOT NULL,
                        PRIMARY KEY (user_id, category_id)
                    )
                """)
                
                conn.commit()
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
            else:
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ user_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("üìã –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É user_subscriptions...")
            cursor.execute("""
                CREATE TABLE user_subscriptions (
                    user_id INTEGER NOT NULL,
                    category_id INTEGER NOT NULL,
                    PRIMARY KEY (user_id, category_id)
                )
            """)
            conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor.execute("PRAGMA table_info(user_subscriptions)")
        columns = cursor.fetchall()
        print("\n‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:")
        for col in columns:
            print(f"  ‚Ä¢ {col[1]}: {col[2]} ({'NULL' if col[3] == 0 else 'NOT NULL'})")
        
        conn.close()
        
        print("\nüéâ SQLITE –ò–°–ü–†–ê–í–õ–ï–ù!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å backend –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 