from fastapi import FastAPI, HTTPException, Depends, status, Query
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from sqlalchemy import create_engine, Column, Integer, String, Boolean, Text, DateTime, ForeignKey, Table, Float, UniqueConstraint, BigInteger, and_, or_, Index, func, JSON
from sqlalchemy.dialects.postgresql import JSONB, insert
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker, Session, relationship
from sqlalchemy.sql import func
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Union
from datetime import datetime
import os
from dotenv import load_dotenv
from typing import Dict, Any, Union
import json
from urllib.parse import quote_plus
import logging
import aiohttp
import asyncio
from celery import Celery

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_HOST = os.getenv("DB_HOST", "127.0.0.1")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º environment variable
DB_PORT = os.getenv("DB_PORT", "5432")
DB_NAME = os.getenv("DB_NAME", "digest_bot")
DB_USER = os.getenv("DB_USER", "digest_bot")
DB_PASSWORD = os.getenv("DB_PASSWORD", "Demiurg12@")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç

# URL –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
encoded_password = quote_plus(DB_PASSWORD) if DB_PASSWORD else ""
DATABASE_URL = f"postgresql://{DB_USER}:{encoded_password}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

# Fallback –∫ SQLite –µ—Å–ª–∏ PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
SQLITE_FALLBACK = f"sqlite:///{os.path.dirname(os.path.abspath(__file__))}/morningstar.db"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
USE_POSTGRESQL = False

try:
    test_engine = create_engine(DATABASE_URL, echo=False)
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    with test_engine.connect() as conn:
        from sqlalchemy import text
        conn.execute(text("SELECT 1"))
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ PostgreSQL: {DB_HOST}:{DB_PORT}/{DB_NAME}")
    USE_POSTGRESQL = True
    engine = test_engine
except Exception as e:
    print(f"‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)[:100]}...")
    print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ SQLite fallback")
    DATABASE_URL = SQLITE_FALLBACK
    USE_POSTGRESQL = False
    engine = create_engine(DATABASE_URL)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="MorningStar Admin API",
    description="API –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ MorningStar Bot",
    version="1.0.0"
)

# Celery client –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI Services
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://localhost:6379/0")
celery_client = Celery(
    "ai_services",
    broker=CELERY_BROKER_URL,
    backend=CELERY_BROKER_URL
)

# CORS middleware –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:5173", 
        "http://localhost:3000", 
        "http://127.0.0.1:5173", 
        "http://127.0.0.1:3000",
        "http://localhost",  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è Docker frontend
        "http://127.0.0.1"   # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è Docker frontend
    ],
    allow_credentials=False,  # –£–±–∏—Ä–∞–µ–º credentials –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ SQLAlchemy
channel_categories = Table(
    'channel_categories', Base.metadata,
    Column('channel_id', Integer, ForeignKey('channels.id'), primary_key=True),
    Column('category_id', Integer, ForeignKey('categories.id'), primary_key=True)
)

class Category(Base):
    __tablename__ = "categories"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: category_name ‚Üí name
    description = Column(Text)
    emoji = Column(String, default="üìù")  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î
    is_active = Column(Boolean, default=True)
    ai_prompt = Column(Text)  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –Ω—É–∂–Ω–æ –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
    sort_order = Column(Integer, default=0)  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    
    # –°–≤—è–∑–∏
    channels = relationship("Channel", secondary=channel_categories, back_populates="categories")

class Channel(Base):
    __tablename__ = "channels"
    
    id = Column(Integer, primary_key=True, index=True)
    channel_name = Column(String, nullable=False)  # –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
    telegram_id = Column(BigInteger, unique=True, nullable=False)
    username = Column(String)
    title = Column(String, nullable=False) 
    description = Column(Text)
    last_parsed = Column(DateTime)
    error_count = Column(Integer, default=0)  
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    
    # –°–≤—è–∑–∏
    categories = relationship("Category", secondary=channel_categories, back_populates="channels")

class ConfigSetting(Base):
    __tablename__ = "config_settings"
    
    id = Column(Integer, primary_key=True, index=True)
    key = Column(String, unique=True, nullable=False, index=True)
    value = Column(Text)
    value_type = Column(String, default="string")  # string, integer, boolean, float, json
    category = Column(String)
    description = Column(Text)
    is_editable = Column(Boolean, default=True)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())

class Digest(Base):
    __tablename__ = "digests"
    
    id = Column(Integer, primary_key=True, index=True)
    digest_id = Column(String, unique=True, nullable=False, index=True)  # digest_timestamp –æ—Ç N8N
    total_posts = Column(Integer, default=0)
    channels_processed = Column(Integer, default=0)
    original_posts = Column(Integer, default=0)
    relevant_posts = Column(Integer, default=0)
    avg_importance = Column(Float, default=0.0)
    avg_urgency = Column(Float, default=0.0)
    avg_significance = Column(Float, default=0.0)
    binary_relevance_applied = Column(Boolean, default=False)
    with_metrics = Column(Boolean, default=False)
    digest_data = Column(Text)  # JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    processed_at = Column(DateTime)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())

# –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ–¥–ø–∏—Å–∫–∏)
user_subscriptions = Table(
    'user_subscriptions', Base.metadata,
    Column('user_id', Integer, ForeignKey('users.id'), primary_key=True),
    Column('category_id', Integer, ForeignKey('categories.id'), primary_key=True)
)

# üöÄ –£–î–ê–õ–ï–ù–û: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_category_subscriptions (–æ—Å–Ω–æ–≤–Ω–∞—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–∏–∂–µ)

class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    telegram_id = Column(BigInteger, unique=True, nullable=False, index=True)
    username = Column(String)
    first_name = Column(String)
    last_name = Column(String)
    language_code = Column(String, default="ru")
    is_active = Column(Boolean, default=True)
    last_activity = Column(DateTime)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    
    # –°–≤—è–∑–∏
    # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: subscribed_categories = relationship("Category", secondary=user_subscriptions, back_populates="subscribers")

class PublicBot(Base):
    __tablename__ = "public_bots"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    description = Column(Text)
    status = Column(String, default="setup")  # setup, active, paused
    
    # Telegram Bot –¥–∞–Ω–Ω—ã–µ
    bot_token = Column(String)
    welcome_message = Column(Text)
    default_language = Column(String, default="ru")
    
    # Digest Settings (–±–∞–∑–æ–≤—ã–µ)
    max_posts_per_digest = Column(Integer, default=10)
    max_summary_length = Column(Integer, default=150)
    
    # AI Prompts (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º)
    categorization_prompt = Column(Text)
    summarization_prompt = Column(Text)
    
    # –°–õ–û–ñ–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï –î–û–°–¢–ê–í–ö–ò
    delivery_schedule = Column(JSONB if USE_POSTGRESQL else Text, default={} if USE_POSTGRESQL else "{}")
    timezone = Column(String, default="Europe/Moscow")
    
    # Legacy –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    digest_generation_time = Column(String, default="09:00")
    digest_schedule = Column(JSON, default={"enabled": False})
    
    # Statistics
    users_count = Column(Integer, default=0)
    digests_count = Column(Integer, default=0)
    channels_count = Column(Integer, default=0)
    topics_count = Column(Integer, default=0)
    
    # Metadata
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    
    # –°–≤—è–∑–∏ Many-to-Many
    bot_channels = relationship("BotChannel", back_populates="public_bot", cascade="all, delete-orphan")
    bot_categories = relationship("BotCategory", back_populates="public_bot", cascade="all, delete-orphan")

class BotChannel(Base):
    """–¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π –±–æ—Ç-–∫–∞–Ω–∞–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    __tablename__ = "bot_channels"
    
    id = Column(Integer, primary_key=True, index=True)
    public_bot_id = Column(Integer, ForeignKey("public_bots.id", ondelete="CASCADE"), nullable=False)
    channel_id = Column(Integer, ForeignKey("channels.id", ondelete="CASCADE"), nullable=False)
    weight = Column(Float, default=1.0)  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ (0.1-2.0)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=func.now())
    
    # –°–≤—è–∑–∏
    public_bot = relationship("PublicBot", back_populates="bot_channels")
    channel = relationship("Channel")
    
    # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏ –±–æ—Ç-–∫–∞–Ω–∞–ª
    __table_args__ = (UniqueConstraint('public_bot_id', 'channel_id', name='uq_bot_channel'),)

class BotCategory(Base):
    """–¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π –±–æ—Ç-–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    __tablename__ = "bot_categories"
    
    id = Column(Integer, primary_key=True, index=True)
    public_bot_id = Column(Integer, ForeignKey("public_bots.id", ondelete="CASCADE"), nullable=False)
    category_id = Column(Integer, ForeignKey("categories.id", ondelete="CASCADE"), nullable=False)
    custom_ai_instructions = Column(Text)  # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ AI –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —ç—Ç–æ–º –±–æ—Ç–µ
    weight = Column(Float, default=1.0)  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=func.now())
    
    # –°–≤—è–∑–∏
    public_bot = relationship("PublicBot", back_populates="bot_categories")
    category = relationship("Category")
    
    # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏ –±–æ—Ç-–∫–∞—Ç–µ–≥–æ—Ä–∏—è
    __table_args__ = (UniqueConstraint('public_bot_id', 'category_id', name='uq_bot_category'),)

class PostCache(Base):
    __tablename__ = "posts_cache"
    
    id = Column(Integer, primary_key=True, index=True)
    channel_telegram_id = Column(BigInteger, nullable=False, index=True)
    telegram_message_id = Column(BigInteger, nullable=False)
    title = Column(Text)
    content = Column(Text)
    # –£—Å–ª–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ë–î
    media_urls = Column(JSONB if USE_POSTGRESQL else Text, default=[] if USE_POSTGRESQL else "[]")
    views = Column(Integer, default=0)
    post_date = Column(DateTime, nullable=False)
    collected_at = Column(DateTime, default=func.now(), nullable=False)
    userbot_metadata = Column(JSONB if USE_POSTGRESQL else Text, default={} if USE_POSTGRESQL else "{}")
    # processing_status = Column(String, default="pending")  # –£–ë–†–ê–ù–û: –∑–∞–º–µ–Ω–µ–Ω–æ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –≤ processed_data

# –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å Category –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# üöÄ –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ü–û–î–ü–ò–°–û–ö (–∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é user_subscriptions)
user_category_subscriptions = Table(
    'user_category_subscriptions', 
    Base.metadata,
    Column('id', Integer, primary_key=True, index=True),
    Column('user_telegram_id', BigInteger, nullable=False, index=True),  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: BigInteger –¥–ª—è –±–æ–ª—å—à–∏—Ö Telegram ID
    Column('category_id', Integer, ForeignKey('categories.id', ondelete='CASCADE'), nullable=False),
    Column('public_bot_id', Integer, ForeignKey('public_bots.id', ondelete='CASCADE'), nullable=False),
    Column('created_at', DateTime, default=func.now()),
    # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –¥–≤–∞–∂–¥—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –æ–¥–Ω–æ–º –±–æ—Ç–µ
    UniqueConstraint('user_telegram_id', 'category_id', 'public_bot_id', name='uq_user_category_bot_subscription'),
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    Index('idx_user_bot_subscriptions', 'user_telegram_id', 'public_bot_id'),
    Index('idx_bot_category_subscriptions', 'public_bot_id', 'category_id'),
    extend_existing=True  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
)

# üöÄ –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ü–û–î–ü–ò–°–û–ö –ù–ê –ö–ê–ù–ê–õ–´ (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
user_channel_subscriptions = Table(
    'user_channel_subscriptions', 
    Base.metadata,
    Column('id', Integer, primary_key=True, index=True),
    Column('user_telegram_id', BigInteger, nullable=False, index=True),
    Column('channel_id', Integer, ForeignKey('channels.id', ondelete='CASCADE'), nullable=False),
    Column('public_bot_id', Integer, ForeignKey('public_bots.id', ondelete='CASCADE'), nullable=False),
    Column('created_at', DateTime, default=func.now()),
    # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –¥–≤–∞–∂–¥—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –≤ –æ–¥–Ω–æ–º –±–æ—Ç–µ
    UniqueConstraint('user_telegram_id', 'channel_id', 'public_bot_id', name='uq_user_channel_bot_subscription'),
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    Index('idx_user_bot_channel_subscriptions', 'user_telegram_id', 'public_bot_id'),
    Index('idx_bot_channel_user_subscriptions', 'public_bot_id', 'channel_id'),
    extend_existing=True
)

# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Helper: —Å–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
def _build_digest_text(grouped_posts: dict, subscribed_names: set, created_at: Optional[str] = None) -> str:
    parts = []
    parts.append("üì∞ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç\n\n")
    if created_at:
        parts.append(f"üóì –°–æ–∑–¥–∞–Ω: {created_at}\n")

    # –¢–µ–º—ã –æ—Å—Ç–∞–≤–∏–º –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
    sorted_themes = sorted(grouped_posts.items(), key=lambda t: sum(len(p) for p in t[1].values()), reverse=True)
    for theme_name, channels_map in sorted_themes:
        parts.append(f"\nüìù <b>{str(theme_name).upper()}</b>\n")
        # –ö–∞–Ω–∞–ª—ã –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã –æ—Å—Ç–∞–≤–∏–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å—Ç–æ–≤; —Å–∞–º–∏ –ø–æ—Å—Ç—ã —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        for channel_name, posts in sorted(channels_map.items(), key=lambda x: len(x[1]), reverse=True):
            parts.append(f"\nüì∫ <b>{channel_name}</b>\n")
            posts.sort(key=lambda p: (p.get('post_date') or ''), reverse=True)
            for post in posts:
                summary = post.get('summary') or post.get('ai_summary') or ''
                url = post.get('url') or ''
                title = post.get('title') or ''
                if summary:
                    parts.append(f"üí¨ {summary}\n")
                if url:
                    short = title[:80] + ("..." if len(title) > 80 else "")
                    parts.append(f"üîó {url} <i>{short}</i>\n")
                metrics = []
                for k, icon in [("importance","‚ö°"),("urgency","üö®"),("significance","üéØ"),("views","üëÅ")]:
                    v = post.get(k)
                    if v not in (None, 0, "0"):
                        metrics.append(f"{icon} {v}")
                if metrics:
                    parts.append(f"üìä {' ‚Ä¢ '.join(metrics)}\n")
                parts.append("\n")

    if subscribed_names:
        parts.append(f"üéØ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {', '.join(sorted(subscribed_names))}\n\n")
    parts.append("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫")
    return ''.join(parts)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
def create_default_settings():
    """–°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
        existing_keys = {setting.key for setting in db.query(ConfigSetting).all()}
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(existing_keys)}")
        print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏: {existing_keys}")
        
        default_settings = [
            {
                "key": "CHECK_INTERVAL",
                "value": "30",
                "value_type": "integer",
                "category": "system",
                "description": "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö",
                "is_editable": True
            },
            {
                "key": "MAX_POSTS_PER_DIGEST",
                "value": "10",
                "value_type": "integer",
                "category": "digest",
                "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ",
                "is_editable": True
            },
            {
                "key": "DIGEST_GENERATION_TIME",
                "value": "09:00",
                "value_type": "string",
                "category": "digest",
                "description": "–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤",
                "is_editable": True
            },
            {
                "key": "AI_MODEL",
                "value": "gpt-4",
                "value_type": "string",
                "category": "ai",
                "description": "–ú–æ–¥–µ–ª—å AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                "is_editable": True
            },
            {
                "key": "MAX_SUMMARY_LENGTH",
                "value": "150",
                "value_type": "integer",
                "category": "ai",
                "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ summary –≤ —Å–∏–º–≤–æ–ª–∞—Ö",
                "is_editable": True
            },
            {
                "key": "ENABLE_NOTIFICATIONS",
                "value": "true",
                "value_type": "boolean",
                "category": "system",
                "description": "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "is_editable": True
            },
            {
                "key": "LOG_LEVEL",
                "value": "INFO",
                "value_type": "string",
                "category": "system",
                "description": "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR)",
                "is_editable": True
            },
            {
                "key": "BACKUP_RETENTION_DAYS",
                "value": "30",
                "value_type": "integer",
                "category": "system",
                "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π",
                "is_editable": True
            },
            {
                "key": "COLLECTION_DEPTH_DAYS",
                "value": "3",
                "value_type": "integer",
                "category": "system",
                "description": "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ —Å–æ–±–∏—Ä–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤",
                "is_editable": True
            },
            {
                "key": "MAX_POSTS_PER_CHANNEL",
                "value": "50",
                "value_type": "integer",
                "category": "system",
                "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ —Å –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞",
                "is_editable": True
            },
            {
                "key": "MAX_POSTS_FOR_AI_ANALYSIS",
                "value": "10",
                "value_type": "integer",
                "category": "ai",
                "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞",
                "is_editable": True
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        added_count = 0
        for setting_data in default_settings:
            if setting_data["key"] not in existing_keys:
                db_setting = ConfigSetting(**setting_data)
                db.add(db_setting)
                added_count += 1
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting_data['key']}")
        
        if added_count > 0:
            db.commit()
            print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        else:
            print("–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        db.rollback()
    finally:
        db.close()

# –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
create_default_settings()

# Pydantic –º–æ–¥–µ–ª–∏
class CategoryBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=255)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: category_name ‚Üí name
    description: Optional[str] = None
    emoji: str = Field("üìù", max_length=10)  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î
    is_active: bool = True
    ai_prompt: Optional[str] = None  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –Ω—É–∂–Ω–æ –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
    sort_order: int = 0  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î

class CategoryCreate(CategoryBase):
    pass

class CategoryUpdate(CategoryBase):
    pass

class CategoryResponse(CategoryBase):
    id: int
    created_at: datetime
    updated_at: datetime
    
    # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –∞–ª–∏–∞—Å - –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è name
    # name: str = Field(alias="category_name")
    
    class Config:
        from_attributes = True
        populate_by_name = True

class CategoryResponseWithName(BaseModel):
    id: int
    name: str  # –ú–∞–ø–ø–∏–º –∏–∑ category_name
    description: Optional[str] = None
    is_active: bool = True
    ai_prompt: Optional[str] = None
    created_at: datetime
    updated_at: datetime
    
    @classmethod
    def from_category(cls, category):
        return cls(
            id=category.id,
            name=category.name,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º name
            description=category.description,
            is_active=category.is_active,
            ai_prompt=category.ai_prompt,
            created_at=category.created_at,
            updated_at=category.updated_at
        )
    
    class Config:
        from_attributes = True

class ChannelBase(BaseModel):
    channel_name: str = Field(..., min_length=1, max_length=255)  # –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ë–î
    telegram_id: int
    username: Optional[str] = None
    title: Optional[str] = None  # –°–¥–µ–ª–∞–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ–º channel_name
    description: Optional[str] = None
    is_active: bool = True

class ChannelCreate(ChannelBase):
    pass

class ChannelUpdate(ChannelBase):
    pass

class ChannelResponse(ChannelBase):
    id: int
    last_parsed: Optional[datetime] = None
    error_count: int = 0
    created_at: datetime
    updated_at: datetime
    categories: List['CategoryResponse'] = []
    
    class Config:
        from_attributes = True

class ConfigSettingBase(BaseModel):
    key: str = Field(..., min_length=1, max_length=255)
    value: Optional[str] = None
    value_type: str = Field("string", pattern="^(string|integer|boolean|float|json)$")
    category: Optional[str] = None
    description: Optional[str] = None
    is_editable: bool = True

class ConfigSettingCreate(ConfigSettingBase):
    pass

class ConfigSettingUpdate(BaseModel):
    value: Optional[str] = None
    description: Optional[str] = None
    is_editable: Optional[bool] = None

class ConfigSettingResponse(ConfigSettingBase):
    id: int
    created_at: datetime
    updated_at: datetime
    
    class Config:
        from_attributes = True

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
class DigestCreate(BaseModel):
    digest_id: str = Field(..., min_length=1, max_length=255)
    total_posts: int = Field(0, ge=0)
    channels_processed: int = Field(0, ge=0)
    original_posts: int = Field(0, ge=0)
    relevant_posts: int = Field(0, ge=0)
    avg_importance: float = Field(0.0, ge=0.0, le=10.0)
    avg_urgency: float = Field(0.0, ge=0.0, le=10.0)
    avg_significance: float = Field(0.0, ge=0.0, le=10.0)
    binary_relevance_applied: bool = False
    with_metrics: bool = False
    digest_data: Optional[str] = None  # JSON —Å—Ç—Ä–æ–∫–∞
    processed_at: Optional[datetime] = None

class DigestResponse(DigestCreate):
    id: int
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True

class DigestSummary(BaseModel):
    """–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–π–¥–∂–µ—Å—Ç–µ –¥–ª—è —Å–ø–∏—Å–∫–∞"""
    id: int
    digest_id: str
    total_posts: int
    relevant_posts: int
    channels_processed: int
    avg_importance: float
    processed_at: Optional[datetime]
    created_at: datetime
    
    class Config:
        from_attributes = True

class UserBase(BaseModel):
    telegram_id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    language_code: str = "ru"
    is_active: bool = True

class UserCreate(UserBase):
    pass

class UserUpdate(BaseModel):
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    language_code: Optional[str] = None
    is_active: Optional[bool] = None
    last_activity: Optional[datetime] = None

class UserResponse(UserBase):
    id: int
    last_activity: Optional[datetime] = None
    created_at: datetime
    updated_at: datetime
    subscribed_categories: List['CategoryResponse'] = []
    
    class Config:
        from_attributes = True

class SubscriptionRequest(BaseModel):
    category_ids: List[int] = Field(..., description="–°–ø–∏—Å–æ–∫ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")

class SubscriptionResponse(BaseModel):
    user_id: int
    subscribed_categories: List['CategoryResponse'] = []
    message: str

class PostCacheBase(BaseModel):
    channel_telegram_id: int
    telegram_message_id: int
    title: Optional[str] = None
    content: Optional[str] = None
    media_urls: Optional[List[str]] = []  # –°–ø–∏—Å–æ–∫ URL –≤ –≤–∏–¥–µ JSONB –º–∞—Å—Å–∏–≤–∞
    views: int = 0
    post_date: datetime
    userbot_metadata: Optional[Dict[str, Any]] = {}  # JSONB –æ–±—ä–µ–∫—Ç

class PostCacheCreate(PostCacheBase):
    pass

class PostCacheResponse(PostCacheBase):
    id: int
    collected_at: datetime

    class Config:
        from_attributes = True

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è /api/posts/unprocessed
class PostCacheResponseWithBot(PostCacheResponse):
    bot_id: int

class PostCacheWithAIResponse(PostCacheBase):
    id: int
    collected_at: datetime
    
    # AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ, –µ—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)
    ai_summary: Optional[str] = None
    ai_category: Optional[str] = None
    ai_relevance_score: Optional[float] = None
    ai_importance: Optional[float] = None
    ai_urgency: Optional[float] = None
    ai_significance: Optional[float] = None
    ai_processed_at: Optional[datetime] = None
    ai_processing_version: Optional[str] = None
    
    class Config:
        from_attributes = True

class PostsBatchCreate(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è batch —Å–æ–∑–¥–∞–Ω–∏—è posts –æ—Ç userbot"""
    timestamp: datetime
    collection_stats: Dict[str, Union[int, List[str]]]
    posts: List[PostCacheCreate]
    channels_metadata: Dict[str, Dict[str, Any]]

class PostsBulkDeleteRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è bulk —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    post_ids: List[int] = Field(..., min_items=1, max_items=1000, description="–°–ø–∏—Å–æ–∫ ID –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    class Config:
        schema_extra = {
            "example": {
                "post_ids": [1, 2, 3, 4, 5]
            }
        }

class PublicBotBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=255)
    description: Optional[str] = None
    status: str = Field("setup", pattern="^(setup|active|paused|development)$")  # –î–æ–±–∞–≤–ª–µ–Ω development
    
    # Telegram Bot –¥–∞–Ω–Ω—ã–µ
    bot_token: Optional[str] = None
    welcome_message: Optional[str] = None
    default_language: str = "ru"
    
    # Digest Settings (–±–∞–∑–æ–≤—ã–µ)
    max_posts_per_digest: int = Field(10, ge=1, le=100)
    max_summary_length: int = Field(150, ge=50, le=2000)
    
    # AI Prompts (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º)
    categorization_prompt: Optional[str] = None
    summarization_prompt: Optional[str] = None
    
    # –°–õ–û–ñ–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï –î–û–°–¢–ê–í–ö–ò
    delivery_schedule: Optional[Dict[str, Any]] = {}
    timezone: str = "Europe/Moscow"
    
    # Legacy –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    digest_generation_time: str = Field("09:00", pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$")
    digest_schedule: Dict[str, Any] = Field(default_factory=lambda: {"enabled": False})

class PublicBotCreate(PublicBotBase):
    pass

class PublicBotUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1, max_length=255)
    description: Optional[str] = None
    status: Optional[str] = Field(None, pattern="^(setup|active|paused|development)$")
    
    # Telegram Bot –¥–∞–Ω–Ω—ã–µ
    bot_token: Optional[str] = None
    welcome_message: Optional[str] = None
    default_language: Optional[str] = None
    
    # Digest Settings (–±–∞–∑–æ–≤—ã–µ)
    max_posts_per_digest: Optional[int] = Field(None, ge=1, le=100)
    max_summary_length: Optional[int] = Field(None, ge=50, le=4000)
    
    # AI Prompts (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º)
    categorization_prompt: Optional[str] = None
    summarization_prompt: Optional[str] = None
    
    # –°–õ–û–ñ–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï –î–û–°–¢–ê–í–ö–ò
    delivery_schedule: Optional[Dict[str, Any]] = None
    timezone: Optional[str] = None
    
    # Legacy –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    digest_generation_time: Optional[str] = Field(None, pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$")
    digest_schedule: Optional[Dict[str, Any]] = None

class PublicBotResponse(PublicBotBase):
    id: int
    users_count: int = 0
    digests_count: int = 0
    channels_count: int = 0
    topics_count: int = 0
    created_at: datetime
    updated_at: datetime
    
    # –í—ã—á–∏—Å–ª—è–µ–º–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AI Orchestrator
    is_active: bool = False  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ __init__
    
    def __init__(self, **data):
        super().__init__(**data)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_active –Ω–∞ –æ—Å–Ω–æ–≤–µ status
        self.is_active = data.get('status') == 'active'

    class Config:
        from_attributes = True

# Bot Templates Models
class BotTemplateSettings(BaseModel):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤"""
    # AI Settings
    default_ai_model: str = "gpt-4o-mini"
    default_max_tokens: int = 4000
    default_temperature: float = 0.7
    default_categorization_prompt: str = """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å—Ç—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
1. –ù–û–í–û–°–¢–ò - –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è, —ç–∫–æ–Ω–æ–º–∏–∫–∞, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
2. –¢–ï–•–ù–û–õ–û–ì–ò–ò - IT, –≥–∞–¥–∂–µ—Ç—ã, –Ω–∞—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è  
3. –ö–£–õ–¨–¢–£–†–ê - –∏—Å–∫—É—Å—Å—Ç–≤–æ, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, —Å–ø–æ—Ä—Ç
4. –í–û–ô–ù–ê - –≤–æ–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –æ–±–æ—Ä–æ–Ω–∞

–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞."""
    
    default_summarization_prompt: str = """–°–æ–∑–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—é–º–µ –ø–æ—Å—Ç–æ–≤:
- –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –§–æ–∫—É—Å –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–∞—Ö
- –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω –±–µ–∑ —ç–º–æ—Ü–∏–π
- –£–∫–∞–∑—ã–≤–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫ –µ—Å–ª–∏ –≤–∞–∂–Ω–æ"""
    
    # Digest Settings
    default_max_posts_per_digest: int = 10
    default_max_summary_length: int = 150
    default_digest_language: str = "ru"
    default_welcome_message: str = "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π."
    
    # Delivery Settings
    default_delivery_schedule: Dict[str, List[str]] = {
        "monday": ["08:00", "19:00"],
        "tuesday": ["08:00", "19:00"], 
        "wednesday": ["08:00", "19:00"],
        "thursday": ["08:00", "19:00"],
        "friday": ["08:00", "19:00"],
        "saturday": ["10:00"],
        "sunday": ["10:00"]
    }
    default_timezone: str = "Europe/Moscow"
    default_digest_schedule: Dict[str, Any] = Field(default_factory=lambda: {"enabled": False})

class BotTemplateUpdate(BaseModel):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —à–∞–±–ª–æ–Ω–∞"""
    # –í—Å–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    default_ai_model: Optional[str] = None
    default_max_tokens: Optional[int] = None
    default_temperature: Optional[float] = None
    default_categorization_prompt: Optional[str] = None
    default_summarization_prompt: Optional[str] = None
    default_max_posts_per_digest: Optional[int] = None
    default_max_summary_length: Optional[int] = None
    default_digest_language: Optional[str] = None
    default_welcome_message: Optional[str] = None
    default_delivery_schedule: Optional[Dict[str, List[str]]] = None
    default_timezone: Optional[str] = None
    default_digest_schedule: Optional[Dict[str, Any]] = None

# ConfigManager –∫–ª–∞—Å—Å
class ConfigManager:
    def __init__(self, db: Session):
        self.db = db
        self.env_vars = dict(os.environ)
    
    def get(self, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env –∏–ª–∏ –ë–î"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º .env (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        if key in self.env_vars:
            return self.env_vars[key]
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        db_setting = self.db.query(ConfigSetting).filter(ConfigSetting.key == key).first()
        if db_setting:
            return self._parse_value(db_setting.value, db_setting.value_type)
        
        return default
    
    def set_db_setting(self, key: str, value: str, value_type: str = "string") -> ConfigSetting:
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ë–î"""
        db_setting = self.db.query(ConfigSetting).filter(ConfigSetting.key == key).first()
        if db_setting:
            db_setting.value = value
            db_setting.value_type = value_type
            db_setting.updated_at = func.now()
        else:
            db_setting = ConfigSetting(key=key, value=value, value_type=value_type)
            self.db.add(db_setting)
        
        self.db.commit()
        self.db.refresh(db_setting)
        return db_setting
    
    def _parse_value(self, value: str, value_type: str) -> Any:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∏–ø–æ–º"""
        if value is None:
            return None
        
        try:
            if value_type == "integer":
                return int(value)
            elif value_type == "boolean":
                return value.lower() in ("true", "1", "yes", "on")
            elif value_type == "float":
                return float(value)
            elif value_type == "json":
                return json.loads(value)
            else:  # string
                return value
        except (ValueError, json.JSONDecodeError):
            return value  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
def get_database_size():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ú–ë"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ë–î
        db = SessionLocal()
        result = db.execute(text("SELECT pg_size_pretty(pg_database_size('digest_bot'))")).fetchone()
        size_str = result[0] if result and result[0] else "0 MB"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ú–ë
        if "GB" in size_str:
            size_mb = float(size_str.split(" ")[0]) * 1024
        elif "MB" in size_str:
            size_mb = float(size_str.split(" ")[0])
        elif "kB" in size_str:
            size_mb = float(size_str.split(" ")[0]) / 1024
        else:
            size_mb = 0.0
            
        db.close()
        return round(size_mb, 2)
    except Exception as e:
        print(f"Error getting database size: {e}")
        return 0.0

def get_filtered_data_size(channel_ids: list = None):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ú–ë"""
    try:
        db = SessionLocal()
        
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –ª–æ–≥–∏–∫—É - —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–∞—Ö
        if channel_ids:
            # –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            channel_ids_str = ','.join(map(str, channel_ids))
            query = text(f"""
                SELECT pg_size_pretty(
                    sum(pg_column_size(posts_cache.*))::bigint
                ) 
                FROM posts_cache 
                WHERE channel_telegram_id IN ({channel_ids_str})
            """)
        else:
            # –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫–∞—Ö posts_cache (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º—É)
            query = text("""
                SELECT pg_size_pretty(
                    sum(pg_column_size(posts_cache.*))::bigint
                ) 
                FROM posts_cache
            """)
        
        result = db.execute(query).fetchone()
        size_str = result[0] if result and result[0] else "0 bytes"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ú–ë
        if "GB" in size_str:
            size_mb = float(size_str.split(" ")[0]) * 1024
        elif "MB" in size_str:
            size_mb = float(size_str.split(" ")[0])
        elif "kB" in size_str:
            size_mb = float(size_str.split(" ")[0]) / 1024
        elif "bytes" in size_str:
            # –î–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∏–º –±–∞–π—Ç—ã –≤ –ú–ë
            bytes_count = float(size_str.split(" ")[0])
            size_mb = bytes_count / (1024 * 1024)
        else:
            size_mb = 0.0
            
        db.close()
        return round(size_mb, 2)
    except Exception as e:
        print(f"Error getting filtered data size: {e}")
        return 0.0

# API Routes –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@app.get("/api/categories")
def get_categories(
    skip: int = 0,
    limit: int = 100,
    search: Optional[str] = None,
    active_only: bool = False,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    query = db.query(Category)
    
    if active_only:
        query = query.filter(Category.is_active == True)
    
    if search:
        query = query.filter(Category.name.contains(search))
    
    categories = query.order_by(Category.name).offset(skip).limit(limit).all()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º
    result = []
    for cat in categories:
        result.append({
            "id": cat.id,
            "name": cat.name,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º name
            "description": cat.description,
            "is_active": cat.is_active,
            "ai_prompt": cat.ai_prompt,
            "created_at": cat.created_at,
            "updated_at": cat.updated_at
        })
    
    return result

@app.post("/api/categories", response_model=CategoryResponse, status_code=status.HTTP_201_CREATED)
def create_category(category: CategoryCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    existing = db.query(Category).filter(Category.name == category.name).first()
    if existing:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    db_category = Category(**category.model_dump())
    db.add(db_category)
    db.commit()
    db.refresh(db_category)
    return db_category

@app.get("/api/categories/{category_id}", response_model=CategoryResponse)
def get_category(category_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID"""
    category = db.query(Category).filter(Category.id == category_id).first()
    if not category:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    return category

@app.put("/api/categories/{category_id}", response_model=CategoryResponse)
def update_category(category_id: int, category: CategoryUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    print(f"=== UPDATE CATEGORY DEBUG ===")
    print(f"Category ID: {category_id}")
    print(f"Received data: {category.model_dump()}")
    print(f"====================")
    db_category = db.query(Category).filter(Category.id == category_id).first()
    if not db_category:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é)
    existing = db.query(Category).filter(
        Category.name == category.name,
        Category.id != category_id
    ).first()
    if existing:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    for field, value in category.model_dump().items():
        setattr(db_category, field, value)
    
    db.commit()
    db.refresh(db_category)
    return db_category

@app.delete("/api/categories/{category_id}")
def delete_category(category_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    category = db.query(Category).filter(Category.id == category_id).first()
    if not category:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    db.delete(category)
    db.commit()
    return {"message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}

# API Routes –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
@app.get("/api/channels", response_model=List[ChannelResponse])
def get_channels(
    skip: int = 0,
    limit: int = 100,
    search: Optional[str] = None,
    active_only: bool = False,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    from sqlalchemy.orm import selectinload
    
    query = db.query(Channel).options(selectinload(Channel.categories))
    
    if active_only:
        query = query.filter(Channel.is_active == True)
    
    if search:
        query = query.filter(
                            Channel.channel_name.contains(search) | 
            Channel.username.contains(search)
        )
    
    channels = query.order_by(Channel.channel_name).offset(skip).limit(limit).all()
    return channels

@app.post("/api/channels", response_model=ChannelResponse, status_code=status.HTTP_201_CREATED)
def create_channel(channel: ChannelCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å telegram_id
    existing = db.query(Channel).filter(Channel.telegram_id == channel.telegram_id).first()
    if existing:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º title
    channel_data = channel.model_dump()
    if not channel_data.get('title'):
        channel_data['title'] = channel_data['channel_name']  # –ó–∞–ø–æ–ª–Ω—è–µ–º title –∏–∑ channel_name
    
    db_channel = Channel(**channel_data)
    db.add(db_channel)
    db.commit()
    db.refresh(db_channel)
    return db_channel

@app.get("/api/channels/{channel_id}", response_model=ChannelResponse)
def get_channel(channel_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ ID"""
    channel = db.query(Channel).filter(Channel.id == channel_id).first()
    if not channel:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    return channel

@app.put("/api/channels/{channel_id}", response_model=ChannelResponse)
def update_channel(channel_id: int, channel: ChannelUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª"""
    db_channel = db.query(Channel).filter(Channel.id == channel_id).first()
    if not db_channel:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å telegram_id (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª)
    existing = db.query(Channel).filter(
        Channel.telegram_id == channel.telegram_id,
        Channel.id != channel_id
    ).first()
    if existing:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º title
    channel_data = channel.model_dump()
    if not channel_data.get('title'):
        channel_data['title'] = channel_data['channel_name']  # –ó–∞–ø–æ–ª–Ω—è–µ–º title –∏–∑ channel_name
    
    for field, value in channel_data.items():
        setattr(db_channel, field, value)
    
    db.commit()
    db.refresh(db_channel)
    return db_channel

@app.delete("/api/channels/{channel_id}")
def delete_channel(channel_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª"""
    channel = db.query(Channel).filter(Channel.id == channel_id).first()
    if not channel:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    db.delete(channel)
    db.commit()
    return {"message": "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}

@app.post("/api/channels/validate")
async def validate_channel(request: dict):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        user_input = request.get('channel_input', '').strip()
        if not user_input:
            return {
                'success': False,
                'error': '–í–≤–µ–¥–∏—Ç–µ username, —Å—Å—ã–ª–∫—É –∏–ª–∏ Telegram ID –∫–∞–Ω–∞–ª–∞',
                'data': None
            }
        
        # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        from channel_validator import validate_channel_for_api
        
        result = await validate_channel_for_api(user_input)
        
        if result['validation']['valid']:
            suggestions = result['suggestions']
            return {
                'success': True,
                'data': {
                    'title': suggestions.get('title'),
                    'username': suggestions.get('username'),
                    'description': suggestions.get('description'),
                    'telegram_id': suggestions.get('telegram_id'),
                    'subscribers': getattr(result, 'subscribers_count', None)
                },
                'message': '–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω'
            }
        else:
            warnings = result['validation']['warnings']
            error_message = warnings[0] if warnings else '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª'
            return {
                'success': False,
                'error': error_message,
                'data': None
            }
        
    except Exception as e:
        return {
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}',
            'data': None
        }

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ endpoints
@app.get("/api/health")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return {"status": "ok", "timestamp": datetime.now()}

@app.get("/api/stats")
def get_stats(db: Session = Depends(get_db)):
    """üöÄ –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø)"""
    categories_count = db.query(Category).count()
    channels_count = db.query(Channel).count()
    active_categories = db.query(Category).filter(Category.is_active == True).count()
    active_channels = db.query(Channel).filter(Channel.is_active == True).count()
    digests_count = db.query(Digest).count()
    posts_total = db.query(PostCache).count()
    
    # üöÄ –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    active_bots = db.query(PublicBot).filter(
        PublicBot.status.in_(['active', 'development'])
    ).all()
    
    if active_bots:
        active_bot_ids = [bot.id for bot in active_bots]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        bot_channels = db.query(BotChannel).filter(
            BotChannel.public_bot_id.in_(active_bot_ids),
            BotChannel.is_active == True
        ).all()
        
        if bot_channels:
            channel_ids = [bc.channel_id for bc in bot_channels]
            channels_info = db.query(Channel).filter(Channel.id.in_(channel_ids)).all()
            channel_telegram_ids = [ch.telegram_id for ch in channels_info]
            
            # –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            posts_pending = db.query(PostCache.id).join(
                ProcessedData, PostCache.id == ProcessedData.post_id
            ).filter(
                ProcessedData.processing_status == 'pending',
                ProcessedData.public_bot_id.in_(active_bot_ids),
                PostCache.channel_telegram_id.in_(channel_telegram_ids)
            ).distinct().count()
            
            posts_processed = db.query(PostCache.id).join(
                ProcessedData, PostCache.id == ProcessedData.post_id
            ).filter(
                ProcessedData.processing_status == 'completed',
                ProcessedData.public_bot_id.in_(active_bot_ids),
                PostCache.channel_telegram_id.in_(channel_telegram_ids)
            ).distinct().count()
        else:
            posts_pending = 0
            posts_processed = 0
    else:
        posts_pending = 0
        posts_processed = 0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≤—è–∑–µ–π
    total_links = db.query(channel_categories).count()
    
    # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_size = get_database_size()
    
    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
    total_bots = db.query(PublicBot).count()
    active_bots_count = len(active_bots)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
    
    return {
        "total_categories": categories_count,
        "active_categories": active_categories,
        "total_channels": channels_count,
        "active_channels": active_channels,
        "total_digests": digests_count,
        "total_posts": posts_total,
        "posts_pending": posts_pending,  # –¢–µ–ø–µ—Ä—å –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        "posts_processed": posts_processed,  # –¢–µ–ø–µ—Ä—å –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        "channel_category_links": total_links,
        "database_size_mb": database_size,
        # üöÄ –ù–û–í–´–ï –ü–û–õ–Ø: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤
        "total_bots": total_bots,
        "active_bots": active_bots_count
    }

# API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑—è–º–∏ –∫–∞–Ω–∞–ª-–∫–∞—Ç–µ–≥–æ—Ä–∏—è
@app.get("/api/channels/{channel_id}/categories", response_model=List[CategoryResponse])
def get_channel_categories(channel_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    channel = db.query(Channel).filter(Channel.id == channel_id).first()
    if not channel:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    return channel.categories

@app.post("/api/channels/{channel_id}/categories/{category_id}")
def add_category_to_channel(channel_id: int, category_id: int, db: Session = Depends(get_db)):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –∫–∞–Ω–∞–ª—É"""
    channel = db.query(Channel).filter(Channel.id == channel_id).first()
    if not channel:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    category = db.query(Category).filter(Category.id == category_id).first()
    if not category:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑—å –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if category in channel.categories:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É"
        )
    
    channel.categories.append(category)
    db.commit()
    
    return {"message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∫–∞–Ω–∞–ª—É"}

@app.delete("/api/channels/{channel_id}/categories/{category_id}")
def remove_category_from_channel(channel_id: int, category_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç –∫–∞–Ω–∞–ª–∞"""
    channel = db.query(Channel).filter(Channel.id == channel_id).first()
    if not channel:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    category = db.query(Category).filter(Category.id == category_id).first()
    if not category:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if category not in channel.categories:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É"
        )
    
    channel.categories.remove(category)
    db.commit()
    
    return {"message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞"}

@app.get("/api/categories/{category_id}/channels", response_model=List[ChannelResponse])
def get_category_channels(category_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = db.query(Category).filter(Category.id == category_id).first()
    if not category:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    return category.channels

# API –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
@app.get("/api/settings", response_model=List[ConfigSettingResponse])
def get_settings(
    category: Optional[str] = None,
    editable_only: bool = False,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    query = db.query(ConfigSetting)
    
    if category:
        query = query.filter(ConfigSetting.category == category)
    
    if editable_only:
        query = query.filter(ConfigSetting.is_editable == True)
    
    settings = query.order_by(ConfigSetting.category, ConfigSetting.key).all()
    return settings

@app.get("/api/settings/categories")
def get_setting_categories():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    return {"categories": ["system", "digest", "ai"]}

@app.post("/api/settings", response_model=ConfigSettingResponse, status_code=status.HTTP_201_CREATED)
def create_setting(setting: ConfigSettingCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
    existing = db.query(ConfigSetting).filter(ConfigSetting.key == setting.key).first()
    if existing:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    db_setting = ConfigSetting(**setting.model_dump())
    db.add(db_setting)
    db.commit()
    db.refresh(db_setting)
    return db_setting

@app.get("/api/settings/{setting_id}", response_model=ConfigSettingResponse)
def get_setting(setting_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ ID"""
    setting = db.query(ConfigSetting).filter(ConfigSetting.id == setting_id).first()
    if not setting:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    return setting

@app.put("/api/settings/{setting_id}", response_model=ConfigSettingResponse)
def update_setting(setting_id: int, setting: ConfigSettingUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    db_setting = db.query(ConfigSetting).filter(ConfigSetting.id == setting_id).first()
    if not db_setting:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    for field, value in setting.model_dump(exclude_unset=True).items():
        setattr(db_setting, field, value)
    
    db.commit()
    db.refresh(db_setting)
    return db_setting

@app.delete("/api/settings/{setting_id}")
def delete_setting(setting_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    setting = db.query(ConfigSetting).filter(ConfigSetting.id == setting_id).first()
    if not setting:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    db.delete(setting)
    db.commit()
    return {"message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}

# Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ConfigManager
@app.get("/api/config/{key}")
def get_config_value(key: str, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ConfigManager"""
    config = ConfigManager(db)
    value = config.get(key)
    
    if value is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    return {"key": key, "value": value}

# API –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
@app.post("/api/digests", response_model=DigestResponse, status_code=status.HTTP_201_CREATED)
def create_digest(digest: DigestCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç (endpoint –¥–ª—è N8N)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å digest_id
    existing = db.query(Digest).filter(Digest.digest_id == digest.digest_id).first()
    if existing:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–î–∞–π–¥–∂–µ—Å—Ç —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    db_digest = Digest(**digest.model_dump())
    db.add(db_digest)
    db.commit()
    db.refresh(db_digest)
    return db_digest

@app.get("/api/digests", response_model=List[DigestSummary])
def get_digests(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ (–∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)"""
    digests = db.query(Digest).order_by(Digest.created_at.desc()).offset(skip).limit(limit).all()
    return digests

@app.get("/api/digests/{digest_id}", response_model=DigestResponse)
def get_digest(digest_id: str, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–π–¥–∂–µ—Å—Ç–µ"""
    digest = db.query(Digest).filter(Digest.digest_id == digest_id).first()
    if not digest:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    return digest

@app.get("/api/digests/{digest_id}/data")
def get_digest_data(digest_id: str, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
    digest = db.query(Digest).filter(Digest.digest_id == digest_id).first()
    if not digest:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    try:
        if digest.digest_data:
            data = json.loads(digest.digest_data)
            return data
        else:
            return {"error": "–î–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"}
    except json.JSONDecodeError:
        return {"error": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–∞"}

@app.delete("/api/digests/{digest_id}")
def delete_digest(digest_id: str, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç"""
    digest = db.query(Digest).filter(Digest.digest_id == digest_id).first()
    if not digest:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    db.delete(digest)
    db.commit()
    return {"message": "–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}

@app.get("/api/digests/stats/summary")
def get_digests_stats(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    total_digests = db.query(Digest).count()
    
    if total_digests == 0:
        return {
            "total_digests": 0,
            "avg_posts_per_digest": 0,
            "avg_relevance_rate": 0,
            "total_posts_processed": 0
        }
    
    # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    from sqlalchemy import func as sql_func
    stats = db.query(
        sql_func.avg(Digest.total_posts).label('avg_posts'),
        sql_func.avg(Digest.relevant_posts).label('avg_relevant'),
        sql_func.sum(Digest.total_posts).label('total_posts'),
        sql_func.avg(Digest.avg_importance).label('avg_importance'),
        sql_func.avg(Digest.avg_urgency).label('avg_urgency'),
        sql_func.avg(Digest.avg_significance).label('avg_significance')
    ).first()
    
    return {
        "total_digests": total_digests,
        "avg_posts_per_digest": round(stats.avg_posts or 0, 1),
        "avg_relevance_rate": round((stats.avg_relevant / stats.avg_posts * 100) if stats.avg_posts else 0, 1),
        "total_posts_processed": stats.total_posts or 0,
        "avg_metrics": {
            "importance": round(stats.avg_importance or 0, 1),
            "urgency": round(stats.avg_urgency or 0, 1),
            "significance": round(stats.avg_significance or 0, 1)
        }
    }

# API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫
@app.post("/api/users", response_model=UserResponse, status_code=status.HTTP_201_CREATED)
def create_or_update_user(user: UserCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = db.query(User).filter(User.telegram_id == user.telegram_id).first()
    
    if existing_user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for field, value in user.model_dump().items():
            if hasattr(existing_user, field) and value is not None:
                setattr(existing_user, field, value)
        existing_user.last_activity = func.now()
        db.commit()
        db.refresh(existing_user)
        return existing_user
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = User(**user.model_dump())
        db_user.last_activity = func.now()
        db.add(db_user)
        db.commit()
        db.refresh(db_user)
        return db_user

@app.get("/api/users/{telegram_id}", response_model=UserResponse)
def get_user(telegram_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    return user

@app.get("/api/users/{telegram_id}/subscriptions", response_model=List[CategoryResponse])
def get_user_subscriptions(telegram_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    return user.subscribed_categories

@app.post("/api/users/{telegram_id}/subscriptions", response_model=SubscriptionResponse)
def update_user_subscriptions(telegram_id: int, subscription: SubscriptionRequest, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
    categories = db.query(Category).filter(Category.id.in_(subscription.category_ids)).all()
    if len(categories) != len(subscription.category_ids):
        found_ids = [cat.id for cat in categories]
        missing_ids = [cat_id for cat_id in subscription.category_ids if cat_id not in found_ids]
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {missing_ids}"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    user.subscribed_categories = categories
    user.last_activity = func.now()
    db.commit()
    db.refresh(user)
    
    return SubscriptionResponse(
        user_id=user.id,
        subscribed_categories=user.subscribed_categories,
        message=f"–ü–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}"
    )

@app.delete("/api/users/{telegram_id}/subscriptions/{category_id}")
def remove_user_subscription(telegram_id: int, category_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    category = db.query(Category).filter(Category.id == category_id).first()
    if not category:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    if category in user.subscribed_categories:
        user.subscribed_categories.remove(category)
        user.last_activity = func.now()
        db.commit()
        return {"message": "–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞"}
    else:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
        )

# üöÄ –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–´–ï ENDPOINTS –î–õ–Ø –ü–û–î–ü–ò–°–û–ö
@app.get("/api/public-bots/{bot_id}/users/{telegram_id}/subscriptions")
def get_user_bot_subscriptions(bot_id: int, telegram_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not bot:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    subscriptions_query = db.query(Category).join(
        user_category_subscriptions,
        Category.id == user_category_subscriptions.c.category_id
    ).filter(
        user_category_subscriptions.c.user_telegram_id == telegram_id,
        user_category_subscriptions.c.public_bot_id == bot_id
    )
    
    subscriptions = subscriptions_query.all()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç CategoryResponse
    result = []
    for category in subscriptions:
        result.append({
            'id': category.id,
                    'name': category.name,
        'category_name': category.name,
            'description': category.description,
            'is_active': category.is_active,
            'ai_prompt': category.ai_prompt,
            'created_at': category.created_at,
            'updated_at': category.updated_at
        })
    
    return result


@app.get("/api/public-bots/{bot_id}/users/{telegram_id}/digest")
def get_user_personal_digest(
    bot_id: int,
    telegram_id: int,
    limit: int = Query(15, ge=1, le=50),
    date_from: Optional[str] = None,
    db: Session = Depends(get_db)
):
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Backend.

    –õ–æ–≥–∏–∫–∞:
    - –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    - –ë–µ—Ä—ë–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ AI –ø–æ—Å—Ç—ã –∏–∑ processed_data –ø–æ bot_id (JOIN —Å posts_cache)
    - –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ —Ç–∞–∫–∂–µ –ø–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
    - –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º limit –∏–ª–∏ max_posts_per_digest –∏–∑ public_bots
    - –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–º–µ ‚Üí –∫–∞–Ω–∞–ª—É –∏ —Å–æ–±–∏—Ä–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not bot:
        raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    max_posts = bot.max_posts_per_digest or limit
    if limit:
        max_posts = min(max_posts, limit)

    # –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subs_categories = db.query(Category).join(
        user_category_subscriptions,
        Category.id == user_category_subscriptions.c.category_id
    ).filter(
        user_category_subscriptions.c.user_telegram_id == telegram_id,
        user_category_subscriptions.c.public_bot_id == bot_id
    ).all()

    subs_channels = db.query(Channel).join(
        user_channel_subscriptions,
        user_channel_subscriptions.c.channel_id == Channel.id
    ).filter(
        user_channel_subscriptions.c.user_telegram_id == telegram_id,
        user_channel_subscriptions.c.public_bot_id == bot_id
    ).all()

    subscribed_category_names = {c.name.lower() for c in subs_categories}
    subscribed_channel_ids = {c.id for c in subs_channels}

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
    if not subscribed_category_names:
        try:
            logging.getLogger("main").info(
                f"digest: early-exit no category subs (bot_id={bot_id}, user_id={telegram_id})"
            )
        except Exception:
            pass
        return {
            'text': '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º.',
            'total_posts': 0,
            'selected_posts': 0,
            'themes': []
        }

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª ‚Äî –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
    if not subscribed_channel_ids:
        try:
            logging.getLogger("main").info(
                f"digest: early-exit no channel subs (bot_id={bot_id}, user_id={telegram_id})"
            )
        except Exception:
            pass
        return {
            'text': '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /channels –¥–ª—è –≤—ã–±–æ—Ä–∞.',
            'total_posts': 0,
            'selected_posts': 0,
            'themes': []
        }

    # –ü–æ—Å—Ç—ã —Å AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è bot_id
    q = db.query(
        PostCache.id,
        PostCache.title,
        PostCache.content,
        PostCache.views,
        PostCache.post_date,
        ProcessedData.summaries,
        ProcessedData.categories,
        ProcessedData.metrics,
        ProcessedData.processed_at,
        ProcessedData.public_bot_id,
        Channel.id.label('channel_id'),
        Channel.title.label('channel_title'),
    ).join(
        ProcessedData, PostCache.id == ProcessedData.post_id
    ).join(
        Channel, Channel.telegram_id == PostCache.channel_telegram_id
    ).filter(
        ProcessedData.public_bot_id == bot_id,
        ProcessedData.is_categorized == True
    )
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
    if subscribed_channel_ids:
        q = q.filter(Channel.id.in_(list(subscribed_channel_ids)))
    if date_from:
        try:
            dt_from = datetime.fromisoformat(date_from.replace('Z', '+00:00'))
            q = q.filter(PostCache.post_date >= dt_from)
        except Exception:
            pass

    # –ë–µ—Ä–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –ø–æ –¥–∞—Ç–µ –ø–æ—Å—Ç–∞
    rows = q.order_by(PostCache.post_date.desc()).limit(200).all()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º –∏ —Å–±–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    grouped: dict = {}
    selected_posts = 0
    for row in rows:
        # AI category
        category_name = None
        try:
            categories = row.categories if isinstance(row.categories, dict) else json.loads(row.categories)
            category_name = categories.get('category_name') or categories.get('ru') or categories.get('primary')
        except Exception:
            pass
        if not category_name:
            continue

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if subscribed_category_names and category_name.lower() not in subscribed_category_names:
            continue

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã)
        # –£ –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ channel_id –≤ –∑–∞–ø—Ä–æ—Å–µ; –≤ MVP –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å channel_id, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ id –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞

        # –°—É–º–º–∞—Ä–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ)
        summary = None
        try:
            summaries = row.summaries if isinstance(row.summaries, dict) else json.loads(row.summaries)
            summary = summaries.get('ru') or summaries.get('summary') or summaries.get('text')
        except Exception:
            pass
        if not summary or not str(summary).strip():
            continue

        # –ú–µ—Ç—Ä–∏–∫–∏
        importance = urgency = significance = views = 0
        try:
            metrics = row.metrics if isinstance(row.metrics, dict) else json.loads(row.metrics)
            importance = metrics.get('importance', 0)
            urgency = metrics.get('urgency', 0)
            significance = metrics.get('significance', 0)
        except Exception:
            pass
        views = row.views or 0

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: —Ç–µ–º–∞ ‚Üí –∫–∞–Ω–∞–ª
        theme = str(category_name)
        try:
            channel_title = getattr(row, 'channel_title', None) or "–ö–∞–Ω–∞–ª"
        except Exception:
            channel_title = "–ö–∞–Ω–∞–ª"

        grouped.setdefault(theme, {}).setdefault(channel_title, []).append({
            'title': row.title,
            'summary': summary,
            'importance': importance,
            'urgency': urgency,
            'significance': significance,
            'views': views,
            'post_date': getattr(row, 'post_date', None),
        })

        selected_posts += 1
        if selected_posts >= max_posts:
            break

    subscribed_human = {c.name for c in subs_categories}
    try:
        logging.getLogger("main").info(
            f"digest: bot_id={bot_id}, user_id={telegram_id}, subs_cat={len(subscribed_category_names)}, "
            f"subs_chan={len(subscribed_channel_ids)}, rows={len(rows)}, selected={selected_posts}"
        )
    except Exception:
        pass
    text = _build_digest_text(grouped, subscribed_human)
    return {
        'text': text,
        'total_posts': len(rows),
        'selected_posts': selected_posts,
        'themes': list(grouped.keys()),
    }

@app.post("/api/public-bots/{bot_id}/users/{telegram_id}/subscriptions")
def update_user_bot_subscriptions(
    bot_id: int, 
    telegram_id: int, 
    request: dict,  # {"category_ids": [1, 2, 3]}
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not bot:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    category_ids = request.get('category_ids', [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if category_ids:
        categories = db.query(Category).filter(Category.id.in_(category_ids)).all()
        if len(categories) != len(category_ids):
            found_ids = [cat.id for cat in categories]
            missing_ids = [cat_id for cat_id in category_ids if cat_id not in found_ids]
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {missing_ids}"
            )
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    db.execute(
        user_category_subscriptions.delete().where(
            and_(
                user_category_subscriptions.c.user_telegram_id == telegram_id,
                user_category_subscriptions.c.public_bot_id == bot_id
            )
        )
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if category_ids:
        for category_id in category_ids:
            db.execute(
                user_category_subscriptions.insert().values(
                    user_telegram_id=telegram_id,
                    category_id=category_id,
                    public_bot_id=bot_id
                )
            )
    
    db.commit()
    
    return {
        "message": f"–ü–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_ids)}",
        "user_telegram_id": telegram_id,
        "bot_id": bot_id,
        "subscribed_categories": len(category_ids),
        "category_ids": category_ids
    }

@app.delete("/api/public-bots/{bot_id}/users/{telegram_id}/subscriptions/{category_id}")
def remove_user_bot_subscription(bot_id: int, telegram_id: int, category_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_exists = db.execute(
        user_category_subscriptions.select().where(
            and_(
                user_category_subscriptions.c.user_telegram_id == telegram_id,
                user_category_subscriptions.c.category_id == category_id,
                user_category_subscriptions.c.public_bot_id == bot_id
            )
        )
    ).first()
    
    if not subscription_exists:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    db.execute(
        user_category_subscriptions.delete().where(
            and_(
                user_category_subscriptions.c.user_telegram_id == telegram_id,
                user_category_subscriptions.c.category_id == category_id,
                user_category_subscriptions.c.public_bot_id == bot_id
            )
        )
    )
    
    db.commit()
    
    return {"message": "–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞"}

# üöÄ API –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–Ω–∞–ª—ã (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)

@app.get("/api/public-bots/{bot_id}/users/{telegram_id}/channel-subscriptions")
def get_user_bot_channel_subscriptions(bot_id: int, telegram_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not bot:
        raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å JOIN –∫ –∫–∞–Ω–∞–ª–∞–º
    subscriptions_query = db.query(Channel).join(
        user_channel_subscriptions,
        user_channel_subscriptions.c.channel_id == Channel.id
    ).filter(
        user_channel_subscriptions.c.user_telegram_id == telegram_id,
        user_channel_subscriptions.c.public_bot_id == bot_id
    )
    
    channels = subscriptions_query.all()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
    channel_responses = []
    for channel in channels:
        channel_data = {
            "id": channel.id,
            "channel_name": channel.channel_name,
            "telegram_id": channel.telegram_id,
            "username": channel.username,
            "title": channel.title,
            "description": channel.description,
            "is_active": channel.is_active,
            "last_parsed": channel.last_parsed,
            "error_count": channel.error_count,
            "created_at": channel.created_at,
            "updated_at": channel.updated_at,
            "categories": []
        }
        channel_responses.append(channel_data)
    
    return {
        "user_telegram_id": telegram_id,
        "bot_id": bot_id,
        "subscribed_channels": channel_responses,
        "total_subscriptions": len(channel_responses)
    }

@app.post("/api/public-bots/{bot_id}/users/{telegram_id}/channel-subscriptions")
def update_user_bot_channel_subscriptions(
    bot_id: int, 
    telegram_id: int, 
    request: dict,  # {"channel_ids": [1, 2, 3]}
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not bot:
        raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    channel_ids = request.get("channel_ids", [])
    if not isinstance(channel_ids, list):
        raise HTTPException(status_code=400, detail="channel_ids –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –±–æ—Ç—É
    if channel_ids:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–Ω–∞–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        existing_channels = db.query(Channel).filter(Channel.id.in_(channel_ids)).all()
        if len(existing_channels) != len(channel_ids):
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –±–æ—Ç—É
        bot_channels = db.query(BotChannel).filter(
            BotChannel.public_bot_id == bot_id,
            BotChannel.channel_id.in_(channel_ids)
        ).all()
        
        if len(bot_channels) != len(channel_ids):
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    db.execute(
        user_channel_subscriptions.delete().where(
            and_(
                user_channel_subscriptions.c.user_telegram_id == telegram_id,
                user_channel_subscriptions.c.public_bot_id == bot_id
            )
        )
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if channel_ids:
        for channel_id in channel_ids:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            existing = db.execute(
                user_channel_subscriptions.select().where(
                    and_(
                        user_channel_subscriptions.c.user_telegram_id == telegram_id,
                        user_channel_subscriptions.c.channel_id == channel_id,
                        user_channel_subscriptions.c.public_bot_id == bot_id
                    )
                )
            ).first()
            
            if not existing:
                db.execute(
                    user_channel_subscriptions.insert().values(
                        user_telegram_id=telegram_id,
                        channel_id=channel_id,
                        public_bot_id=bot_id
                    )
                )
    
    db.commit()
    
    return {
        "message": "–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
        "user_telegram_id": telegram_id,
        "bot_id": bot_id,
        "subscribed_channel_ids": channel_ids,
        "total_subscriptions": len(channel_ids)
    }

@app.delete("/api/public-bots/{bot_id}/users/{telegram_id}/channel-subscriptions/{channel_id}")
def remove_user_bot_channel_subscription(bot_id: int, telegram_id: int, channel_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_exists = db.execute(
        user_channel_subscriptions.select().where(
            and_(
                user_channel_subscriptions.c.user_telegram_id == telegram_id,
                user_channel_subscriptions.c.channel_id == channel_id,
                user_channel_subscriptions.c.public_bot_id == bot_id
            )
        )
    ).first()
    
    if not subscription_exists:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    db.execute(
        user_channel_subscriptions.delete().where(
            and_(
                user_channel_subscriptions.c.user_telegram_id == telegram_id,
                user_channel_subscriptions.c.channel_id == channel_id,
                user_channel_subscriptions.c.public_bot_id == bot_id
            )
        )
    )
    
    db.commit()
    
    return {"message": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω–∞"}

# API –¥–ª—è posts_cache
@app.post("/api/posts/batch", status_code=status.HTTP_201_CREATED)
def create_posts_batch(batch: PostsBatchCreate, db: Session = Depends(get_db)):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç batch –ø–æ—Å—Ç–æ–≤ –æ—Ç userbot –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ posts_cache"""
    try:
        created_posts = []
        skipped_posts = []
        
        for post_data in batch.posts:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ—Å—Ç
            existing_post = db.query(PostCache).filter(
                PostCache.channel_telegram_id == post_data.channel_telegram_id,
                PostCache.telegram_message_id == post_data.telegram_message_id
            ).first()
            
            if existing_post:
                skipped_posts.append({
                    "channel_id": post_data.channel_telegram_id,
                    "message_id": post_data.telegram_message_id,
                    "reason": "already_exists"
                })
                continue
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
            post_dict = post_data.model_dump()
            # –£–±–∏—Ä–∞–µ–º processing_status —Ç–∞–∫ –∫–∞–∫ –º—ã —É–±—Ä–∞–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            post_dict.pop("processing_status", None)
            
            # –î–æ–±–∞–≤–ª—è–µ–º metadata –æ—Ç userbot - –∏—â–µ–º –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫–ª—é—á–∞–º
            metadata = {}
            if batch.channels_metadata:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ metadata –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
                channel_key = None
                for key in batch.channels_metadata.keys():
                    if str(post_data.channel_telegram_id) in key or key == str(post_data.channel_telegram_id):
                        channel_key = key
                        break
                
                if channel_key:
                    metadata = batch.channels_metadata[channel_key]
            
            # JSONB –ø–æ–ª—è —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ Python –æ–±—ä–µ–∫—Ç—ã
            post_dict["userbot_metadata"] = metadata if metadata else {}
            
            db_post = PostCache(**post_dict)
            db.add(db_post)
            created_posts.append(post_data.telegram_message_id)
        
        db.commit()
        
        return {
            "message": "Batch –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ",
            "timestamp": batch.timestamp,
            "collection_stats": batch.collection_stats,
            "created_posts": len(created_posts),
            "skipped_posts": len(skipped_posts),
            "created_ids": created_posts,
            "skipped_details": skipped_posts
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {str(e)}"
        )

@app.get("/api/posts/cache", response_model=List[PostCacheResponse])
def get_posts_cache(
    skip: int = 0,
    limit: int = 100,
    channel_telegram_id: Optional[int] = None,
    processing_status: Optional[str] = None,
    search: Optional[str] = None,
    date_from: Optional[str] = None,
    date_to: Optional[str] = None,
    sort_by: str = "collected_at",
    sort_order: str = "desc",
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –∏–∑ cache —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    from datetime import datetime
    
    query = db.query(PostCache)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–Ω–∞–ª—É
    if channel_telegram_id:
        query = query.filter(PostCache.channel_telegram_id == channel_telegram_id)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if processing_status:
        query = query.filter(PostCache.processing_status == processing_status)
    
    # –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    if search:
        search_pattern = f"%{search}%"
        query = query.filter(
            PostCache.content.ilike(search_pattern) |
            PostCache.title.ilike(search_pattern)
        )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    if date_from:
        try:
            date_from_obj = datetime.fromisoformat(date_from.replace('Z', '+00:00'))
            query = query.filter(PostCache.post_date >= date_from_obj)
        except ValueError:
            pass
    
    if date_to:
        try:
            date_to_obj = datetime.fromisoformat(date_to.replace('Z', '+00:00'))
            query = query.filter(PostCache.post_date <= date_to_obj)
        except ValueError:
            pass
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_column = getattr(PostCache, sort_by, PostCache.collected_at)
    if sort_order.lower() == "desc":
        query = query.order_by(sort_column.desc())
    else:
        query = query.order_by(sort_column.asc())
    
    posts = query.offset(skip).limit(limit).all()
    return posts

@app.get("/api/posts/cache-with-ai")
def get_posts_cache_with_ai(
    skip: int = 0,
    limit: int = 100,
    channel_telegram_id: Optional[int] = None,
    processing_status: Optional[str] = None,
    ai_status: Optional[str] = None,  # all, processed, unprocessed
    ai_category: Optional[str] = None,  # —Ñ–∏–ª—å—Ç—Ä –ø–æ AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    bot_id: Optional[int] = None,  # üöÄ –ù–û–í–´–ô –§–ò–õ–¨–¢–† –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    search: Optional[str] = None,
    date_from: Optional[str] = None,
    date_to: Optional[str] = None,
    sort_by: str = "collected_at",
    sort_order: str = "desc",
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –∏–∑ cache —Å AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (LEFT JOIN —Å processed_data)"""
    from datetime import datetime
    from sqlalchemy import func as sql_func
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å LEFT JOIN –∫ processed_data
    query = db.query(
        PostCache.id,
        PostCache.channel_telegram_id,
        PostCache.telegram_message_id,
        PostCache.title,
        PostCache.content,
        PostCache.media_urls,
        PostCache.views,
        PostCache.post_date,
        PostCache.collected_at,
        PostCache.userbot_metadata,
        # AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ processed_data (–º–æ–≥—É—Ç –±—ã—Ç—å NULL)
        ProcessedData.summaries.label('ai_summaries'),
        ProcessedData.categories.label('ai_categories'),
        ProcessedData.metrics.label('ai_metrics'),
        ProcessedData.processed_at.label('ai_processed_at'),
        ProcessedData.processing_version.label('ai_processing_version'),
        ProcessedData.is_categorized.label('ai_is_categorized'),
        ProcessedData.is_summarized.label('ai_is_summarized')
    ).outerjoin(
        ProcessedData, 
        PostCache.id == ProcessedData.post_id
    )
    
    # üöÄ –ù–û–í–´–ô –§–ò–õ–¨–¢–†: –ø–æ bot_id (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å)
    if bot_id:
        logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ bot_id={bot_id}")
        query = query.filter(ProcessedData.public_bot_id == bot_id)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–Ω–∞–ª—É
    if channel_telegram_id:
        query = query.filter(PostCache.channel_telegram_id == channel_telegram_id)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤ (–£–ë–†–ê–ù–û: processing_status –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ PostCache)
    # if processing_status:
    #     query = query.filter(PostCache.processing_status == processing_status)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if ai_status == "processed":
        query = query.filter(ProcessedData.id.isnot(None))
    elif ai_status == "unprocessed":
        query = query.filter(ProcessedData.id.is_(None))
    # ai_status == "all" - –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    
    # –§–∏–ª—å—Ç—Ä –ø–æ AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if ai_category:
        if USE_POSTGRESQL:
            # PostgreSQL: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ JSONB –ø–æ–ª—é categories
            query = query.filter(ProcessedData.categories['category_name'].astext == ai_category)
        else:
            # SQLite: —Ñ–∏–ª—å—Ç—Ä—É–µ–º —á–µ—Ä–µ–∑ JSON_EXTRACT
            query = query.filter(ProcessedData.categories.like(f'%"category_name": "{ai_category}"%'))
    
    # –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    if search:
        search_pattern = f"%{search}%"
        query = query.filter(
            PostCache.content.ilike(search_pattern) |
            PostCache.title.ilike(search_pattern)
        )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    if date_from:
        try:
            date_from_obj = datetime.fromisoformat(date_from.replace('Z', '+00:00'))
            query = query.filter(PostCache.post_date >= date_from_obj)
        except ValueError:
            pass
    
    if date_to:
        try:
            date_to_obj = datetime.fromisoformat(date_to.replace('Z', '+00:00'))
            query = query.filter(PostCache.post_date <= date_to_obj)
        except ValueError:
            pass
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort_by == "ai_processed_at":
        sort_column = ProcessedData.processed_at
    elif sort_by == "ai_importance":
        # –ò–∑–≤–ª–µ–∫–∞–µ–º importance –∏–∑ JSONB –ø–æ–ª—è metrics
        if USE_POSTGRESQL:
            sort_column = ProcessedData.metrics['importance'].astext.cast(Float)
        else:
            sort_column = PostCache.collected_at  # fallback –¥–ª—è SQLite
    else:
        sort_column = getattr(PostCache, sort_by, PostCache.collected_at)
    
    if sort_order.lower() == "desc":
        query = query.order_by(sort_column.desc())
    else:
        query = query.order_by(sort_column.asc())
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    results = query.offset(skip).limit(limit).all()
    
    logger.info(f"üìä cache-with-ai: –ù–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è bot_id={bot_id}")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Ç–¥–µ–ª—å–Ω—ã–π count –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    # –°–æ–∑–¥–∞–µ–º count –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º–∏ –∂–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –Ω–æ –±–µ–∑ offset/limit
    count_query = db.query(PostCache.id).outerjoin(
        ProcessedData, 
        PostCache.id == ProcessedData.post_id
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã —á—Ç–æ –∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if bot_id:
        count_query = count_query.filter(ProcessedData.public_bot_id == bot_id)
    
    if channel_telegram_id:
        count_query = count_query.filter(PostCache.channel_telegram_id == channel_telegram_id)
    
    if ai_status == "processed":
        count_query = count_query.filter(ProcessedData.id.isnot(None))
    elif ai_status == "unprocessed":
        count_query = count_query.filter(ProcessedData.id.is_(None))
    
    # –§–∏–ª—å—Ç—Ä –ø–æ AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ count –∑–∞–ø—Ä–æ—Å–µ
    if ai_category:
        if USE_POSTGRESQL:
            # PostgreSQL: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ JSONB –ø–æ–ª—é categories
            count_query = count_query.filter(ProcessedData.categories['category_name'].astext == ai_category)
        else:
            # SQLite: —Ñ–∏–ª—å—Ç—Ä—É–µ–º —á–µ—Ä–µ–∑ JSON_EXTRACT
            count_query = count_query.filter(ProcessedData.categories.like(f'%"category_name": "{ai_category}"%'))
    
    if search:
        search_pattern = f"%{search}%"
        count_query = count_query.filter(
            PostCache.content.ilike(search_pattern) |
            PostCache.title.ilike(search_pattern)
        )
    
    if date_from:
        try:
            date_from_obj = datetime.fromisoformat(date_from.replace('Z', '+00:00'))
            count_query = count_query.filter(PostCache.post_date >= date_from_obj)
        except ValueError:
            pass
    
    if date_to:
        try:
            date_to_obj = datetime.fromisoformat(date_to.replace('Z', '+00:00'))
            count_query = count_query.filter(PostCache.post_date <= date_to_obj)
        except ValueError:
            pass
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    total_count = count_query.count()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    posts_with_ai = []
    for row in results:
        # –ü–∞—Ä—Å–∏–º AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ JSONB
        ai_summary = None
        ai_category = None
        ai_importance = None
        ai_urgency = None
        ai_significance = None
        
        if row.ai_summaries:
            try:
                if USE_POSTGRESQL:
                    summaries = row.ai_summaries if isinstance(row.ai_summaries, dict) else json.loads(row.ai_summaries)
                else:
                    summaries = json.loads(row.ai_summaries)
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º ru, –ø–æ—Ç–æ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                ai_summary = summaries.get('ru') or summaries.get('summary') or summaries.get('text')
            except (json.JSONDecodeError, AttributeError):
                pass
        
        if row.ai_categories:
            try:
                if USE_POSTGRESQL:
                    categories = row.ai_categories if isinstance(row.ai_categories, dict) else json.loads(row.ai_categories)
                else:
                    categories = json.loads(row.ai_categories)
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ category_name –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
                ai_category = categories.get('category_name') or categories.get('ru') or categories.get('primary') or categories.get('category')
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è "–ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ"
                if not ai_category and categories.get('category_name') == '–ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ':
                    ai_category = '–ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ'
                # –ù–û–í–û–ï: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É "None" –∫–∞–∫ null
                if ai_category == 'None':
                    ai_category = None
            except (json.JSONDecodeError, AttributeError) as e:
                # –£–õ–£–ß–®–ï–ù–û: –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ai_categories –¥–ª—è post {row.id}: {e}")
                print(f"DEBUG: raw ai_categories: {row.ai_categories}")
                # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å category_name –∏–∑ —Å—Ç—Ä–æ–∫–∏
                if isinstance(row.ai_categories, str) and 'category_name' in row.ai_categories:
                    try:
                        import re
                        match = re.search(r'"category_name":\s*"([^"]+)"', row.ai_categories)
                        if match:
                            ai_category = match.group(1)
                    except Exception:
                        pass
        
        if row.ai_metrics:
            try:
                if USE_POSTGRESQL:
                    metrics = row.ai_metrics if isinstance(row.ai_metrics, dict) else json.loads(row.ai_metrics)
                else:
                    metrics = json.loads(row.ai_metrics)
                ai_importance = metrics.get('importance')
                ai_urgency = metrics.get('urgency')
                ai_significance = metrics.get('significance')
            except (json.JSONDecodeError, AttributeError):
                pass
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –µ—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ metrics, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ categories
        if not ai_importance and row.ai_categories:
            try:
                if USE_POSTGRESQL:
                    categories = row.ai_categories if isinstance(row.ai_categories, dict) else json.loads(row.ai_categories)
                else:
                    categories = json.loads(row.ai_categories)
                ai_importance = categories.get('importance')
                ai_urgency = categories.get('urgency')
                ai_significance = categories.get('significance')
            except (json.JSONDecodeError, AttributeError):
                pass
        
        post_data = {
            "id": row.id,
            "channel_telegram_id": row.channel_telegram_id,
            "telegram_message_id": row.telegram_message_id,
            "title": row.title,
            "content": row.content,
            "media_urls": row.media_urls if USE_POSTGRESQL else (json.loads(row.media_urls) if row.media_urls else []),
            "views": row.views,
            "post_date": row.post_date,
            "collected_at": row.collected_at,
            "userbot_metadata": row.userbot_metadata if USE_POSTGRESQL else (json.loads(row.userbot_metadata) if row.userbot_metadata else {}),
            # –£–ë–†–ê–ù–û: "processing_status": row.processing_status,  # –ó–∞–º–µ–Ω–µ–Ω–æ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            # AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            "ai_summary": ai_summary,
            "ai_category": ai_category,
            "ai_importance": ai_importance,
            "ai_urgency": ai_urgency,
            "ai_significance": ai_significance,
            "ai_processed_at": row.ai_processed_at,
            "ai_processing_version": row.ai_processing_version,
            "ai_is_categorized": row.ai_is_categorized,
            "ai_is_summarized": row.ai_is_summarized
        }
        posts_with_ai.append(post_data)
    
    return {
        "posts": posts_with_ai,
        "total_count": total_count,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π count –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        "has_ai_results": any(post["ai_summary"] is not None for post in posts_with_ai)
    }

@app.get("/api/posts/stats")
def get_posts_stats(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É posts_cache"""
    from sqlalchemy import func as sql_func
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_posts = db.query(PostCache).count()
    
    # –†–∞–∑–º–µ—Ä –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è posts_cache, processed_data –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
    total_size_mb = get_database_size()
    
    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è collected_at
    last_updated = db.query(sql_func.max(PostCache.collected_at)).scalar()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    channel_stats = db.query(
        PostCache.channel_telegram_id,
        sql_func.count(PostCache.id).label('posts_count'),
        sql_func.max(PostCache.collected_at).label('last_collected'),
        sql_func.avg(PostCache.views).label('avg_views'),
        sql_func.max(PostCache.views).label('max_views')
    ).group_by(
        PostCache.channel_telegram_id
    ).all()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—É–±—Ä–∞–Ω–æ –¥–ª—è –¥–≤—É—Ö—Ç–∞–±–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã)
    # status_stats = db.query(
    #     PostCache.processing_status,
    #     sql_func.count(PostCache.id).label('count')
    # ).group_by(PostCache.processing_status).all()
    status_stats = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    channel_info = {}
    for stat in channel_stats:
        channel = db.query(Channel).filter(Channel.telegram_id == stat.channel_telegram_id).first()
        if channel:
            channel_info[stat.channel_telegram_id] = {
                "title": channel.title,
                "username": channel.username,
                "categories": [cat.name for cat in channel.categories]
            }
    
    return {
        "total_posts": total_posts,
        "total_size_mb": total_size_mb,  # –ü–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ë–î –≤ –ú–ë
        "last_updated": last_updated,    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        "channels": [
            {
                "telegram_id": stat.channel_telegram_id,
                "posts_count": stat.posts_count,
                "last_collected": stat.last_collected,
                "avg_views": round(stat.avg_views or 0, 0),
                "max_views": stat.max_views or 0,
                "title": channel_info.get(stat.channel_telegram_id, {}).get("title", f"Channel {stat.channel_telegram_id}"),
                "username": channel_info.get(stat.channel_telegram_id, {}).get("username"),
                "categories": channel_info.get(stat.channel_telegram_id, {}).get("categories", [])
            }
            for stat in channel_stats
        ],
        "processing_status": [
            # –£–±—Ä–∞–Ω–æ –¥–ª—è –¥–≤—É—Ö—Ç–∞–±–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã - —Å—Ç–∞—Ç—É—Å—ã —Ç–µ–ø–µ—Ä—å –≤ processed_data
        ]
    }

@app.get("/api/posts/cache/count")
def get_posts_cache_count(
    channel_telegram_id: Optional[int] = None,
    processing_status: Optional[str] = None,
    search: Optional[str] = None,
    date_from: Optional[str] = None,
    date_to: Optional[str] = None,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)"""
    from datetime import datetime
    
    query = db.query(PostCache)
    
    if channel_telegram_id:
        query = query.filter(PostCache.channel_telegram_id == channel_telegram_id)
    
    if processing_status:
        query = query.filter(PostCache.processing_status == processing_status)
    
    if search:
        search_pattern = f"%{search}%"
        query = query.filter(
            PostCache.content.ilike(search_pattern) |
            PostCache.title.ilike(search_pattern)
        )
    
    if date_from:
        try:
            date_from_obj = datetime.fromisoformat(date_from.replace('Z', '+00:00'))
            query = query.filter(PostCache.post_date >= date_from_obj)
        except ValueError:
            pass
    
    if date_to:
        try:
            date_to_obj = datetime.fromisoformat(date_to.replace('Z', '+00:00'))
            query = query.filter(PostCache.post_date <= date_to_obj)
        except ValueError:
            pass
    
    total_count = query.count()
    return {"total_count": total_count}

@app.get("/api/posts/cache/size")
def get_posts_cache_size(
    channel_telegram_id: Optional[int] = None,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä posts_cache –≤ –ú–ë (–æ–±—â–∏–π –∏–ª–∏ –ø–æ –∫–∞–Ω–∞–ª—É)"""
    try:
        if channel_telegram_id:
            size_mb = get_filtered_data_size([channel_telegram_id])
        else:
            size_mb = get_filtered_data_size()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if not channel_telegram_id:
            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø—Ä—è–º–æ –≤ endpoint
            result = db.execute(text("SELECT pg_size_pretty(pg_total_relation_size('posts_cache'))")).fetchone()
            debug_size_str = result[0] if result else "unknown"
            print(f"DEBUG: pg_size_pretty result for posts_cache: '{debug_size_str}'")
        
        return {
            "size_mb": size_mb,
            "channel_telegram_id": channel_telegram_id
        }
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )

@app.put("/api/posts/cache/batch-status")
def update_posts_status_batch(
    request: dict,  # {"post_ids": [1, 2, 3], "status": "processing", "updated_at": "2025-06-24T10:00:00Z"}
    db: Session = Depends(get_db)
):
    """üîß –ù–û–í–û–ï: –ë–∞—Ç—á–µ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ AI Orchestrator"""
    post_ids = request.get("post_ids", [])
    new_status = request.get("status")
    
    if not post_ids:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–ª–µ 'post_ids' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        )
    
    if not new_status:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–ª–µ 'status' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    valid_statuses = ["pending", "processing", "completed", "failed"]
    if new_status not in valid_statuses:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {valid_statuses}"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
    if len(post_ids) > 100:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –±–∞—Ç—á–µ: 100"
        )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        posts = db.query(PostCache).filter(PostCache.id.in_(post_ids)).all()
        found_post_ids = {post.id for post in posts}
        missing_post_ids = set(post_ids) - found_post_ids
        
        if missing_post_ids:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å—Ç—ã —Å ID: {missing_post_ids}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        if posts:
            update_count = db.query(PostCache).filter(
                PostCache.id.in_([post.id for post in posts])
            ).update({
                "processing_status": new_status
            }, synchronize_session=False)
            
            db.commit()
            
            logger.info(f"‚úÖ –ë–∞—Ç—á–µ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {update_count} –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç–∞—Ç—É—Å '{new_status}'")
            
            return {
                "message": f"–ë–∞—Ç—á–µ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {update_count} –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç–∞—Ç—É—Å '{new_status}'",
                "updated_count": update_count,
                "requested_count": len(post_ids),
                "found_count": len(posts),
                "missing_post_ids": list(missing_post_ids) if missing_post_ids else [],
                "status": new_status
            }
        else:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"–ù–∏ –æ–¥–∏–Ω –∏–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {post_ids}"
            )
            
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤: {str(e)}"
        )

@app.get("/api/posts/cache/{post_id}", response_model=PostCacheResponse)
def get_post_by_id(post_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç –ø–æ ID"""
    post = db.query(PostCache).filter(PostCache.id == post_id).first()
    if not post:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    return post

@app.put("/api/posts/cache/{post_id}/status")
def update_post_status(
    post_id: int, 
    request: dict,  # {"status": "processing"}
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞"""
    post = db.query(PostCache).filter(PostCache.id == post_id).first()
    if not post:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    new_status = request.get("status")
    if not new_status:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–ª–µ 'status' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    valid_statuses = ["pending", "processing", "completed", "failed"]
    if new_status not in valid_statuses:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {valid_statuses}"
        )
    
    post.processing_status = new_status
    db.commit()
    db.refresh(post)
    
    return {
        "message": f"–°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ {post_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_status}'",
        "post_id": post_id,
        "old_status": post.processing_status,
        "new_status": new_status
    }

@app.delete("/api/posts/cache/bulk-delete", response_model=dict)
def bulk_delete_posts(
    request: PostsBulkDeleteRequest,
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç—ã –ø–æ –∏—Ö ID"""
    try:
        post_ids = request.post_ids
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        posts = db.query(PostCache).filter(PostCache.id.in_(post_ids)).all()
        found_post_ids = {post.id for post in posts}
        missing_post_ids = set(post_ids) - found_post_ids
        
        if missing_post_ids:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å—Ç—ã —Å ID: {missing_post_ids}")
        
        # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        if posts:
            post_ids_list = [post.id for post in posts]
            
            # üìä –ü–û–î–°–ß–ï–¢ –°–í–Ø–ó–ê–ù–ù–´–• –î–ê–ù–ù–´–• –î–õ–Ø –û–¢–ß–ï–¢–ù–û–°–¢–ò
            # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ processed_data –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            processed_data_count = db.query(ProcessedData).filter(
                ProcessedData.post_id.in_(post_ids_list)
            ).count()
            
            # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ processed_service_results –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º  
            service_results_count = db.query(ProcessedServiceResult).filter(
                ProcessedServiceResult.post_id.in_(post_ids_list)
            ).count()
            
            # üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –°–í–Ø–ó–ê–ù–ù–´–• AI –î–ê–ù–ù–´–• (—Å–æ–≥–ª–∞—Å–Ω–æ Data_Structure.md)
            # 1. –£–¥–∞–ª—è–µ–º –∏–∑ processed_data (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
            deleted_processed_data = db.query(ProcessedData).filter(
                ProcessedData.post_id.in_(post_ids_list)
            ).delete(synchronize_session=False)
            
            # 2. –£–¥–∞–ª—è–µ–º –∏–∑ processed_service_results (–∂—É—Ä–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤)
            deleted_service_results = db.query(ProcessedServiceResult).filter(
                ProcessedServiceResult.post_id.in_(post_ids_list)
            ).delete(synchronize_session=False)
            
            # 3. –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ posts_cache
            deleted_posts = db.query(PostCache).filter(
                PostCache.id.in_(post_ids_list)
            ).delete(synchronize_session=False)
            
            db.commit()
            
            logger.info(f"‚úÖ Bulk delete –∑–∞–≤–µ—Ä—à–µ–Ω: {deleted_posts} –ø–æ—Å—Ç–æ–≤, {deleted_processed_data} processed_data, {deleted_service_results} service_results")
            
            return {
                "message": f"–£–¥–∞–ª–µ–Ω–æ {deleted_posts} –ø–æ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π AI –¥–∞–Ω–Ω—ã—Ö",
                "deleted_count": deleted_posts,
                "deleted_processed_data": deleted_processed_data,
                "deleted_service_results": deleted_service_results,
                "requested_count": len(post_ids),
                "found_count": len(posts),
                "missing_post_ids": list(missing_post_ids) if missing_post_ids else [],
                "cleanup_summary": {
                    "posts_cache": deleted_posts,
                    "processed_data": deleted_processed_data, 
                    "processed_service_results": deleted_service_results,
                    "total_ai_records_cleaned": deleted_processed_data + deleted_service_results
                }
            }
        else:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"–ù–∏ –æ–¥–∏–Ω –∏–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {post_ids}"
            )
            
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {str(e)}"
        )

@app.delete("/api/posts/cache/{post_id}")
def delete_post_by_id(post_id: int, db: Session = Depends(get_db)):
    """üîß –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        post = db.query(PostCache).filter(PostCache.id == post_id).first()
        if not post:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"–ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ processed_data
        processed_data_count = db.query(ProcessedData).filter(
            ProcessedData.post_id == post_id
        ).count()
        
        db.query(ProcessedData).filter(
            ProcessedData.post_id == post_id
        ).delete(synchronize_session=False)
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ processed_service_results
        service_results_count = db.query(ProcessedServiceResult).filter(
            ProcessedServiceResult.post_id == post_id
        ).count()
        
        db.query(ProcessedServiceResult).filter(
            ProcessedServiceResult.post_id == post_id
        ).delete(synchronize_session=False)
        
        # –£–¥–∞–ª—è–µ–º —Å–∞–º –ø–æ—Å—Ç
        db.query(PostCache).filter(PostCache.id == post_id).delete()
        
        db.commit()
        
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω –ø–æ—Å—Ç {post_id} —Å {processed_data_count} AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ {service_results_count} —Å–µ—Ä–≤–∏—Å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏")
        
        return {
            "message": f"–ü–æ—Å—Ç {post_id} –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã",
            "post_id": post_id,
            "deleted_processed_data": processed_data_count,
            "deleted_service_results": service_results_count
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {str(e)}"
        )

@app.delete("/api/database/clear")
def clear_database(
    confirm: bool = False,
    db: Session = Depends(get_db)
):
    """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –î–ï–ô–°–¢–í–ò–ï: –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if not confirm:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä confirm=true"
        )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        posts_count = db.query(PostCache).count()
        digests_count = db.query(Digest).count()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
        db.query(PostCache).delete()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã  
        db.query(Digest).delete()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–≤—è–∑–∏ –∫–∞–Ω–∞–ª–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # db.execute(text("TRUNCATE TABLE channel_categories"))
        
        db.commit()
        
        return {
            "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞",
            "deleted_posts": posts_count,
            "deleted_digests": digests_count,
            "warning": "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )

@app.delete("/api/posts/orphans")
def cleanup_orphan_posts(
    confirm: bool = False,
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç—ã –æ—Ç –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ (orphan cleanup)"""
    if not confirm:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä confirm=true"
        )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö telegram_id –∫–∞–Ω–∞–ª–æ–≤
        active_channel_ids = db.query(Channel.telegram_id).filter(Channel.is_active == True).all()
        active_ids_set = {row[0] for row in active_channel_ids}
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç—ã –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        orphan_posts_query = db.query(PostCache).filter(
            ~PostCache.channel_telegram_id.in_(active_ids_set)
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        orphan_count = orphan_posts_query.count()
        
        if orphan_count == 0:
            return {
                "message": "Orphan –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                "deleted_posts": 0,
                "active_channels": len(active_ids_set)
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ orphan –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        orphan_channels_stats = db.query(
            PostCache.channel_telegram_id,
            sql_func.count(PostCache.id).label('posts_count')
        ).filter(
            ~PostCache.channel_telegram_id.in_(active_ids_set)
        ).group_by(PostCache.channel_telegram_id).all()
        
        # –£–¥–∞–ª—è–µ–º orphan –ø–æ—Å—Ç—ã
        deleted_count = orphan_posts_query.delete(synchronize_session=False)
        db.commit()
        
        return {
            "message": f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} orphan –ø–æ—Å—Ç–æ–≤",
            "deleted_posts": deleted_count,
            "orphan_channels": [
                {
                    "telegram_id": stat.channel_telegram_id,
                    "deleted_posts": stat.posts_count
                }
                for stat in orphan_channels_stats
            ],
            "active_channels": len(active_ids_set)
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ orphan –ø–æ—Å—Ç–æ–≤: {str(e)}"
        )

@app.delete("/api/ai/results/bulk-delete", response_model=dict)
def bulk_delete_ai_results(
    request: PostsBulkDeleteRequest,
    db: Session = Depends(get_db)
):
    """üß† –£–î–ê–õ–ò–¢–¨ –¢–û–õ–¨–ö–û AI –†–ï–ó–£–õ–¨–¢–ê–¢–´ (–ù–ï –¢–†–û–ì–ê–Ø –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –ü–û–°–¢–´)
    
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è AI RESULTS —Ç–∞–±–∞ - —É–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ AI –¥–∞–Ω–Ω—ã–µ –∏–∑:
    - processed_data (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
    - processed_service_results (–∂—É—Ä–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤)
    
    –ù–ï –¢–†–û–ì–ê–ï–¢ posts_cache - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ!
    """
    try:
        post_ids = request.post_ids
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ (–Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º –∏—Ö)
        existing_posts = db.query(PostCache).filter(PostCache.id.in_(post_ids)).all()
        found_post_ids = {post.id for post in existing_posts}
        missing_post_ids = set(post_ids) - found_post_ids
        
        if missing_post_ids:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å—Ç—ã —Å ID: {missing_post_ids}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º AI –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        processed_data_count = db.query(ProcessedData).filter(
            ProcessedData.post_id.in_(post_ids)
        ).count()
        
        service_results_count = db.query(ProcessedServiceResult).filter(
            ProcessedServiceResult.post_id.in_(post_ids)
        ).count()
        
        # üóëÔ∏è –£–î–ê–õ–Ø–ï–ú –¢–û–õ–¨–ö–û AI –î–ê–ù–ù–´–ï (–ø–æ—Å—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è!)
        # 1. –£–¥–∞–ª—è–µ–º –∏–∑ processed_data (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        deleted_processed_data = db.query(ProcessedData).filter(
            ProcessedData.post_id.in_(post_ids)
        ).delete(synchronize_session=False)
        
        # 2. –£–¥–∞–ª—è–µ–º –∏–∑ processed_service_results (–∂—É—Ä–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤)
        deleted_service_results = db.query(ProcessedServiceResult).filter(
            ProcessedServiceResult.post_id.in_(post_ids)
        ).delete(synchronize_session=False)
        
        # ‚úÖ posts_cache –ù–ï –¢–†–û–ì–ê–ï–ú - –ø–æ—Å—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ!
        
        db.commit()
        
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {deleted_processed_data} processed_data, {deleted_service_results} service_results. –ü–æ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
        return {
            "message": f"–£–¥–∞–ª–µ–Ω—ã AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {len(found_post_ids)} –ø–æ—Å—Ç–æ–≤ (–ø–æ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)",
            "deleted_ai_results": deleted_processed_data + deleted_service_results,
            "deleted_processed_data": deleted_processed_data,
            "deleted_service_results": deleted_service_results,
            "posts_preserved": len(found_post_ids),  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            "requested_count": len(post_ids),
            "found_post_ids": list(found_post_ids),
            "missing_post_ids": list(missing_post_ids) if missing_post_ids else [],
            "cleanup_summary": {
                "posts_cache": 0,  # –ü–æ—Å—Ç—ã –ù–ï —É–¥–∞–ª–µ–Ω—ã!
                "processed_data": deleted_processed_data,
                "processed_service_results": deleted_service_results,
                "total_ai_records_cleaned": deleted_processed_data + deleted_service_results,
                "posts_preserved": len(found_post_ids)
            }
        }
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}"
        )

# ==================== USERBOT API ====================

@app.post("/api/userbot/run")
async def run_userbot_manual(db: Session = Depends(get_db)):
    """–ó–∞–ø—É—Å–∫ userbot –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –ø–æ—Å—Ç–æ–≤"""
    try:
        import subprocess
        import asyncio
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∑–∞–ø—É—Å–∫–∞
        stats_before = db.query(PostCache).count()
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ userbot –¥–ª—è —Å–±–æ—Ä–∞ –ø–æ—Å—Ç–æ–≤...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º userbot –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ docker-compose
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ userbot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            result = subprocess.run(
                ["docker-compose", "restart", "userbot"],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode != 0:
                raise Exception(f"Docker-compose restart failed: {result.stderr}")
                
            logger.info("‚úÖ Userbot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            
        except subprocess.TimeoutExpired:
            raise Exception("Timeout –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ userbot")
        except FileNotFoundError:
            # Fallback: –µ—Å–ª–∏ docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º docker –Ω–∞–ø—Ä—è–º—É—é
            result = subprocess.run(
                ["docker", "restart", "morningstar_userbot"],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode != 0:
                raise Exception(f"Docker restart failed: {result.stderr}")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞
        await asyncio.sleep(15)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        stats_after = db.query(PostCache).count()
        posts_collected = stats_after - stats_before
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        active_channels = db.query(Channel).filter(Channel.is_active == True).count()
        
        logger.info(f"‚úÖ Userbot –∑–∞–ø—É—â–µ–Ω. –°–æ–±—Ä–∞–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {posts_collected}")
        
        return {
            "success": True,
            "message": "Userbot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω",
            "posts_collected": posts_collected,
            "active_channels": active_channels,
            "container_status": "restarted"
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ userbot: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ userbot: {str(e)}"
        )

@app.get("/api/userbot/status")
def get_userbot_status(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å userbot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    try:
        import subprocess
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å userbot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        try:
            result = subprocess.run(
                ["docker", "inspect", "morningstar_userbot", "--format", "{{.State.Status}}"],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            container_status = result.stdout.strip() if result.returncode == 0 else "unknown"
            
        except (subprocess.TimeoutExpired, FileNotFoundError):
            container_status = "unknown"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_posts = db.query(PostCache).count()
        active_channels = db.query(Channel).filter(Channel.is_active == True).count()
        
        # –°—á–∏—Ç–∞–µ–º –ø–æ—Å—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().date()
        today_posts = db.query(PostCache).filter(
            func.date(PostCache.created_at) == today
        ).count()
        
        return {
            "container_status": container_status,
            "total_posts": total_posts,
            "today_posts": today_posts,
            "active_channels": active_channels,
            "last_check": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ userbot: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        )

# ==================== PUBLIC BOTS API ====================

@app.get("/api/public-bots", response_model=List[PublicBotResponse])
def get_public_bots(
    skip: int = 0,
    limit: int = 100,
    search: Optional[str] = None,
    status_filter: Optional[str] = None,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –±–æ—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    query = db.query(PublicBot)
    
    if search:
        search_pattern = f"%{search}%"
        query = query.filter(
            PublicBot.name.ilike(search_pattern) |
            PublicBot.description.ilike(search_pattern)
        )
    
    if status_filter:
        query = query.filter(PublicBot.status == status_filter)
    
    bots = query.offset(skip).limit(limit).all()
    return bots

@app.post("/api/public-bots", response_model=PublicBotResponse, status_code=status.HTTP_201_CREATED)
def create_public_bot(bot: PublicBotCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
        existing_bot = db.query(PublicBot).filter(PublicBot.name == bot.name).first()
        if existing_bot:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"–ë–æ—Ç —Å –∏–º–µ–Ω–µ–º '{bot.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        template = get_bot_template_settings(db)
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        bot_data = bot.model_dump()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
        if not bot_data.get('categorization_prompt'):
            bot_data['categorization_prompt'] = template.default_categorization_prompt
        
        if not bot_data.get('summarization_prompt'):
            bot_data['summarization_prompt'] = template.default_summarization_prompt
        
        if not bot_data.get('welcome_message'):
            bot_data['welcome_message'] = template.default_welcome_message
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è integer –ø–æ–ª–µ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not bot_data.get('max_posts_per_digest') or bot_data.get('max_posts_per_digest') == 10:
            bot_data['max_posts_per_digest'] = template.default_max_posts_per_digest
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, None –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        max_summary = bot_data.get('max_summary_length')
        if not max_summary or max_summary == "" or max_summary == 150:
            bot_data['max_summary_length'] = template.default_max_summary_length
        
        if not bot_data.get('delivery_schedule') or bot_data.get('delivery_schedule') == {}:
            bot_data['delivery_schedule'] = template.default_delivery_schedule
        
        if not bot_data.get('digest_schedule') or bot_data.get('digest_schedule') == {"enabled": False}:
            bot_data['digest_schedule'] = template.default_digest_schedule
        
        if bot_data.get('default_language') == 'ru' and template.default_digest_language != 'ru':
            bot_data['default_language'] = template.default_digest_language
        
        if bot_data.get('timezone') == 'Europe/Moscow' and template.default_timezone != 'Europe/Moscow':
            bot_data['timezone'] = template.default_timezone
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
        db_bot = PublicBot(**bot_data)
        db.add(db_bot)
        db.commit()
        db.refresh(db_bot)
        
        return db_bot
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {str(e)}"
        )

@app.get("/api/public-bots/{bot_id}", response_model=PublicBotResponse)
def get_public_bot(bot_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞ –ø–æ ID"""
    db_bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not db_bot:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    return db_bot

@app.post("/api/telegram-bot/validate-token")
async def validate_telegram_bot_token(request: dict):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    bot_token = request.get("bot_token")
    if not bot_token:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–ª–µ bot_token –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
    if not bot_token or len(bot_token.split(':')) != 2:
        return {
            "valid": False,
            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: BOT_ID:TOKEN"
        }
    
    try:
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API
        telegram_api_url = f"https://api.telegram.org/bot{bot_token}/getMe"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(telegram_api_url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get("ok") and "result" in data:
                        bot_info = data["result"]
                        
                        return {
                            "valid": True,
                            "bot_info": {
                                "id": bot_info.get("id"),
                                "username": bot_info.get("username"),
                                "first_name": bot_info.get("first_name"),
                                "is_bot": bot_info.get("is_bot"),
                                "can_join_groups": bot_info.get("can_join_groups"),
                                "can_read_all_group_messages": bot_info.get("can_read_all_group_messages"),
                                "supports_inline_queries": bot_info.get("supports_inline_queries")
                            }
                        }
                    else:
                        return {
                            "valid": False,
                            "error": "Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É"
                        }
                elif response.status == 401:
                    return {
                        "valid": False,
                        "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"
                    }
                else:
                    return {
                        "valid": False,
                        "error": f"–û—à–∏–±–∫–∞ Telegram API: {response.status}"
                    }
                    
    except asyncio.TimeoutError:
        return {
            "valid": False,
            "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram API"
        }
    except Exception as e:
        return {
            "valid": False,
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}"
        }

@app.post("/api/public-bots/{bot_id}/sync-telegram-data")
async def sync_bot_telegram_data(bot_id: int, request: dict, db: Session = Depends(get_db)):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ —Å Telegram API"""
    bot_token = request.get("bot_token")
    if not bot_token:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–ª–µ bot_token –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    db_bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not db_bot:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
        telegram_api_url = f"https://api.telegram.org/bot{bot_token}/getMe"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(telegram_api_url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get("ok") and "result" in data:
                        bot_info = data["result"]
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –±–æ—Ç–∞ –∏ —Ç–æ–∫–µ–Ω
                        old_name = db_bot.name
                        new_name = bot_info.get("first_name", "")
                        
                        if new_name:
                            db_bot.name = new_name
                        db_bot.bot_token = bot_token
                        
                        db.commit()
                        db.refresh(db_bot)
                        
                        return {
                            "success": True,
                            "message": f"–î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                            "old_name": old_name,
                            "new_name": new_name,
                            "bot_info": {
                                "id": bot_info.get("id"),
                                "username": bot_info.get("username"),
                                "first_name": bot_info.get("first_name"),
                                "is_bot": bot_info.get("is_bot")
                            }
                        }
                    else:
                        raise HTTPException(
                            status_code=status.HTTP_400_BAD_REQUEST,
                            detail="Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É"
                        )
                elif response.status == 401:
                    raise HTTPException(
                        status_code=status.HTTP_401_UNAUTHORIZED,
                        detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"
                    )
                else:
                    raise HTTPException(
                        status_code=status.HTTP_400_BAD_REQUEST,
                        detail=f"–û—à–∏–±–∫–∞ Telegram API: {response.status}"
                    )
                    
    except asyncio.TimeoutError:
        raise HTTPException(
            status_code=status.HTTP_408_REQUEST_TIMEOUT,
            detail="–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram API"
        )
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞: {str(e)}"
        )

@app.put("/api/public-bots/{bot_id}", response_model=PublicBotResponse)
def update_public_bot(bot_id: int, bot_update: PublicBotUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        db_bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
        if not db_bot:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if bot_update.name and bot_update.name != db_bot.name:
            existing_bot = db.query(PublicBot).filter(
                PublicBot.name == bot_update.name,
                PublicBot.id != bot_id
            ).first()
            if existing_bot:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"–ë–æ—Ç —Å –∏–º–µ–Ω–µ–º '{bot_update.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        update_data = bot_update.dict(exclude_unset=True)
        for field, value in update_data.items():
            setattr(db_bot, field, value)
        
        db.commit()
        db.refresh(db_bot)
        
        return db_bot
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: {str(e)}"
        )

@app.delete("/api/public-bots/{bot_id}")
def delete_public_bot(bot_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        db_bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
        if not db_bot:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        bot_name = db_bot.name
        db.delete(db_bot)
        db.commit()
        
        return {
            "message": f"–ë–æ—Ç '{bot_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            "deleted_bot_id": bot_id
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞: {str(e)}"
        )

@app.post("/api/public-bots/{bot_id}/toggle-status")
def toggle_bot_status(bot_id: int, db: Session = Depends(get_db)):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (active ‚Üî paused ‚Üî development)"""
    try:
        db_bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
        if not db_bot:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤: setup ‚Üí active ‚Üí paused ‚Üí development ‚Üí active
        if db_bot.status == "setup":
            db_bot.status = "active"
        elif db_bot.status == "active":
            db_bot.status = "paused"
        elif db_bot.status == "paused":
            db_bot.status = "development"
        elif db_bot.status == "development":
            db_bot.status = "active"
        else:  # fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
            db_bot.status = "active"
        
        db.commit()
        db.refresh(db_bot)
        
        return {
            "message": f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ '{db_bot.name}' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{db_bot.status}'",
            "bot_id": bot_id,
            "new_status": db_bot.status
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {str(e)}"
        )

@app.post("/api/public-bots/{bot_id}/set-status")
def set_bot_status(bot_id: int, request: dict, db: Session = Depends(get_db)):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    try:
        new_status = request.get("status")
        if not new_status:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ü–æ–ª–µ 'status' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
            )
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
        valid_statuses = ["setup", "active", "paused", "development"]
        if new_status not in valid_statuses:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {', '.join(valid_statuses)}"
            )
        
        db_bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
        if not db_bot:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        old_status = db_bot.status
        db_bot.status = new_status
        
        db.commit()
        db.refresh(db_bot)
        
        return {
            "message": f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ '{db_bot.name}' –∏–∑–º–µ–Ω–µ–Ω —Å '{old_status}' –Ω–∞ '{new_status}'",
            "bot_id": bot_id,
            "old_status": old_status,
            "new_status": new_status
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {str(e)}"
        )

# Endpoints –¥–ª—è —Å–≤—è–∑–µ–π Public Bot ‚Üî Channels
@app.get("/api/public-bots/{bot_id}/channels", response_model=List[ChannelResponse])
def get_bot_channels(bot_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–æ—Ç–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not bot:
        raise HTTPException(status_code=404, detail="Public bot not found")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ —Å–≤—è–∑–∏ bot_channels
    bot_channels = db.query(BotChannel).filter(
        BotChannel.public_bot_id == bot_id,
        BotChannel.is_active == True
    ).all()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ —Å–≤—è–∑–µ–π
    channels = []
    for bot_channel in bot_channels:
        channel = bot_channel.channel
        if channel and channel.is_active:
            channels.append(channel)
    
    return channels

@app.post("/api/public-bots/{bot_id}/channels")
def add_channels_to_bot(
    bot_id: int, 
    request: dict,  # {"channel_ids": [1, 2, 3]}
    db: Session = Depends(get_db)
):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∫ –±–æ—Ç—É (bulk –æ–ø–µ—Ä–∞—Ü–∏—è)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not bot:
        raise HTTPException(status_code=404, detail="Public bot not found")
    
    channel_ids = request.get("channel_ids", [])
    if not channel_ids:
        raise HTTPException(status_code=400, detail="channel_ids is required")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
    channels = db.query(Channel).filter(Channel.id.in_(channel_ids)).all()
    if len(channels) != len(channel_ids):
        found_ids = [ch.id for ch in channels]
        missing_ids = [ch_id for ch_id in channel_ids if ch_id not in found_ids]
        raise HTTPException(status_code=404, detail=f"Channels not found: {missing_ids}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ —Ç–∞–±–ª–∏—Ü—É bot_channels
    added_count = 0
    for channel_id in channel_ids:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–≤—è–∑—å
        existing = db.query(BotChannel).filter(
            BotChannel.public_bot_id == bot_id,
            BotChannel.channel_id == channel_id
        ).first()
        
        if not existing:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
            bot_channel = BotChannel(
                public_bot_id=bot_id,
                channel_id=channel_id,
                weight=1.0,
                is_active=True
            )
            db.add(bot_channel)
            added_count += 1
        else:
            # –ï—Å–ª–∏ —Å–≤—è–∑—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
            if not existing.is_active:
                existing.is_active = True
                added_count += 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–æ—Ç–µ
    channels_count = db.query(BotChannel).filter(
        BotChannel.public_bot_id == bot_id,
        BotChannel.is_active == True
    ).count()
    bot.channels_count = channels_count
    
    db.commit()
    return {"message": f"Added {added_count} channels to bot {bot_id}", "channel_ids": channel_ids}

@app.delete("/api/public-bots/{bot_id}/channels/{channel_id}")
def remove_channel_from_bot(bot_id: int, channel_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not bot:
        raise HTTPException(status_code=404, detail="Public bot not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    channel = db.query(Channel).filter(Channel.id == channel_id).first()
    if not channel:
        raise HTTPException(status_code=404, detail="Channel not found")
    
    # –ò—â–µ–º —Å–≤—è–∑—å bot_channel
    bot_channel = db.query(BotChannel).filter(
        BotChannel.public_bot_id == bot_id,
        BotChannel.channel_id == channel_id
    ).first()
    
    if not bot_channel:
        raise HTTPException(status_code=404, detail="Channel is not associated with this bot")
    
    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å
    db.delete(bot_channel)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–æ—Ç–µ
    channels_count = db.query(BotChannel).filter(
        BotChannel.public_bot_id == bot_id,
        BotChannel.is_active == True
    ).count()
    bot.channels_count = channels_count
    
    db.commit()
    return {"message": f"Removed channel {channel_id} from bot {bot_id}"}

# Endpoints –¥–ª—è —Å–≤—è–∑–µ–π Public Bot ‚Üî Categories
@app.get("/api/public-bots/{bot_id}/digest-data")
def get_bot_digest_data(
    bot_id: int, 
    limit: int = 15,
    importance_min: Optional[float] = None,
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
        bot_channels = db.query(BotChannel).filter(
            BotChannel.public_bot_id == bot_id,
            BotChannel.is_active == True
        ).all()
        
        if not bot_channels:
            return {"posts": [], "total": 0, "bot_id": bot_id}
        
        channel_ids = [bc.channel_id for bc in bot_channels]
        
        # –ü–æ–ª—É—á–∞–µ–º telegram_id –∫–∞–Ω–∞–ª–æ–≤
        channels = db.query(Channel).filter(
            Channel.id.in_(channel_ids),
            Channel.is_active == True
        ).all()
        
        channel_telegram_ids = [ch.telegram_id for ch in channels]
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–æ–≤ —Å AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        query = db.query(
            PostCache,
            ProcessedData.summaries,
            ProcessedData.categories,
            ProcessedData.metrics,
            ProcessedData.processed_at
        ).outerjoin(
            ProcessedData,
            and_(
                PostCache.id == ProcessedData.post_id,
                ProcessedData.public_bot_id == bot_id
            )
        ).filter(
            PostCache.channel_telegram_id.in_(channel_telegram_ids),
            ProcessedData.processing_status.in_(['completed', 'categorized', 'summarized']),  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
            ProcessedData.is_categorized == True  # –•–æ—Ç—è –±—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        if importance_min is not None:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º importance –∏–∑ JSON metrics —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç NULL
            query = query.filter(
                text(f"COALESCE(CAST(processed_data.metrics->>'importance' AS FLOAT), 0) >= {importance_min}")
            )
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ (—É–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        query = query.order_by(
            text("COALESCE(CAST(processed_data.metrics->>'importance' AS FLOAT), 0) * 3 + COALESCE(CAST(processed_data.metrics->>'urgency' AS FLOAT), 0) * 2 + COALESCE(CAST(processed_data.metrics->>'significance' AS FLOAT), 0) * 2 DESC")
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç
        results = query.limit(limit).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        posts = []
        for post_cache, summaries, categories, metrics, processed_at in results:
            # –ü–∞—Ä—Å–∏–º JSON –ø–æ–ª—è
            try:
                summaries_data = json.loads(summaries) if summaries else {}
                categories_data = json.loads(categories) if categories else {}
                metrics_data = json.loads(metrics) if metrics else {}
            except:
                summaries_data = {}
                categories_data = {}
                metrics_data = {}
            
            post_data = {
                "id": post_cache.id,
                "channel_telegram_id": post_cache.channel_telegram_id,
                "telegram_message_id": post_cache.telegram_message_id,
                "title": post_cache.title,
                "content": post_cache.content,
                "views": post_cache.views,
                "post_date": post_cache.post_date.isoformat(),
                "collected_at": post_cache.collected_at.isoformat(),
                
                # AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                "ai_summary": summaries_data.get('summary', ''),
                "ai_category": categories_data.get('primary_category', ''),
                "importance": metrics_data.get('importance', 0),
                "urgency": metrics_data.get('urgency', 0),
                "significance": metrics_data.get('significance', 0),
                "ai_processed_at": processed_at.isoformat() if processed_at else None,
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                "category": categories_data.get('primary_category', ''),
                "summary": summaries_data.get('summary', ''),
                "media_urls": json.loads(post_cache.media_urls) if post_cache.media_urls else []
            }
            
            posts.append(post_data)
        
        return {
            "posts": posts,
            "total": len(posts),
            "bot_id": bot_id,
            "importance_min": importance_min,
            "limit": limit
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è digest data: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@app.get("/api/public-bots/{bot_id}/categories")
def get_bot_categories(bot_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–æ—Ç–æ–º, —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not bot:
        raise HTTPException(status_code=404, detail="Public bot not found")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ —Å–≤—è–∑–∏ bot_categories —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    bot_categories = db.query(BotCategory).filter(
        BotCategory.public_bot_id == bot_id,
        BotCategory.is_active == True
    ).order_by(BotCategory.weight.desc()).all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    categories_with_priority = []
    for bot_category in bot_categories:
        category = bot_category.category
        if category and category.is_active:
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            category_dict = {
                "id": category.id,
                "name": category.name,  # –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –ø–æ Data_Structure.md
                "category_name": category.name,  # alias –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "description": category.description,
                "emoji": getattr(category, "emoji", None),
                "is_active": category.is_active,
                "created_at": category.created_at,
                "updated_at": category.updated_at,
                "weight": bot_category.weight,  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ —Å–≤—è–∑–∏
                "priority": bot_category.weight  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            }
            categories_with_priority.append(category_dict)
    
    return categories_with_priority

@app.post("/api/public-bots/{bot_id}/categories")
def add_categories_to_bot(
    bot_id: int, 
    request: dict,  # {"category_ids": [1, 2, 3], "priorities": [1, 2, 3]}
    db: Session = Depends(get_db)
):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –±–æ—Ç—É (bulk –æ–ø–µ—Ä–∞—Ü–∏—è)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not bot:
        raise HTTPException(status_code=404, detail="Public bot not found")
    
    category_ids = request.get("category_ids", [])
    priorities = request.get("priorities", [])
    
    if not category_ids:
        raise HTTPException(status_code=400, detail="category_ids is required")
    
    # –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if not priorities:
        priorities = list(range(1, len(category_ids) + 1))
    
    if len(priorities) != len(category_ids):
        raise HTTPException(status_code=400, detail="priorities length must match category_ids length")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = db.query(Category).filter(Category.id.in_(category_ids)).all()
    if len(categories) != len(category_ids):
        found_ids = [cat.id for cat in categories]
        missing_ids = [cat_id for cat_id in category_ids if cat_id not in found_ids]
        raise HTTPException(status_code=404, detail=f"Categories not found: {missing_ids}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ —Ç–∞–±–ª–∏—Ü—É bot_categories —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    added_count = 0
    for i, category_id in enumerate(category_ids):
        priority = priorities[i]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–≤—è–∑—å
        existing = db.query(BotCategory).filter(
            BotCategory.public_bot_id == bot_id,
            BotCategory.category_id == category_id
        ).first()
        
        if not existing:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
            bot_category = BotCategory(
                public_bot_id=bot_id,
                category_id=category_id,
                weight=float(priority),
                is_active=True
            )
            db.add(bot_category)
            added_count += 1
        else:
            # –ï—Å–ª–∏ —Å–≤—è–∑—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
            existing.weight = float(priority)
            if not existing.is_active:
                existing.is_active = True
                added_count += 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–æ—Ç–µ
    categories_count = db.query(BotCategory).filter(
        BotCategory.public_bot_id == bot_id,
        BotCategory.is_active == True
    ).count()
    bot.topics_count = categories_count
    
    db.commit()
    return {
        "message": f"Added {added_count} categories to bot {bot_id}", 
        "category_ids": category_ids,
        "priorities": priorities
    }

@app.delete("/api/public-bots/{bot_id}/categories/{category_id}")
def remove_category_from_bot(bot_id: int, category_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not bot:
        raise HTTPException(status_code=404, detail="Public bot not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = db.query(Category).filter(Category.id == category_id).first()
    if not category:
        raise HTTPException(status_code=404, detail="Category not found")
    
    # –ò—â–µ–º —Å–≤—è–∑—å bot_category
    bot_category = db.query(BotCategory).filter(
        BotCategory.public_bot_id == bot_id,
        BotCategory.category_id == category_id
    ).first()
    
    if not bot_category:
        raise HTTPException(status_code=404, detail="Category is not associated with this bot")
    
    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å
    db.delete(bot_category)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–æ—Ç–µ
    categories_count = db.query(BotCategory).filter(
        BotCategory.public_bot_id == bot_id,
        BotCategory.is_active == True
    ).count()
    bot.topics_count = categories_count
    
    db.commit()
    return {"message": f"Removed category {category_id} from bot {bot_id}"}

@app.put("/api/public-bots/{bot_id}/categories/{category_id}/priority")
def update_category_priority(
    bot_id: int, 
    category_id: int, 
    request: dict,  # {"priority": 5}
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not bot:
        raise HTTPException(status_code=404, detail="Public bot not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = db.query(Category).filter(Category.id == category_id).first()
    if not category:
        raise HTTPException(status_code=404, detail="Category not found")
    
    priority = request.get("priority")
    if priority is None or not isinstance(priority, (int, float)) or priority < 0.1 or priority > 10:
        raise HTTPException(status_code=400, detail="priority must be a number between 0.1 and 10")
    
    # –ò—â–µ–º —Å–≤—è–∑—å bot_category
    bot_category = db.query(BotCategory).filter(
        BotCategory.public_bot_id == bot_id,
        BotCategory.category_id == category_id
    ).first()
    
    if not bot_category:
        raise HTTPException(status_code=404, detail="Category is not associated with this bot")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    bot_category.weight = float(priority)
    
    db.commit()
    return {"message": f"Updated priority for category {category_id} in bot {bot_id} to {priority}"}

# Bot Templates API Endpoints
@app.get("/api/bot-templates", response_model=BotTemplateSettings)
def get_bot_template_settings(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤"""
    config = ConfigManager(db)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º DEFAULT_
    template_settings = {}
    
    # AI Settings
    template_settings['default_ai_model'] = config.get('DEFAULT_AI_MODEL', 'gpt-4o-mini')
    template_settings['default_max_tokens'] = int(config.get('DEFAULT_MAX_TOKENS', '4000'))
    template_settings['default_temperature'] = float(config.get('DEFAULT_TEMPERATURE', '0.7'))
    template_settings['default_categorization_prompt'] = config.get('DEFAULT_CATEGORIZATION_PROMPT', 
        BotTemplateSettings().default_categorization_prompt)
    template_settings['default_summarization_prompt'] = config.get('DEFAULT_SUMMARIZATION_PROMPT',
        BotTemplateSettings().default_summarization_prompt)
    
    # Digest Settings  
    template_settings['default_max_posts_per_digest'] = int(config.get('DEFAULT_MAX_POSTS_PER_DIGEST', '10'))
    template_settings['default_max_summary_length'] = int(config.get('DEFAULT_MAX_SUMMARY_LENGTH', '150'))
    template_settings['default_digest_language'] = config.get('DEFAULT_DIGEST_LANGUAGE', 'ru')
    template_settings['default_welcome_message'] = config.get('DEFAULT_WELCOME_MESSAGE',
        BotTemplateSettings().default_welcome_message)
    
    # Delivery Settings
    schedule_json = config.get('DEFAULT_DELIVERY_SCHEDULE', '{}')
    try:
        template_settings['default_delivery_schedule'] = json.loads(schedule_json) if schedule_json != '{}' else BotTemplateSettings().default_delivery_schedule
    except:
        template_settings['default_delivery_schedule'] = BotTemplateSettings().default_delivery_schedule
    
    template_settings['default_timezone'] = config.get('DEFAULT_TIMEZONE', 'Europe/Moscow')
    
    # Digest Schedule Settings
    digest_schedule_json = config.get('DEFAULT_DIGEST_SCHEDULE', '{"enabled": false}')
    try:
        template_settings['default_digest_schedule'] = json.loads(digest_schedule_json) if digest_schedule_json != '{"enabled": false}' else BotTemplateSettings().default_digest_schedule
    except:
        template_settings['default_digest_schedule'] = BotTemplateSettings().default_digest_schedule
    
    return BotTemplateSettings(**template_settings)

@app.put("/api/bot-templates", response_model=BotTemplateSettings)
def update_bot_template_settings(
    template_update: BotTemplateUpdate, 
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤ (bulk update)"""
    config = ConfigManager(db)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    update_data = template_update.model_dump(exclude_unset=True)
    
    for key, value in update_data.items():
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î
        setting_key = key.upper()
        
        if key == 'default_delivery_schedule':
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è JSON
            config.set_db_setting(setting_key, json.dumps(value), 'json')
        elif isinstance(value, bool):
            config.set_db_setting(setting_key, str(value).lower(), 'boolean')
        elif isinstance(value, int):
            config.set_db_setting(setting_key, str(value), 'integer')
        elif isinstance(value, float):
            config.set_db_setting(setting_key, str(value), 'float')
        else:
            config.set_db_setting(setting_key, str(value), 'string')
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    return get_bot_template_settings(db)

@app.get("/api/bot-templates/effective")
def get_effective_bot_settings(bot_id: Optional[int] = None, db: Session = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å 3-—É—Ä–æ–≤–Ω–µ–≤—ã–º fallback:
    1. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–µ—Å–ª–∏ bot_id —É–∫–∞–∑–∞–Ω)
    2. –®–∞–±–ª–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (DEFAULT_*)
    3. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    """
    config = ConfigManager(db)
    effective_settings = {}
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –±–∞–∑—É
    template_settings = get_bot_template_settings(db)
    effective_settings.update(template_settings.model_dump())
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω bot_id, –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if bot_id:
        bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
        if bot:
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞
            if bot.categorization_prompt:
                effective_settings['categorization_prompt'] = bot.categorization_prompt
            if bot.summarization_prompt:
                effective_settings['summarization_prompt'] = bot.summarization_prompt
            if bot.max_posts_per_digest:
                effective_settings['max_posts_per_digest'] = bot.max_posts_per_digest
            if bot.max_summary_length:
                effective_settings['max_summary_length'] = bot.max_summary_length
            if bot.welcome_message:
                effective_settings['welcome_message'] = bot.welcome_message
            if bot.default_language:
                effective_settings['default_language'] = bot.default_language
            if bot.delivery_schedule:
                effective_settings['delivery_schedule'] = bot.delivery_schedule
            if bot.timezone:
                effective_settings['timezone'] = bot.timezone
    
    return {
        "bot_id": bot_id,
        "settings": effective_settings,
        "fallback_levels": {
            "individual": bot_id is not None,
            "template": True,
            "global": True
        }
    }

@app.post("/api/bot-templates/apply/{bot_id}")
def apply_template_to_bot(bot_id: int, db: Session = Depends(get_db)):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —à–∞–±–ª–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –±–æ—Ç—É"""
    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
    bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
    if not bot:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    template = get_bot_template_settings(db)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω –∫ –±–æ—Ç—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ)
    updated_fields = []
    
    if not bot.categorization_prompt:
        bot.categorization_prompt = template.default_categorization_prompt
        updated_fields.append("categorization_prompt")
    
    if not bot.summarization_prompt:
        bot.summarization_prompt = template.default_summarization_prompt
        updated_fields.append("summarization_prompt")
    
    if bot.max_posts_per_digest == 10:  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        bot.max_posts_per_digest = template.default_max_posts_per_digest
        updated_fields.append("max_posts_per_digest")
    
    if bot.max_summary_length == 150:  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        bot.max_summary_length = template.default_max_summary_length
        updated_fields.append("max_summary_length")
    
    if not bot.welcome_message:
        bot.welcome_message = template.default_welcome_message
        updated_fields.append("welcome_message")
    
    if bot.default_language == "ru" and template.default_digest_language != "ru":
        bot.default_language = template.default_digest_language
        updated_fields.append("default_language")
    
    if not bot.delivery_schedule or bot.delivery_schedule == {}:
        bot.delivery_schedule = template.default_delivery_schedule
        updated_fields.append("delivery_schedule")
    
    if bot.timezone == "Europe/Moscow" and template.default_timezone != "Europe/Moscow":
        bot.timezone = template.default_timezone
        updated_fields.append("timezone")
    
    db.commit()
    db.refresh(bot)
    
    return {
        "message": f"–®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –±–æ—Ç—É '{bot.name}'",
        "bot_id": bot_id,
        "updated_fields": updated_fields,
        "updated_count": len(updated_fields)
    }

# === AI PROCESSED DATA MODEL ===
class ProcessedData(Base):
    __tablename__ = "processed_data"
    id = Column(Integer, primary_key=True, index=True)
    post_id = Column(BigInteger, nullable=False)  # –ò–∑–º–µ–Ω–µ–Ω–æ: BigInteger –±–µ–∑ FK
    public_bot_id = Column(Integer, nullable=False)  # –£–±—Ä–∞–Ω FK –∏–∑-–∑–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    summaries = Column(JSONB if USE_POSTGRESQL else Text, nullable=False)
    categories = Column(JSONB if USE_POSTGRESQL else Text, nullable=False)
    metrics = Column(JSONB if USE_POSTGRESQL else Text, nullable=False)
    processed_at = Column(DateTime, default=func.now())
    processing_version = Column(String, default="v3.1")
    processing_status = Column(String, default="pending", nullable=False)  # –ò—Ç–æ–≥–æ–≤—ã–π –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    is_categorized = Column(Boolean, default=False, nullable=False)
    is_summarized = Column(Boolean, default=False, nullable=False)
    __table_args__ = (UniqueConstraint('post_id', 'public_bot_id', name='uq_processed_post_bot'),)

# –ù–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê –î–õ–Ø –†–ê–°–®–ò–†–Ø–ï–ú–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–ï–†–í–ò–°–û–í
class ProcessedServiceResult(Base):
    __tablename__ = "processed_service_results"

    id = Column(Integer, primary_key=True, index=True)
    post_id = Column(BigInteger, nullable=False)
    public_bot_id = Column(Integer, nullable=False)
    service_name = Column(String(64), nullable=False)
    status = Column(String(32), default="success")
    payload = Column(JSONB if USE_POSTGRESQL else Text, nullable=False, default={})
    metrics = Column(JSONB if USE_POSTGRESQL else Text, nullable=False, default={})
    processed_at = Column(DateTime, default=func.now())

    __table_args__ = (
        UniqueConstraint('post_id', 'public_bot_id', 'service_name', name='uq_psr_post_bot_service'),
        Index('idx_psr_post_bot_service', 'post_id', 'public_bot_id', 'service_name'),
    )

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
try:
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")


# === Pydantic —Å—Ö–µ–º—ã ===
class AIResultCreate(BaseModel):
    post_id: int
    public_bot_id: int
    summaries: Dict[str, Any]
    categories: Dict[str, Any]
    metrics: Dict[str, Any]
    processing_version: str = "v3.1"

class AIResultResponse(AIResultCreate):
    id: int
    processed_at: datetime
    class Config:
        from_attributes = True

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
class ProcessedServiceResultCreate(BaseModel):
    post_id: int
    public_bot_id: int
    service_name: str
    status: str = "success"
    payload: Dict[str, Any]
    metrics: Dict[str, Any] = {}

class ServiceResultsBatch(BaseModel):
    service: str
    results: List[ProcessedServiceResultCreate]

# === –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ ===
class SyncStatusRequest(BaseModel):
    post_ids: List[int]
    bot_id: int
    service: str  # 'categorizer' | 'summarizer'

# === API ENDPOINTS –î–õ–Ø AI SERVICE ===
@app.post("/api/ai/results", response_model=AIResultResponse, status_code=status.HTTP_201_CREATED)
def create_ai_result(result: AIResultCreate, db: Session = Depends(get_db)):
    existing = db.query(ProcessedData).filter_by(post_id=result.post_id, public_bot_id=result.public_bot_id).first()
    if existing:
        raise HTTPException(status_code=409, detail="Result already exists")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–ª–∞–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ categories —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    has_valid_categories = False
    if result.categories:
        for key, value in result.categories.items():
            if value and str(value).strip():
                has_valid_categories = True
                break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ summaries —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    has_valid_summaries = False
    if result.summaries:
        for key, value in result.summaries.items():
            if value and str(value).strip():
                has_valid_summaries = True
                break
    
    is_categorized = has_valid_categories
    is_summarized = has_valid_summaries
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–ª–∞–≥–æ–≤
    if not is_categorized and not is_summarized:
        processing_status = "pending"
    elif is_categorized and is_summarized:
        processing_status = "completed"
    else:
        processing_status = "processing"
    
    record = ProcessedData(
        post_id=result.post_id,
        public_bot_id=result.public_bot_id,
        summaries=result.summaries if USE_POSTGRESQL else json.dumps(result.summaries, ensure_ascii=False),
        categories=result.categories if USE_POSTGRESQL else json.dumps(result.categories, ensure_ascii=False),
        metrics=result.metrics if USE_POSTGRESQL else json.dumps(result.metrics, ensure_ascii=False),
        processing_version=result.processing_version,
        is_categorized=is_categorized,
        is_summarized=is_summarized,
        processing_status=processing_status
    )
    db.add(record)
    # –ë–æ–ª—å—à–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ posts_cache (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å)
    db.commit()
    db.refresh(record)
    return record

@app.post("/api/ai/results/batch", response_model=List[AIResultResponse], status_code=status.HTTP_201_CREATED)
def create_ai_results_batch(results: List[AIResultCreate], db: Session = Depends(get_db)):
    created_records = []
    updated_records = []
    
    for res in results:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        existing_record = db.query(ProcessedData).filter_by(post_id=res.post_id, public_bot_id=res.public_bot_id).first()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–ª–∞–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ categories —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        has_valid_categories = False
        if res.categories:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –Ω–µ–ø—É—Å—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for key, value in res.categories.items():
                if value and str(value).strip():
                    has_valid_categories = True
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ summaries —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        has_valid_summaries = False
        if res.summaries:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –Ω–µ–ø—É—Å—Ç–æ–≥–æ summary
            for key, value in res.summaries.items():
                if value and str(value).strip():
                    has_valid_summaries = True
                    break
        
        is_categorized = has_valid_categories
        is_summarized = has_valid_summaries
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–ª–∞–≥–æ–≤
        if not is_categorized and not is_summarized:
            processing_status = "pending"
        elif is_categorized and is_summarized:
            processing_status = "completed"
        else:
            processing_status = "processing"
        
        if existing_record:
            # –û–ë–ù–û–í–õ–Ø–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            existing_record.summaries = res.summaries if USE_POSTGRESQL else json.dumps(res.summaries, ensure_ascii=False)
            existing_record.categories = res.categories if USE_POSTGRESQL else json.dumps(res.categories, ensure_ascii=False)
            existing_record.metrics = res.metrics if USE_POSTGRESQL else json.dumps(res.metrics, ensure_ascii=False)
            existing_record.processing_version = res.processing_version
            existing_record.is_categorized = is_categorized
            existing_record.is_summarized = is_summarized
            existing_record.processing_status = processing_status
            existing_record.processed_at = func.now()
            updated_records.append(existing_record)
        else:
            # –°–û–ó–î–ê–ï–ú –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            r = ProcessedData(
                post_id=res.post_id,
                public_bot_id=res.public_bot_id,
                summaries=res.summaries if USE_POSTGRESQL else json.dumps(res.summaries, ensure_ascii=False),
                categories=res.categories if USE_POSTGRESQL else json.dumps(res.categories, ensure_ascii=False),
                metrics=res.metrics if USE_POSTGRESQL else json.dumps(res.metrics, ensure_ascii=False),
                processing_version=res.processing_version,
                is_categorized=is_categorized,
                is_summarized=is_summarized,
                processing_status=processing_status
            )
            db.add(r)
            created_records.append(r)
        
        # –ë–æ–ª—å—à–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ posts_cache (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å)
    
    db.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ commit
    for r in created_records + updated_records:
        db.refresh(r)
    
    logger.info(f"‚úÖ Batch AI results: —Å–æ–∑–¥–∞–Ω–æ {len(created_records)}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(updated_records)}")
    return created_records + updated_records

@app.get("/api/ai/results", response_model=List[AIResultResponse])
def get_ai_results(
    skip: int = 0,
    limit: int = Query(100, ge=1, le=500),
    bot_id: Optional[int] = None,
    post_id: Optional[int] = None,
    processing_version: Optional[str] = None,
    sort_by: str = "processed_at",
    sort_order: str = "desc",
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    query = db.query(ProcessedData)
    
    # –§–∏–ª—å—Ç—Ä—ã
    if bot_id:
        query = query.filter(ProcessedData.public_bot_id == bot_id)
    if post_id:
        query = query.filter(ProcessedData.post_id == post_id)
    if processing_version:
        query = query.filter(ProcessedData.processing_version == processing_version)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort_by == "processed_at":
        if sort_order == "desc":
            query = query.order_by(ProcessedData.processed_at.desc())
        else:
            query = query.order_by(ProcessedData.processed_at.asc())
    elif sort_by == "post_id":
        if sort_order == "desc":
            query = query.order_by(ProcessedData.post_id.desc())
        else:
            query = query.order_by(ProcessedData.post_id.asc())
    
    return query.offset(skip).limit(limit).all()

@app.get("/api/posts/unprocessed", response_model=List[PostCacheResponseWithBot])
def get_unprocessed_posts(
    bot_id: int = Query(..., description="Bot ID for filtering processed posts - REQUIRED"),
    limit: int = Query(500, ge=1, le=1000), # –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    channel_telegram_ids: Optional[str] = Query(None, description="Comma-separated list of channel telegram IDs"),
    require_categorization: Optional[bool] = Query(None, description="Only posts that need categorization"),
    require_summarization: Optional[bool] = Query(None, description="Only posts that need summarization"),
    db: Session = Depends(get_db)
):
    """‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô ENDPOINT –¥–ª—è v4 –∏ v5: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    
    # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º –±–æ—Ç–∞
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
    bot_channels = db.query(BotChannel).filter(
        BotChannel.public_bot_id == bot_id,
        BotChannel.is_active == True
    ).all()
    
    if not bot_channels:
        return []  # –£ –±–æ—Ç–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ - –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    channel_ids = [bc.channel_id for bc in bot_channels]
    
    # –ü–æ–ª—É—á–∞–µ–º telegram_id –∫–∞–Ω–∞–ª–æ–≤
    channels = db.query(Channel).filter(
        Channel.id.in_(channel_ids),
        Channel.is_active == True
    ).all()
    
    bot_channel_telegram_ids = [ch.telegram_id for ch in channels]
    
    if not bot_channel_telegram_ids:
        return []  # –£ –±–æ—Ç–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞–Ω–∞–ª–∞–º –±–æ—Ç–∞
    query = db.query(PostCache).filter(
        PostCache.channel_telegram_id.in_(bot_channel_telegram_ids)
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–Ω–∞–ª–∞–º (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω Query –ø–∞—Ä–∞–º–µ—Ç—Ä channel_telegram_ids)
    if channel_telegram_ids:
        try:
            channel_ids_list = [int(cid.strip()) for cid in channel_telegram_ids.split(',') if cid.strip()]
            if channel_ids_list:
                query = query.filter(PostCache.channel_telegram_id.in_(channel_ids_list))
        except ValueError:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ channel_telegram_ids"
            )
    
    # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–º–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
    # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –∑–¥–µ—Å—å - –æ–Ω–∞ –±—É–¥–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∏–∂–µ
    
    # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ processed_service_results
    if require_categorization or require_summarization:
        if require_categorization:
            # üéØ –£–ú–ù–ê–Ø –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–Ø: –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –∏–ª–∏ –≥–æ—Ç–æ–≤—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
            # –ò–°–ö–õ–Æ–ß–ê–ï–ú: 1) processing —Å—Ç–∞—Ç—É—Å, 2) success –ë–ï–ó payload.error (—Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
            # –ù–ï –ò–°–ö–õ–Æ–ß–ê–ï–ú: success –° payload.error (fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
            
            # –ü–æ–¥–∑–∞–ø—Ä–æ—Å: –ø–æ—Å—Ç—ã –≤ processing (—Ç–æ—á–Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º)
            processing_posts = db.query(ProcessedServiceResult.post_id).filter(
                ProcessedServiceResult.public_bot_id == bot_id,
                ProcessedServiceResult.service_name == 'categorization',
                ProcessedServiceResult.status == 'processing'
            ).subquery()
            
            # –ü–æ–¥–∑–∞–ø—Ä–æ—Å: –ø–æ—Å—Ç—ã —Å completed —Å—Ç–∞—Ç—É—Å–æ–º –ë–ï–ó payload.error (—Ä–µ–∞–ª—å–Ω—ã–µ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
            if USE_POSTGRESQL:
                real_success_posts = db.query(ProcessedServiceResult.post_id).filter(
                    ProcessedServiceResult.public_bot_id == bot_id,
                    ProcessedServiceResult.service_name == 'categorization',
                    ProcessedServiceResult.status == 'completed',
                    ~ProcessedServiceResult.payload.has_key('error')  # PostgreSQL: –Ω–µ—Ç –∫–ª—é—á–∞ 'error'
                ).subquery()
            else:
                # SQLite fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ payload –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "error"
                real_success_posts = db.query(ProcessedServiceResult.post_id).filter(
                    ProcessedServiceResult.public_bot_id == bot_id,
                    ProcessedServiceResult.service_name == 'categorization',
                    ProcessedServiceResult.status == 'completed',
                    ~ProcessedServiceResult.payload.like('%"error"%')
                ).subquery()
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±–µ –≥—Ä—É–ø–ø—ã –ø–æ—Å—Ç–æ–≤
            query = query.filter(
                ~PostCache.id.in_(processing_posts),
                ~PostCache.id.in_(real_success_posts)
            )
            
            logger.info(f"üõ°Ô∏è –£–º–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: –∏—Å–∫–ª—é—á–µ–Ω—ã processing + success –±–µ–∑ payload.error –¥–ª—è –±–æ—Ç–∞ {bot_id}")
        
        elif require_summarization:
            # üéØ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: –ù–ï –±—Ä–∞—Ç—å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ/–≥–æ—Ç–æ–≤—ã–µ —Å–∞–º–º–∞—Ä–∏
            # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —É—Å–ø–µ—à–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω—è—Ç–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏

            # –ü–æ–¥–∑–∞–ø—Ä–æ—Å: –ø–æ—Å—Ç—ã –≤ processing –ø–æ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            processing_summarization = db.query(ProcessedServiceResult.post_id).filter(
                ProcessedServiceResult.public_bot_id == bot_id,
                ProcessedServiceResult.service_name == 'summarization', 
                ProcessedServiceResult.status == 'processing'
            ).subquery()

            # –ü–æ–¥–∑–∞–ø—Ä–æ—Å: –ø–æ—Å—Ç—ã —Å –†–ï–ê–õ–¨–ù–û–ô —É—Å–ø–µ—à–Ω–æ–π —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π (–±–µ–∑ payload.error)
            if USE_POSTGRESQL:
                real_success_summarization = db.query(ProcessedServiceResult.post_id).filter(
                    ProcessedServiceResult.public_bot_id == bot_id,
                    ProcessedServiceResult.service_name == 'summarization',
                    ProcessedServiceResult.status == 'completed',
                    ~ProcessedServiceResult.payload.has_key('error')
                ).subquery()
            else:
                real_success_summarization = db.query(ProcessedServiceResult.post_id).filter(
                    ProcessedServiceResult.public_bot_id == bot_id,
                    ProcessedServiceResult.service_name == 'summarization',
                    ProcessedServiceResult.status == 'completed',
                    ~ProcessedServiceResult.payload.like('%"error"%')
                ).subquery()

            # –ò—Å–∫–ª—é—á–∞–µ–º processing/completed —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            query = query.filter(
                ~PostCache.id.in_(processing_summarization),
                ~PostCache.id.in_(real_success_summarization)
            )

            logger.info(f"üõ°Ô∏è –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: –∏—Å–∫–ª—é—á–µ–Ω—ã processing –∏ completed –¥–ª—è –±–æ—Ç–∞ {bot_id}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    results = query.order_by(PostCache.post_date.desc()).limit(limit).all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º bot_id –∫ –∫–∞–∂–¥–æ–º—É –ø–æ—Å—Ç—É
    response_data = []
    for post in results:
        post_dict = post.__dict__
        post_dict['bot_id'] = bot_id
        response_data.append(PostCacheResponseWithBot.model_validate(post_dict))

    return response_data

# === MULTITENANT STATUS ENDPOINTS ===
@app.get("/api/ai/results/batch-status")
def get_ai_results_batch_status(
    post_ids: str = Query(..., description="Comma-separated list of post IDs"),
    bot_id: int = Query(..., description="Bot ID"),
    db: Session = Depends(get_db)
):
    """üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å—Ç–æ–≤ –≤ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"""
    try:
        # –ü–∞—Ä—Å–∏–º post_ids
        post_ids_list = [int(pid.strip()) for pid in post_ids.split(',') if pid.strip()]
        
        if not post_ids_list:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="post_ids –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )
        
        if len(post_ids_list) > 100:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ post_ids: 100"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
        bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
        if not bot:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"–ë–æ—Ç —Å ID {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        results = db.query(ProcessedData).filter(
            ProcessedData.post_id.in_(post_ids_list),
            ProcessedData.public_bot_id == bot_id
        ).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        status_map = {}
        for result in results:
            status_map[result.post_id] = {
                "post_id": result.post_id,
                "bot_id": result.public_bot_id,
                "status": result.processing_status,
                "processed_at": result.processed_at.isoformat() if result.processed_at else None,
                "is_categorized": result.is_categorized,
                "is_summarized": result.is_summarized
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ—Å—Ç—ã –∫–∞–∫ "not_found"
        for post_id in post_ids_list:
            if post_id not in status_map:
                status_map[post_id] = {
                    "post_id": post_id,
                    "bot_id": bot_id,
                    "status": "not_found",
                    "processed_at": None
                }
        
        return {
            "bot_id": bot_id,
            "requested_posts": len(post_ids_list),
            "found_posts": len(results),
            "statuses": list(status_map.values())
        }
        
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ post_ids: {str(e)}"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è batch —Å—Ç–∞—Ç—É—Å–æ–≤: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è batch —Å—Ç–∞—Ç—É—Å–æ–≤: {str(e)}"
        )

@app.put("/api/ai/results/batch-status")
def update_ai_results_status_batch(
    request: dict,  # {"post_ids": [1, 2, 3], "bot_id": 4, "status": "categorized"}
    db: Session = Depends(get_db)
):
    """üîß –ù–û–í–û–ï: –ë–∞—Ç—á–µ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    post_ids = request.get("post_ids", [])
    bot_id = request.get("bot_id")
    new_status = request.get("status")
    
    if not post_ids:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–ª–µ 'post_ids' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        )
    
    if not bot_id:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–ª–µ 'bot_id' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        )
    
    if not new_status:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–ª–µ 'status' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    valid_statuses = ["pending", "processing", "categorized", "summarized", "completed", "failed"]
    if new_status not in valid_statuses:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {valid_statuses}"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
    if len(post_ids) > 100:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –±–∞—Ç—á–µ: 100"
        )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
        bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
        if not bot:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"–ë–æ—Ç —Å ID {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ processed_data –¥–ª—è —ç—Ç–∏—Ö –ø–æ—Å—Ç–æ–≤ –∏ –±–æ—Ç–∞
        existing_records = db.query(ProcessedData).filter(
            ProcessedData.post_id.in_(post_ids),
            ProcessedData.public_bot_id == bot_id
        ).all()
        
        existing_post_ids = {record.post_id for record in existing_records}
        missing_post_ids = set(post_ids) - existing_post_ids
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
        created_count = 0
        if missing_post_ids:
            for post_id in missing_post_ids:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                post_exists = db.query(PostCache).filter(PostCache.id == post_id).first()
                if post_exists:
                    new_record = ProcessedData(
                        post_id=post_id,
                        public_bot_id=bot_id,
                        summaries={},
                        categories={},
                        metrics={},
                        processing_status=new_status
                    )
                    db.add(new_record)
                    created_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        updated_count = 0
        if existing_records:
            updated_count = db.query(ProcessedData).filter(
                ProcessedData.post_id.in_([record.post_id for record in existing_records]),
                ProcessedData.public_bot_id == bot_id
            ).update({
                "processing_status": new_status
            }, synchronize_session=False)
        
        db.commit()
        
        total_affected = created_count + updated_count
        logger.info(f"‚úÖ –ë–∞—Ç—á–µ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {total_affected} AI —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ '{new_status}' –¥–ª—è –±–æ—Ç–∞ {bot_id}")
        
        return {
            "message": f"–ë–∞—Ç—á–µ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {total_affected} AI —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ '{new_status}' –¥–ª—è –±–æ—Ç–∞ {bot_id}",
            "affected_count": total_affected,
            "created_count": created_count,
            "updated_count": updated_count,
            "requested_count": len(post_ids),
            "bot_id": bot_id,
            "status": new_status,
            "missing_posts": list(set(post_ids) - existing_post_ids - {r.post_id for r in existing_records}) if missing_post_ids else []
        }
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AI —Å—Ç–∞—Ç—É—Å–æ–≤: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AI —Å—Ç–∞—Ç—É—Å–æ–≤: {str(e)}"
        )

@app.get("/api/ai/results/{result_id}", response_model=AIResultResponse)
def get_ai_result_by_id(result_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ ID"""
    result = db.query(ProcessedData).filter(ProcessedData.id == result_id).first()
    if not result:
        raise HTTPException(status_code=404, detail="AI result not found")
    return result

# --------------------------------------------------------------------------
# –ù–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ (–î–ï–ù–¨ 30)
# --------------------------------------------------------------------------

# –†–ï–ï–°–¢–† –°–ï–†–í–ò–°–û–í
# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
AI_SERVICES = [
    {"name": "categorization", "queue": "categorization", "required": True},
    {"name": "summarization",  "queue": "summarization",  "required": True},
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # {"name": "ner_extraction", "queue": "processing", "required": False}
]

def _update_processed_data_flags(db: Session, post_id: int, bot_id: int):
    """üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –∏ —Å—Ç–∞—Ç—É—Å—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–∞–ª—å–Ω—ã—Ö AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    
    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –¥–ª—è post_id={post_id}, bot_id={bot_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    agg_row = db.query(ProcessedData).filter(
        ProcessedData.post_id == post_id,
        ProcessedData.public_bot_id == bot_id
    ).with_for_update().first()

    if not agg_row:
        logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å ProcessedData –¥–ª—è post_id={post_id}, bot_id={bot_id}")
        agg_row = ProcessedData(post_id=post_id, public_bot_id=bot_id, summaries={}, categories={}, metrics={})
        db.add(agg_row)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞/–±–æ—Ç–∞
    service_results = db.query(ProcessedServiceResult.service_name, ProcessedServiceResult.payload, ProcessedServiceResult.metrics).filter(
        ProcessedServiceResult.post_id == post_id,
        ProcessedServiceResult.public_bot_id == bot_id,
        ProcessedServiceResult.status == 'completed'  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—â–µ–º —Å—Ç–∞—Ç—É—Å 'completed' –∞ –Ω–µ 'success'
    ).all()
    
    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(service_results)} —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è post_id={post_id}, bot_id={bot_id}")
    
    # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–∞–ª—å–Ω—ã–µ, –∞ –Ω–µ fallback
    successful_services = {}
    for res in service_results:
        # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è payload (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π JSON –∏–ª–∏ —É–∂–µ —Å–ª–æ–≤–∞—Ä–µ–º)
        if isinstance(res.payload, str):
            try:
                payload = json.loads(res.payload)
            except (json.JSONDecodeError, ValueError):
                payload = {}
        elif isinstance(res.payload, dict):
            payload = res.payload
        else:
            payload = {}
        
        logger.info(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º {res.service_name}: payload={payload}, type={type(res.payload)}")
        
        if not payload.get('error'):  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è 'error' - —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            successful_services[res.service_name] = {'payload': payload, 'metrics': res.metrics}
            logger.info(f"‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {res.service_name}")
        else:
            logger.warning(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {res.service_name}: {payload.get('error')}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –†–ï–ê–õ–¨–ù–´–• —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    agg_row.is_categorized = "categorization" in successful_services
    agg_row.is_summarized = "summarization" in successful_services
    
    logger.info(f"üèÅ –§–ª–∞–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: is_categorized={agg_row.is_categorized}, is_summarized={agg_row.is_summarized}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if agg_row.is_categorized:
        cat_payload = successful_services["categorization"]['payload']
        cat_metrics = successful_services["categorization"]['metrics']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        agg_row.categories = {
            'category_name': cat_payload.get('primary', ''),
            'secondary': cat_payload.get('secondary', []),
            'relevance_scores': cat_payload.get('relevance_scores', [])
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if not agg_row.metrics:
            agg_row.metrics = {}
        agg_row.metrics.update(cat_metrics)
        
        logger.info(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {agg_row.categories}")

    if agg_row.is_summarized:
        sum_payload = successful_services["summarization"]['payload']
        sum_metrics = successful_services["summarization"]['metrics']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        agg_row.summaries = {
            'summary': sum_payload.get('summary', ''),
            'language': sum_payload.get('language', 'ru')
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if not agg_row.metrics:
            agg_row.metrics = {}
        agg_row.metrics.update(sum_metrics)
        
        logger.info(f"üìÑ Summary –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {agg_row.summaries}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    required_services = {s['name'] for s in AI_SERVICES if s.get('required', False)}
    if required_services.issubset(successful_services.keys()):
        agg_row.processing_status = "completed"
    else:
        agg_row.processing_status = "processing"
    
    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°—Ç–∞—Ç—É—Å: {agg_row.processing_status}")
    
    agg_row.processed_at = datetime.utcnow()
    db.flush()

# --------------------------------------------------------------------------
AI_SERVICES = [
    {"name": "categorization", "required": True},
    {"name": "summarization", "required": True},
]

@app.post("/api/ai/service-results/batch", status_code=status.HTTP_201_CREATED)
def create_service_results_batch(batch: ServiceResultsBatch, db: Session = Depends(get_db)):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –±–∞—Ç—á —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ AI-—Å–µ—Ä–≤–∏—Å–æ–≤,
    —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö –≤ `processed_service_results` —Å –ø–æ–º–æ—â—å—é "UPSERT" (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ).
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞/–±–æ—Ç–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.
    """
    logger.info(f"üöÄ DEBUG: –ü–æ–ª—É—á–µ–Ω POST /api/ai/service-results/batch —Å {len(batch.results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
    
    if not batch.results:
        logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –±–∞—Ç—á —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –î–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return JSONResponse(status_code=200, content={"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."})

    try:
        # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è "UPSERT"
        results_to_upsert = [
            {
                "post_id": r.post_id,
                "public_bot_id": r.public_bot_id,
                "service_name": r.service_name,
                "status": r.status,
                "payload": r.payload,
                "metrics": r.metrics,
                "processed_at": datetime.utcnow()
            }
            for r in batch.results
        ]
        
        # –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω–∏—Ç—å "UPSERT" (INSERT ... ON CONFLICT ...)
        if USE_POSTGRESQL:
            stmt = insert(ProcessedServiceResult).values(results_to_upsert)
            update_dict = {
                'status': stmt.excluded.status,
                'payload': stmt.excluded.payload,
                'metrics': stmt.excluded.metrics,
                'processed_at': stmt.excluded.processed_at
            }
            stmt = stmt.on_conflict_do_update(
                index_elements=['post_id', 'public_bot_id', 'service_name'],
                set_=update_dict
            )
            db.execute(stmt)
        else: # Fallback –¥–ª—è SQLite
             for r in results_to_upsert:
                existing = db.query(ProcessedServiceResult).filter_by(
                    post_id=r['post_id'], 
                    public_bot_id=r['public_bot_id'],
                    service_name=r['service_name']
                ).first()
                if existing:
                    existing.status = r['status']
                    existing.payload = r['payload']
                    existing.metrics = r['metrics']
                    existing.processed_at = r['processed_at']
                else:
                    db.add(ProcessedServiceResult(**r))

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(results_to_upsert)} –∑–∞–ø–∏—Å–µ–π –≤ `processed_service_results`.")

        # –®–∞–≥ 3: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ—Å—Ç–æ–≤
        unique_posts_to_update = {(r.post_id, r.public_bot_id) for r in batch.results}
        
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è {len(unique_posts_to_update)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤/–±–æ—Ç–æ–≤.")
        
        for post_id, bot_id in unique_posts_to_update:
            try:
                logger.info(f"üîß DEBUG: –í—ã–∑—ã–≤–∞–µ–º _update_processed_data_flags –¥–ª—è post_id={post_id}, bot_id={bot_id}")
                _update_processed_data_flags(db, post_id, bot_id)
                logger.info(f"‚úÖ DEBUG: _update_processed_data_flags –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –¥–ª—è post_id={post_id}, bot_id={bot_id}")
            except Exception as e:
                 logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≥—Ä–µ–≥–∞—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è post_id={post_id}, bot_id={bot_id}: {e}", exc_info=True)

        db.commit()
        
        return JSONResponse(
            status_code=201,
            content={"message": f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results_to_upsert)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."}
        )

    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ create_service_results_batch: {e}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}"
        )

@app.put("/api/ai/results/sync-status")
def sync_ai_service_status(request: SyncStatusRequest, db: Session = Depends(get_db)):
    """üîß –ù–û–í–´–ô: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ AI —Å–µ—Ä–≤–∏—Å–∞ —Å –∞—Ç–æ–º–∞—Ä–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ñ–ª–∞–≥–æ–≤ –∏ –ø–µ—Ä–µ—Å—á—ë—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        valid_services = ["categorizer", "summarizer"]
        if request.service not in valid_services:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–µ—Ä–≤–∏—Å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {valid_services}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
        bot = db.query(PublicBot).filter(PublicBot.id == request.bot_id).first()
        if not bot:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"–ë–æ—Ç —Å ID {request.bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ processed_data –¥–ª—è —ç—Ç–∏—Ö –ø–æ—Å—Ç–æ–≤ –∏ –±–æ—Ç–∞
        existing_records = db.query(ProcessedData).filter(
            ProcessedData.post_id.in_(request.post_ids),
            ProcessedData.public_bot_id == request.bot_id
        ).all()
        
        existing_post_ids = {record.post_id for record in existing_records}
        missing_post_ids = set(request.post_ids) - existing_post_ids
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
        created_count = 0
        if missing_post_ids:
            for post_id in missing_post_ids:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                post_exists = db.query(PostCache).filter(PostCache.id == post_id).first()
                if post_exists:
                    new_record = ProcessedData(
                        post_id=post_id,
                        public_bot_id=request.bot_id,
                        summaries={},
                        categories={},
                        metrics={},
                        is_categorized=(request.service == "categorizer"),
                        is_summarized=(request.service == "summarizer"),
                        processing_status="processing"  # –û–¥–∏–Ω —Å–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–∏–ª = processing
                    )
                    db.add(new_record)
                    created_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –∏ —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        updated_count = 0
        for record in existing_records:
            # –í—ã—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–ª–∞–≥
            if request.service == "categorizer":
                record.is_categorized = True
            elif request.service == "summarizer":
                record.is_summarized = True
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–ª–∞–≥–æ–≤
            if not record.is_categorized and not record.is_summarized:
                record.processing_status = "pending"
            elif record.is_categorized and record.is_summarized:
                record.processing_status = "completed"
            else:
                record.processing_status = "processing"
            
            updated_count += 1
        
        db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        stats = db.query(
            ProcessedData.processing_status,
            func.count(ProcessedData.id).label('count')
        ).filter(
            ProcessedData.public_bot_id == request.bot_id
        ).group_by(ProcessedData.processing_status).all()
        
        status_counts = {
            "pending": 0,
            "processing": 0,
            "completed": 0,
            "failed": 0
        }
        for stat in stats:
            if stat.processing_status in status_counts:
                status_counts[stat.processing_status] = stat.count
        
        total_affected = created_count + updated_count
        logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ '{request.service}' –¥–ª—è {total_affected} –ø–æ—Å—Ç–æ–≤ –±–æ—Ç–∞ {request.bot_id}")
        
        return {
            "message": f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ '{request.service}' –¥–ª—è {total_affected} –ø–æ—Å—Ç–æ–≤",
            "service": request.service,
            "bot_id": request.bot_id,
            "affected_count": total_affected,
            "created_count": created_count,
            "updated_count": updated_count,
            "status_distribution": status_counts,
            "requested_posts": len(request.post_ids)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        )

# === AI MANAGEMENT ENDPOINTS ===
@app.get("/api/ai/status")
def get_ai_status(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–´–ï –°–¢–ê–¢–£–°–´)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã (active + development)
        active_bots = db.query(PublicBot).filter(
            PublicBot.status.in_(['active', 'development'])
        ).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        active_bot_ids = [bot.id for bot in active_bots]
        
        if active_bot_ids:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–º –±–æ—Ç–∞–º
            bot_channels = db.query(BotChannel).filter(
                BotChannel.public_bot_id.in_(active_bot_ids),
                BotChannel.is_active == True
            ).all()
            
            if bot_channels:
                # –ü–æ–ª—É—á–∞–µ–º telegram_id –∫–∞–Ω–∞–ª–æ–≤
                channel_ids = [bc.channel_id for bc in bot_channels]
                channels_info = db.query(Channel).filter(Channel.id.in_(channel_ids)).all()
                channel_telegram_ids = [ch.telegram_id for ch in channels_info]
                
                # üöÄ –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                multitenant_stats = {}
                for status in ['pending', 'categorized', 'summarized', 'completed', 'failed']:
                    # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
                    count = db.query(PostCache.id).join(
                        ProcessedData, PostCache.id == ProcessedData.post_id
                    ).filter(
                        ProcessedData.processing_status == status,
                        ProcessedData.public_bot_id.in_(active_bot_ids),
                        PostCache.channel_telegram_id.in_(channel_telegram_ids)
                    ).distinct().count()
                    multitenant_stats[status] = count
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å UI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (processing = categorized + summarized)
                processing_count = multitenant_stats.get('categorized', 0) + multitenant_stats.get('summarized', 0)
                posts_stats = {
                    'pending': multitenant_stats.get('pending', 0),
                    'processing': processing_count,
                    'completed': multitenant_stats.get('completed', 0),
                    'failed': multitenant_stats.get('failed', 0)
                }
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤)
                total_assignable_posts = db.query(PostCache).filter(
                    PostCache.channel_telegram_id.in_(channel_telegram_ids)
                ).count()
            else:
                # –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                multitenant_stats = {'pending': 0, 'categorized': 0, 'summarized': 0, 'completed': 0, 'failed': 0}
                posts_stats = {'pending': 0, 'processing': 0, 'completed': 0, 'failed': 0}
                total_assignable_posts = 0
        else:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
            multitenant_stats = {'pending': 0, 'categorized': 0, 'summarized': 0, 'completed': 0, 'failed': 0}
            posts_stats = {'pending': 0, 'processing': 0, 'completed': 0, 'failed': 0}
            total_assignable_posts = 0
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        progress_percentage = 0
        if total_assignable_posts > 0:
            completed_posts = posts_stats.get('completed', 0)
            progress_percentage = round((completed_posts / total_assignable_posts) * 100, 2)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
        total_posts_in_system = db.query(PostCache).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_ai_results = db.query(ProcessedData).count()
        results_per_post = round(total_ai_results / max(total_assignable_posts, 1), 2)
        
        # üîß –ù–û–í–û–ï: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–ª–∞–≥–∞–º –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        flags_stats = {}
        if active_bot_ids:
            # –°—á–∏—Ç–∞–µ–º –ø–æ—Å—Ç—ã —Å is_categorized = true
            categorized_count = db.query(ProcessedData).filter(
                ProcessedData.public_bot_id.in_(active_bot_ids),
                ProcessedData.is_categorized == True
            ).count()
            
            # –°—á–∏—Ç–∞–µ–º –ø–æ—Å—Ç—ã —Å is_summarized = true
            summarized_count = db.query(ProcessedData).filter(
                ProcessedData.public_bot_id.in_(active_bot_ids),
                ProcessedData.is_summarized == True
            ).count()
            
            flags_stats = {
                "categorized": categorized_count,
                "summarized": summarized_count
            }
        else:
            flags_stats = {"categorized": 0, "summarized": 0}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤
        total_bots = db.query(PublicBot).count()
        active_bots_count = db.query(PublicBot).filter(PublicBot.status == 'active').count()
        development_bots = db.query(PublicBot).filter(PublicBot.status == 'development').count()
        processing_bots = active_bots_count + development_bots
        
        return {
            "posts_stats": posts_stats,  # –°–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å UI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            "multitenant_stats": multitenant_stats,  # –ü–æ–ª–Ω–∞—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            "flags_stats": flags_stats,  # üîß –ù–û–í–û–ï: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–ª–∞–≥–∞–º
            "total_posts": total_assignable_posts,  # –ü–æ—Å—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–º –±–æ—Ç–∞–º
            "total_posts_in_system": total_posts_in_system,  # –í—Å–µ –ø–æ—Å—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ
            "progress_percentage": progress_percentage,  # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            "ai_results_stats": {
                "total_results": total_ai_results,
                "results_per_post": results_per_post
            },
            "bots_stats": {
                "total_bots": total_bots,
                "active_bots": active_bots_count,
                "development_bots": development_bots,
                "total_processing_bots": processing_bots
            },
            "is_processing": posts_stats.get('processing', 0) > 0,
            "last_updated": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "error": str(e),
            "posts_stats": {"pending": 0, "processing": 0, "completed": 0, "failed": 0},
            "multitenant_stats": {"pending": 0, "categorized": 0, "summarized": 0, "completed": 0, "failed": 0},
            "flags_stats": {"categorized": 0, "summarized": 0},
            "total_posts": 0,
            "progress_percentage": 0,
            "ai_results_stats": {"total_results": 0, "results_per_post": 0},
            "bots_stats": {"total_bots": 0, "active_bots": 0, "development_bots": 0, "total_processing_bots": 0},
            "is_processing": False,
            "last_updated": datetime.now().isoformat()
        }

@app.get("/api/ai/multitenant-status")
def get_multitenant_ai_status(db: Session = Depends(get_db)):
    """üöÄ –ù–û–í–´–ô: –ü–æ–ª–Ω–∞—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –±–æ—Ç–∞–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
        active_bots = db.query(PublicBot).filter(
            PublicBot.status.in_(['active', 'development'])
        ).all()
        
        if not active_bots:
            return {
                "bots_stats": [],
                "summary": {"pending": 0, "processing": 0, "categorized": 0, "summarized": 0, "completed": 0, "failed": 0},
                "ui_compatible_summary": {"pending": 0, "processing": 0, "completed": 0, "failed": 0},
                "total_bots": 0,
                "last_updated": datetime.now().isoformat()
            }
        
        bots_detailed = []
        summary_stats = {"pending": 0, "processing": 0, "categorized": 0, "summarized": 0, "completed": 0, "failed": 0}
        
        for bot in active_bots:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
            bot_channels = db.query(BotChannel).filter(
                BotChannel.public_bot_id == bot.id,
                BotChannel.is_active == True
            ).all()
            
            if bot_channels:
                channel_ids = [bc.channel_id for bc in bot_channels]
                channels_info = db.query(Channel).filter(Channel.id.in_(channel_ids)).all()
                channel_telegram_ids = [ch.telegram_id for ch in channels_info]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
                bot_stats = {}
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                for status in ['pending', 'processing', 'completed', 'failed']:
                    count = db.query(PostCache.id).join(
                        ProcessedData, PostCache.id == ProcessedData.post_id
                    ).filter(
                        ProcessedData.processing_status == status,
                        ProcessedData.public_bot_id == bot.id,
                        PostCache.channel_telegram_id.in_(channel_telegram_ids)
                    ).distinct().count()
                    bot_stats[status] = count
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ñ–ª–∞–≥–∞–º (–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
                categorized_count = db.query(PostCache.id).join(
                    ProcessedData, PostCache.id == ProcessedData.post_id
                ).filter(
                    ProcessedData.is_categorized == True,
                    ProcessedData.public_bot_id == bot.id,
                    PostCache.channel_telegram_id.in_(channel_telegram_ids)
                ).distinct().count()
                
                summarized_count = db.query(PostCache.id).join(
                    ProcessedData, PostCache.id == ProcessedData.post_id
                ).filter(
                    ProcessedData.is_summarized == True,
                    ProcessedData.public_bot_id == bot.id,
                    PostCache.channel_telegram_id.in_(channel_telegram_ids)
                ).distinct().count()
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                bot_stats['categorized'] = categorized_count
                bot_stats['summarized'] = summarized_count
                
                # –°—É–º–º–∏—Ä—É–µ–º –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                summary_stats['pending'] += bot_stats.get('pending', 0)
                summary_stats['processing'] += bot_stats.get('processing', 0)
                summary_stats['completed'] += bot_stats.get('completed', 0)
                summary_stats['failed'] += bot_stats.get('failed', 0)
                summary_stats['categorized'] += categorized_count
                summary_stats['summarized'] += summarized_count
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞
                total_bot_posts = db.query(PostCache).filter(
                    PostCache.channel_telegram_id.in_(channel_telegram_ids)
                ).count()
                
                progress = 0
                if total_bot_posts > 0:
                    progress = round((bot_stats['completed'] / total_bot_posts) * 100, 2)
            else:
                bot_stats = {"pending": 0, "processing": 0, "categorized": 0, "summarized": 0, "completed": 0, "failed": 0}
                total_bot_posts = 0
                progress = 0
            
            # UI-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –±–æ—Ç–∞
            ui_compatible_stats = {
                "pending": bot_stats.get('pending', 0),
                "processing": bot_stats.get('processing', 0),
                "completed": bot_stats.get('completed', 0),
                "failed": bot_stats.get('failed', 0)
            }
            
            bots_detailed.append({
                "bot_id": bot.id,
                "name": bot.name,
                "status": bot.status,
                "multitenant_stats": bot_stats,  # –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                "ui_stats": ui_compatible_stats,  # –°–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å UI
                "total_posts": total_bot_posts,
                "progress_percentage": progress,
                "channels_count": len(bot_channels) if bot_channels else 0
            })
        
        # UI-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        ui_compatible_summary = {
            "pending": summary_stats.get('pending', 0),
            "processing": summary_stats.get('processing', 0),
            "completed": summary_stats.get('completed', 0),
            "failed": summary_stats.get('failed', 0)
        }
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        bot_statistics = []
        for bot_detail in bots_detailed:
            bot_statistics.append({
                "bot_id": bot_detail["bot_id"],
                "bot_name": bot_detail["name"],
                "total_posts": bot_detail["total_posts"],
                "processed_posts": bot_detail["multitenant_stats"]["completed"],
                "posts_by_status": bot_detail["multitenant_stats"]
            })
        
        return {
            "bots_stats": bots_detailed,
            "bot_statistics": bot_statistics,  # üöÄ –ù–û–í–û–ï: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
            "summary": summary_stats,  # –ü–æ–ª–Ω–∞—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            "ui_compatible_summary": ui_compatible_summary,  # –°–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å UI
            "total_bots": len(active_bots),
            "last_updated": datetime.now().isoformat()
        }
        
    except Exception as e:
        return {
            "error": str(e),
            "bots_stats": [],
            "summary": {"pending": 0, "processing": 0, "categorized": 0, "summarized": 0, "completed": 0, "failed": 0},
            "ui_compatible_summary": {"pending": 0, "processing": 0, "completed": 0, "failed": 0},
            "total_bots": 0,
            "last_updated": datetime.now().isoformat()
        }

@app.get("/api/ai/tasks")
def get_ai_tasks(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö AI –∑–∞–¥–∞—á"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –≤ —Å—Ç–∞—Ç—É—Å–µ "processing"
        processing_posts = db.query(PostCache).filter(
            PostCache.processing_status == "processing"
        ).order_by(PostCache.collected_at.desc()).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        channel_ids = list(set([post.channel_telegram_id for post in processing_posts]))
        channels_info = db.query(Channel).filter(Channel.telegram_id.in_(channel_ids)).all()
        channels_map = {ch.telegram_id: ch.channel_name for ch in channels_info}
        
        tasks = []
        for post in processing_posts:
            tasks.append({
                "post_id": post.id,
                "channel_name": channels_map.get(post.channel_telegram_id, f"Channel {post.channel_telegram_id}"),
                "channel_telegram_id": post.channel_telegram_id,
                "content_preview": (post.content[:100] + "...") if post.content and len(post.content) > 100 else post.content,
                "post_date": post.post_date,
                "collected_at": post.collected_at,
                "views": post.views
            })
        
        return {
            "success": True,
            "active_tasks": len(tasks),
            "tasks": tasks
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "active_tasks": 0,
            "tasks": []
        }

@app.post("/api/ai/reprocess-all")
async def reprocess_all_posts(db: Session = Depends(get_db)):
    """‚úÖ –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö: –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã + –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ AI Orchestrator"""
    try:
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
        # 1. –ù–ï —Ç—Ä–æ–≥–∞–µ–º posts_cache.processing_status (–æ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π, —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è AI Orchestrator)
        # 2. –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ –∏–∑ processed_data (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
        # 3. AI Orchestrator –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–∏–¥–∏—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –∫–∞–∫ "–Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        deleted_results = db.query(ProcessedData).count()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—Å—è)
        db.query(ProcessedData).delete(synchronize_session=False)
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ processed_service_results  
        db.query(ProcessedServiceResult).delete(synchronize_session=False)
        
        db.commit()
        
        # üöÄ –ê–í–¢–û–ó–ê–ü–£–°–ö AI ORCHESTRATOR
        ai_start_success = False
        ai_message = ""
        
        if deleted_results > 0:
            try:
                # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é trigger_ai_processing
                trigger_response = await trigger_ai_processing()
                ai_start_success = trigger_response.get("success", False)
                ai_message = "AI Orchestrator –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ trigger_ai_processing"
            except Exception as e:
                ai_message = f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ AI —á–µ—Ä–µ–∑ trigger_ai_processing: {str(e)}"
        else:
            ai_message = "–ù–µ—Ç AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        
        return {
            "success": True,
            "message": "‚úÖ –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω",
            "ai_results_cleared": deleted_results,
            "multitenant_architecture": True,  # –ú–∞—Ä–∫–µ—Ä –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            "ai_auto_start": ai_start_success,
            "ai_message": ai_message
        }
    except Exception as e:
        db.rollback()
        return {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        }

@app.post("/api/ai/reprocess-bot/{bot_id}")
def reprocess_bot_posts(bot_id: int, db: Session = Depends(get_db)):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
        bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
        if not bot:
            raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
        bot_channels = db.query(BotChannel).filter(
            BotChannel.public_bot_id == bot_id,
            BotChannel.is_active == True
        ).all()
        
        if not bot_channels:
            return {
                "success": False,
                "error": "–£ –±–æ—Ç–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
                "posts_reset": 0,
                "ai_results_cleared": 0
            }
        
        # –ü–æ–ª—É—á–∞–µ–º telegram_id –∫–∞–Ω–∞–ª–æ–≤
        channel_ids = [bc.channel_id for bc in bot_channels]
        channels_info = db.query(Channel).filter(Channel.id.in_(channel_ids)).all()
        channel_telegram_ids = [ch.telegram_id for ch in channels_info]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞
        updated_count = db.query(PostCache).filter(
            PostCache.channel_telegram_id.in_(channel_telegram_ids)
        ).update(
            {"processing_status": "pending"},
            synchronize_session=False
        )
        
        # –£–¥–∞–ª—è–µ–º AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
        deleted_results = db.query(ProcessedData).filter(
            ProcessedData.public_bot_id == bot_id
        ).count()
        
        db.query(ProcessedData).filter(
            ProcessedData.public_bot_id == bot_id
        ).delete(synchronize_session=False)
        
        db.commit()
        
        return {
            "success": True,
            "message": f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –±–æ—Ç–∞ '{bot.name}' –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω",
            "bot_name": bot.name,
            "posts_reset": updated_count,
            "ai_results_cleared": deleted_results,
            "channels_affected": len(channel_telegram_ids)
        }
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        return {
            "success": False,
            "error": str(e),
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}"
        }

@app.post("/api/ai/reprocess-channel/{channel_id}")
def reprocess_channel_posts(channel_id: int, db: Session = Depends(get_db)):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel = db.query(Channel).filter(Channel.id == channel_id).first()
        if not channel:
            raise HTTPException(status_code=404, detail="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        updated_count = db.query(PostCache).filter(
            PostCache.channel_telegram_id == channel.telegram_id
        ).update(
            {"processing_status": "pending"},
            synchronize_session=False
        )
        
        # –£–¥–∞–ª—è–µ–º AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞
        post_ids = db.query(PostCache.id).filter(
            PostCache.channel_telegram_id == channel.telegram_id
        ).all()
        post_ids_list = [pid[0] for pid in post_ids]
        
        deleted_results = 0
        if post_ids_list:
            deleted_results = db.query(ProcessedData).filter(
                ProcessedData.post_id.in_(post_ids_list)
            ).count()
            
            db.query(ProcessedData).filter(
                ProcessedData.post_id.in_(post_ids_list)
            ).delete(synchronize_session=False)
        
        db.commit()
        
        return {
            "success": True,
            "message": f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{channel.title or channel.channel_name}' –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω",
            "channel_name": channel.title or channel.channel_name,
            "channel_username": channel.username,
            "posts_reset": updated_count,
            "ai_results_cleared": deleted_results
        }
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        return {
            "success": False,
            "error": str(e),
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}"
        }

@app.post("/api/ai/reprocess-channels")
def reprocess_multiple_channels(request: dict, db: Session = Depends(get_db)):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        channel_ids = request.get("channel_ids", [])
        if not channel_ids:
            return {
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞",
                "channels_processed": 0,
                "total_posts_reset": 0,
                "total_ai_results_cleared": 0
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        channels = db.query(Channel).filter(Channel.id.in_(channel_ids)).all()
        if not channels:
            return {
                "success": False,
                "error": "–£–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                "channels_processed": 0,
                "total_posts_reset": 0,
                "total_ai_results_cleared": 0
            }
        
        total_posts_reset = 0
        total_ai_results_cleared = 0
        processed_channels = []
        
        for channel in channels:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞
            updated_count = db.query(PostCache).filter(
                PostCache.channel_telegram_id == channel.telegram_id
            ).update(
                {"processing_status": "pending"},
                synchronize_session=False
            )
            
            # –£–¥–∞–ª—è–µ–º AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞
            post_ids = db.query(PostCache.id).filter(
                PostCache.channel_telegram_id == channel.telegram_id
            ).all()
            post_ids_list = [pid[0] for pid in post_ids]
            
            deleted_results = 0
            if post_ids_list:
                deleted_results = db.query(ProcessedData).filter(
                    ProcessedData.post_id.in_(post_ids_list)
                ).count()
                
                db.query(ProcessedData).filter(
                    ProcessedData.post_id.in_(post_ids_list)
                ).delete(synchronize_session=False)
            
            total_posts_reset += updated_count
            total_ai_results_cleared += deleted_results
            
            processed_channels.append({
                "id": channel.id,
                "name": channel.title or channel.channel_name,
                "username": channel.username,
                "posts_reset": updated_count,
                "ai_results_cleared": deleted_results
            })
        
        db.commit()
        
        return {
            "success": True,
            "message": f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–ª—è {len(processed_channels)} –∫–∞–Ω–∞–ª–æ–≤",
            "channels_processed": len(processed_channels),
            "total_posts_reset": total_posts_reset,
            "total_ai_results_cleared": total_ai_results_cleared,
            "processed_channels": processed_channels
        }
    except Exception as e:
        db.rollback()
        return {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤"
        }

@app.post("/api/ai/stop")
def stop_ai_processing(db: Session = Depends(get_db)):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫—É - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –≤ —Å—Ç–∞—Ç—É—Å 'pending'"""
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'processing' –≤ 'pending'
        updated_count = db.query(PostCache).filter(
            PostCache.processing_status == "processing"
        ).update(
            {"processing_status": "pending"},
            synchronize_session=False
        )
        
        db.commit()
        
        return {
            "success": True,
            "message": "AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            "posts_stopped": updated_count,
            "note": "–ü–æ—Å—Ç—ã –≤ —Å—Ç–∞—Ç—É—Å–µ 'processing' –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ 'pending'"
        }
    except Exception as e:
        db.rollback()
        return {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        }

@app.delete("/api/ai/clear-results")
async def clear_ai_results(confirm: bool = False, db: Session = Depends(get_db)):
    """‚úÖ –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø –û–ß–ò–°–¢–ö–ê: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã + –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ AI Orchestrator"""
    if not confirm:
        return {
            "success": False,
            "error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "message": "–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä ?confirm=true –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"
        }
    
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        total_results = db.query(ProcessedData).count()
        
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
        # 1. –ù–ï —Ç—Ä–æ–≥–∞–µ–º posts_cache.processing_status (–æ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π)
        # 2. –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ –∏–∑ processed_data (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
        # 3. AI Orchestrator –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–∏–¥–∏—Ç –ø–æ—Å—Ç—ã –∫–∞–∫ "–Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—Å—è)
        db.query(ProcessedData).delete(synchronize_session=False)
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ processed_service_results
        db.query(ProcessedServiceResult).delete(synchronize_session=False)
        
        db.commit()
        
        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ó–ê–ü–£–°–ö–ê–ï–ú AI ORCHESTRATOR –ü–û–°–õ–ï –°–ë–†–û–°–ê
        ai_orchestrator_triggered = False
        trigger_error = None
        
        if total_results > 0:
            try:
                # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é trigger_ai_processing
                trigger_response = await trigger_ai_processing()
                ai_orchestrator_triggered = trigger_response.get("success", False)
            except Exception as e:
                trigger_error = str(e)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = {
            "success": True,
            "deleted_results": total_results,
            "multitenant_architecture": True,  # –ú–∞—Ä–∫–µ—Ä –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            "ai_orchestrator_triggered": ai_orchestrator_triggered
        }
        
        if ai_orchestrator_triggered:
            result["message"] = f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {total_results} AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞). AI Orchestrator –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        elif total_results > 0:
            result["message"] = f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {total_results} AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞). –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ AI Orchestrator: {trigger_error or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
            result["trigger_error"] = trigger_error
        else:
            result["message"] = "‚úÖ –ù–µ—Ç AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)"
        
        return result
        
    except Exception as e:
        db.rollback()
        return {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        }

# Digest Preview API Endpoint
@app.post("/api/public-bots/{bot_id}/preview-digest")
async def generate_digest_preview(bot_id: int, db: Session = Depends(get_db)):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –†–ï–ê–õ–¨–ù–û–ì–û –ø—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI —Å–µ—Ä–≤–∏—Å–æ–≤
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –±–æ—Ç
    2. –ù–∞–π—Ç–∏ 5 –ø–æ—Å—Ç–æ–≤ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏–∑ —ç—Ç–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
    3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫—É, –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    4. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–∫—É Telegram –±–æ—Ç–∞
    5. –í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–≤—å—é —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ AI —Ä–µ–∑—é–º–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    """
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
        bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
        if not bot:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
        bot_channels = db.query(BotChannel).filter(
            BotChannel.public_bot_id == bot_id,
            BotChannel.is_active == True
        ).all()
        
        if not bot_channels:
            return {
                "success": False,
                "error": "–£ –±–æ—Ç–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
                "fallback_data": {
                    "bot_name": bot.name,
                    "message": "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞"
                }
            }
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
        bot_categories = db.query(BotCategory).filter(
            BotCategory.public_bot_id == bot_id,
            BotCategory.is_active == True
        ).all()
        
        if not bot_categories:
            return {
                "success": False,
                "error": "–£ –±–æ—Ç–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                "fallback_data": {
                    "bot_name": bot.name,
                    "message": "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞"
                }
            }
        
        # 4. –ü–æ–ª—É—á–∞–µ–º telegram_id –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞
        channel_ids = [bc.channel_id for bc in bot_channels]
        channels_info = db.query(Channel).filter(Channel.id.in_(channel_ids)).all()
        channel_telegram_ids = [ch.telegram_id for ch in channels_info]
        
        # 5. –ü–æ–ª—É—á–∞–µ–º 5 –ø–æ—Å—Ç–æ–≤ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞
        posts_query = db.query(PostCache).filter(
            PostCache.channel_telegram_id.in_(channel_telegram_ids),
            PostCache.content.isnot(None),
            PostCache.content != "",
            func.length(PostCache.content) > 50  # –ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤
        ).order_by(PostCache.collected_at.desc()).limit(5)
        
        posts = posts_query.all()
        
        if not posts:
            return {
                "success": False,
                "error": "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–≤—å—é",
                "fallback_data": {
                    "bot_name": bot.name,
                    "message": f"–í –∫–∞–Ω–∞–ª–∞—Ö –±–æ—Ç–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é"
                }
            }
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —ç—Ç–∏—Ö –ø–æ—Å—Ç–æ–≤
        post_ids = [post.id for post in posts]
        existing_ai_results = db.query(ProcessedData).filter(
            ProcessedData.post_id.in_(post_ids),
            ProcessedData.public_bot_id == bot_id
        ).all()
        
        existing_post_ids = {result.post_id for result in existing_ai_results}
        unprocessed_posts = [post for post in posts if post.id not in existing_post_ids]
        
        # 7. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã - –∑–∞–ø—É—Å–∫–∞–µ–º AI Orchestrator
        if unprocessed_posts:
            print(f"üß† –ó–∞–ø—É—Å–∫–∞–µ–º AI –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è {len(unprocessed_posts)} –ø–æ—Å—Ç–æ–≤...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI Orchestrator
            import sys
            import os
            sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
            
            from ai_services.orchestrator_v5_parallel import AIOrchestrator
            
            # –°–æ–∑–¥–∞–µ–º AI Orchestrator
            orchestrator = AIOrchestrator(backend_url="http://localhost:8000")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º AI –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ orchestrator_v5_parallel
            try:
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –±–æ—Ç–∞ –¥–ª—è AI Orchestrator v5
                bot_data = {
                    "id": bot.id,
                    "name": bot.name,
                    "categorization_prompt": bot.categorization_prompt or "",
                    "summarization_prompt": bot.summarization_prompt or "",
                    "status": bot.status
                }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º AI –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
                processed_count = await orchestrator.process_bot(bot_data)
                
                if processed_count > 0:
                    print(f"‚úÖ AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {processed_count} –ø–æ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                else:
                    print("‚ö†Ô∏è AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        # 8. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ + –Ω–æ–≤—ã–µ)
        all_ai_results = db.query(ProcessedData).filter(
            ProcessedData.post_id.in_(post_ids),
            ProcessedData.public_bot_id == bot_id
        ).all()
        
        # 9. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
        digest_posts = []
        for result in all_ai_results:
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç
            post = next((p for p in posts if p.id == result.post_id), None)
            if not post:
                continue
            
            # –ü–∞—Ä—Å–∏–º AI –¥–∞–Ω–Ω—ã–µ
            try:
                summaries = result.summaries if USE_POSTGRESQL else json.loads(result.summaries)
                categories = result.categories if USE_POSTGRESQL else json.loads(result.categories)
                metrics = result.metrics if USE_POSTGRESQL else json.loads(result.metrics)
            except:
                continue
            
            digest_posts.append({
                "post_id": post.id,
                "title": post.title,
                "content_preview": (post.content[:200] + "...") if post.content and len(post.content) > 200 else post.content,
                "channel_telegram_id": post.channel_telegram_id,
                "post_date": post.post_date,
                "views": post.views,
                "ai_summary": summaries.get("summary", "–†–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"),
                "ai_category": categories.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                "ai_metrics": {
                    "importance": metrics.get("importance", 0),
                    "urgency": metrics.get("urgency", 0),
                    "significance": metrics.get("significance", 0)
                }
            })
        
        # 10. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        digest_posts.sort(key=lambda x: x["ai_metrics"]["importance"], reverse=True)
        
        return {
            "success": True,
            "bot_name": bot.name,
            "bot_id": bot.id,
            "preview_generated_at": datetime.now(),
            "total_posts_analyzed": len(posts),
            "ai_processed_posts": len(all_ai_results),
            "digest_posts": digest_posts[:bot.max_posts_per_digest],
            "channels_included": len(channel_telegram_ids),
            "categories_configured": len(bot_categories)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "fallback_data": {
                "bot_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç",
                "message": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é: {str(e)}"
            }
        }

# üöÄ –ù–û–í–´–ô ENDPOINT: –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ AI Orchestrator
@app.post("/api/ai/trigger-processing")
async def trigger_ai_processing():
    """–†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ AI Orchestrator –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    global orchestrator_commands
    
    try:
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        db = next(get_db())
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
        active_bots = db.query(PublicBot).filter(
            PublicBot.status.in_(['active', 'development'])
        ).all()
        
        if not active_bots:
            return {
                "success": True,
                "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                "pending_posts": 0
            }
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª—ã –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        active_channel_ids = set()
        for bot in active_bots:
            bot_channels = db.query(BotChannel).filter(
                BotChannel.public_bot_id == bot.id,
                BotChannel.is_active == True
            ).all()
            for bot_channel in bot_channels:
                active_channel_ids.add(bot_channel.channel_id)
        
        if not active_channel_ids:
            return {
                "success": True,
                "message": "–£ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                "pending_posts": 0
            }
        
        # –ü–æ–ª—É—á–∞–µ–º telegram_id –∫–∞–Ω–∞–ª–æ–≤
        channels = db.query(Channel).filter(Channel.id.in_(active_channel_ids)).all()
        active_telegram_ids = [ch.telegram_id for ch in channels]
        
        # –°—á–∏—Ç–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        total_posts = db.query(PostCache).filter(
            PostCache.channel_telegram_id.in_(active_telegram_ids)
        ).count()
        
        if total_posts == 0:
            return {
                "success": True,
                "message": "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤",
                "pending_posts": 0
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è AI Orchestrator (–µ—Å–ª–∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ continuous —Ä–µ–∂–∏–º–µ)
        trigger_command = {
            "command_type": "trigger_processing",
            "message": f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ {total_posts} –ø–æ—Å—Ç–æ–≤ –¥–ª—è {len(active_bots)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤",
            "pending_posts": total_posts
        }
        orchestrator_commands.append({
            "id": len(orchestrator_commands) + 1,
            "timestamp": datetime.now().isoformat(),
            **trigger_command
        })
        
        # AI Orchestrator —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Celery tasks
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º AI Orchestrator —á–µ—Ä–µ–∑ Celery task
        task = celery_client.send_task(
            'tasks.trigger_ai_processing',
            args=[None, False],  # bot_id=None (–≤—Å–µ –±–æ—Ç—ã), force_reprocess=False
            kwargs={}
        )
        
        return {
            "success": True,
            "message": f"AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {total_posts} –ø–æ—Å—Ç–æ–≤",
            "pending_posts": total_posts,
            "task_id": task.id,
            "command_queued": True
        }
            
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ AI Orchestrator"
        }

# üîÑ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï ENDPOINTS —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º
@app.post("/api/ai/reprocess-channels-auto")
def reprocess_multiple_channels_with_auto_start(request: dict, db: Session = Depends(get_db)):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ + –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ AI Orchestrator"""
    try:
        # 1. –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π reprocess
        channel_ids = request.get("channel_ids", [])
        if not channel_ids:
            return {
                "success": False,
                "error": "–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        channels = db.query(Channel).filter(Channel.id.in_(channel_ids)).all()
        if not channels:
            return {
                "success": False,
                "error": "–£–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            }
        
        total_posts_reset = 0
        total_ai_results_cleared = 0
        processed_channels = []
        
        for channel in channels:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞
            updated_count = db.query(PostCache).filter(
                PostCache.channel_telegram_id == channel.telegram_id
            ).update(
                {"processing_status": "pending"},
                synchronize_session=False
            )
            
            # –£–¥–∞–ª—è–µ–º AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞
            post_ids = db.query(PostCache.id).filter(
                PostCache.channel_telegram_id == channel.telegram_id
            ).all()
            post_ids_list = [pid[0] for pid in post_ids]
            
            deleted_results = 0
            if post_ids_list:
                deleted_results = db.query(ProcessedData).filter(
                    ProcessedData.post_id.in_(post_ids_list)
                ).count()
                
                db.query(ProcessedData).filter(
                    ProcessedData.post_id.in_(post_ids_list)
                ).delete(synchronize_session=False)
            
            total_posts_reset += updated_count
            total_ai_results_cleared += deleted_results
            
            processed_channels.append({
                "id": channel.id,
                "name": channel.title or channel.channel_name,
                "username": channel.username,
                "posts_reset": updated_count,
                "ai_results_cleared": deleted_results
            })
        
        db.commit()
        
        # 2. –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ AI Orchestrator —á–µ—Ä–µ–∑ Celery
        ai_start_success = False
        ai_message = ""
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º AI Orchestrator —á–µ—Ä–µ–∑ Celery task
            task = celery_client.send_task(
                'tasks.trigger_ai_processing',
                args=[None, True],  # bot_id=None (–≤—Å–µ –±–æ—Ç—ã), force_reprocess=True
                kwargs={}
            )
            
            ai_start_success = True
            ai_message = f"AI Orchestrator –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (Task ID: {task.id})"
        except Exception as e:
            ai_message = f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ AI: {str(e)}"
        
        return {
            "success": True,
            "message": f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–ª—è {len(processed_channels)} –∫–∞–Ω–∞–ª–æ–≤",
            "channels_processed": len(processed_channels),
            "total_posts_reset": total_posts_reset,
            "total_ai_results_cleared": total_ai_results_cleared,
            "processed_channels": processed_channels,
            "ai_auto_start": ai_start_success,
            "ai_message": ai_message
        }
        
    except Exception as e:
        db.rollback()
        return {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤"
        }

# üöÄ –ù–û–í–´–ô ENDPOINT: –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤
@app.get("/api/ai/detailed-status")
def get_detailed_ai_status(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É AI —Å–µ—Ä–≤–∏—Å–æ–≤ (–ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–´–ï –°–¢–ê–¢–£–°–´)"""
    try:
        # 1. –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –∏ –∏—Ö –∫–∞–Ω–∞–ª—ã (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –≤ /api/ai/status)
        active_bots = db.query(PublicBot).filter(
            PublicBot.status.in_(['active', 'development'])
        ).all()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        active_channel_ids = set()
        for bot in active_bots:
            bot_channels = db.query(BotChannel).filter(
                BotChannel.public_bot_id == bot.id,
                BotChannel.is_active == True
            ).all()
            for bot_channel in bot_channels:
                active_channel_ids.add(bot_channel.channel_id)
        
        # –ü–æ–ª—É—á–∞–µ–º telegram_id –∫–∞–Ω–∞–ª–æ–≤
        if active_channel_ids:
            channels = db.query(Channel).filter(Channel.id.in_(active_channel_ids)).all()
            active_telegram_ids = [ch.telegram_id for ch in channels]
        else:
            active_telegram_ids = []
        
        # 2. üöÄ –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤)
        active_bot_ids = [bot.id for bot in active_bots]
        multitenant_stats = {}
        for status in ['pending', 'categorized', 'summarized', 'completed', 'failed']:
            if active_telegram_ids and active_bot_ids:
                # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã —Å –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
                count = db.query(PostCache.id).join(
                    ProcessedData, PostCache.id == ProcessedData.post_id
                ).filter(
                    ProcessedData.processing_status == status,
                    ProcessedData.public_bot_id.in_(active_bot_ids),
                    PostCache.channel_telegram_id.in_(active_telegram_ids)
                ).distinct().count()
            else:
                count = 0
            multitenant_stats[status] = count
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å UI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        processing_count = multitenant_stats.get('categorized', 0) + multitenant_stats.get('summarized', 0)
        posts_stats = {
            'pending': multitenant_stats.get('pending', 0),
            'processing': processing_count,
            'completed': multitenant_stats.get('completed', 0),
            'failed': multitenant_stats.get('failed', 0)
        }
        
        # –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã–º –±–æ—Ç–∞–º
        if active_telegram_ids:
            total_posts = db.query(PostCache).filter(
                PostCache.channel_telegram_id.in_(active_telegram_ids)
            ).count()
        else:
            total_posts = 0
            
        progress_percentage = 0
        if total_posts > 0:
            completed_posts = posts_stats.get('completed', 0)
            progress_percentage = round((completed_posts / total_posts) * 100, 2)
        
        # 3. üöÄ –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã)
        channels_detailed = []
        if active_telegram_ids and active_bot_ids:
            for telegram_id in active_telegram_ids:
                # –°—á–∏—Ç–∞–µ–º –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                channel_total_posts = db.query(PostCache).filter(PostCache.channel_telegram_id == telegram_id).count()
                
                # –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞
                pending = db.query(PostCache.id).join(
                    ProcessedData, PostCache.id == ProcessedData.post_id
                ).filter(
                    PostCache.channel_telegram_id == telegram_id,
                    ProcessedData.processing_status == 'pending',
                    ProcessedData.public_bot_id.in_(active_bot_ids)
                ).distinct().count()
                
                categorized = db.query(PostCache.id).join(
                    ProcessedData, PostCache.id == ProcessedData.post_id
                ).filter(
                    PostCache.channel_telegram_id == telegram_id,
                    ProcessedData.processing_status == 'categorized',
                    ProcessedData.public_bot_id.in_(active_bot_ids)
                ).distinct().count()
                
                summarized = db.query(PostCache.id).join(
                    ProcessedData, PostCache.id == ProcessedData.post_id
                ).filter(
                    PostCache.channel_telegram_id == telegram_id,
                    ProcessedData.processing_status == 'summarized',
                    ProcessedData.public_bot_id.in_(active_bot_ids)
                ).distinct().count()
                
                completed = db.query(PostCache.id).join(
                    ProcessedData, PostCache.id == ProcessedData.post_id
                ).filter(
                    PostCache.channel_telegram_id == telegram_id,
                    ProcessedData.processing_status == 'completed',
                    ProcessedData.public_bot_id.in_(active_bot_ids)
                ).distinct().count()
                
                failed = db.query(PostCache.id).join(
                    ProcessedData, PostCache.id == ProcessedData.post_id
                ).filter(
                    PostCache.channel_telegram_id == telegram_id,
                    ProcessedData.processing_status == 'failed',
                    ProcessedData.public_bot_id.in_(active_bot_ids)
                ).distinct().count()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                channel = db.query(Channel).filter(Channel.telegram_id == telegram_id).first()
                channel_name = channel.title or channel.channel_name if channel else f'Channel {telegram_id}'
                channel_username = channel.username if channel else None
                
                processing_count = categorized + summarized  # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                
                channels_detailed.append({
                    'telegram_id': telegram_id,
                    'name': channel_name,
                    'username': channel_username,
                    'total_posts': channel_total_posts,
                    'pending': pending,
                    'processing': processing_count,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UI
                    'categorized': categorized,  # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                    'summarized': summarized,   # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                    'completed': completed,
                    'failed': failed,
                    'progress': round(completed / max(channel_total_posts, 1) * 100, 1)
                })
        
        # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –±–æ—Ç–∞–º (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã)
        
        if active_bot_ids:
            ai_results_by_bot = db.query(
                ProcessedData.public_bot_id,
                func.count(ProcessedData.id).label('results_count'),
                func.max(ProcessedData.processed_at).label('last_processed')
            ).filter(ProcessedData.public_bot_id.in_(active_bot_ids)).group_by(ProcessedData.public_bot_id).all()
        else:
            ai_results_by_bot = []
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤
        bot_names = {}
        for bot in active_bots:
            bot_names[bot.id] = {
                'name': bot.name,
                'status': bot.status
            }
        
        bots_detailed = []
        for stat in ai_results_by_bot:
            bot_info = bot_names.get(stat.public_bot_id, {})
            bots_detailed.append({
                'bot_id': stat.public_bot_id,
                'name': bot_info.get('name', f'Bot {stat.public_bot_id}'),
                'status': bot_info.get('status', 'unknown'),
                'results_count': stat.results_count,
                'last_processed': stat.last_processed.isoformat() if stat.last_processed else None
            })
        
        # 5. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã (—Ç–æ–ª—å–∫–æ –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤)
        if active_bot_ids:
            recent_processed = db.query(ProcessedData).filter(
                ProcessedData.public_bot_id.in_(active_bot_ids)
            ).order_by(ProcessedData.processed_at.desc()).limit(10).all()
        else:
            recent_processed = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤
        channel_names = {}
        if active_telegram_ids:
            for telegram_id in active_telegram_ids:
                channel = db.query(Channel).filter(Channel.telegram_id == telegram_id).first()
                if channel:
                    channel_names[telegram_id] = {
                        'name': channel.title or channel.channel_name,
                        'username': channel.username
                    }
        
        recent_posts = []
        for result in recent_processed:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
            post = db.query(PostCache).filter(PostCache.id == result.post_id).first()
            if post:
                recent_posts.append({
                    'post_id': result.post_id,
                    'bot_id': result.public_bot_id,
                    'bot_name': bot_names.get(result.public_bot_id, {}).get('name', f'Bot {result.public_bot_id}'),
                    'channel_id': post.channel_telegram_id,
                    'channel_name': channel_names.get(post.channel_telegram_id, {}).get('name', f'Channel {post.channel_telegram_id}'),
                    'processed_at': result.processed_at.isoformat(),
                    'processing_version': result.processing_version,
                    'content_preview': (post.content or '')[:100] + '...' if post.content else '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è'
                })
        
        # 6. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ AI Orchestrator
        is_processing = posts_stats.get('processing', 0) > 0
        orchestrator_status = "–ê–ö–¢–ò–í–ï–ù" if is_processing else "–ù–ï –ê–ö–¢–ò–í–ï–ù"
        
        # 7. –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        last_activity = None
        if recent_processed:
            last_activity = recent_processed[0].processed_at.isoformat()
        
        # 8. –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        total_posts_in_system = db.query(PostCache).count()
        
        return {
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã)
            "posts_stats": posts_stats,  # –°–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å UI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            "multitenant_stats": multitenant_stats,  # –ü–æ–ª–Ω–∞—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            "total_posts": total_posts,  # –ü–æ—Å—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–º –±–æ—Ç–∞–º
            "total_posts_in_system": total_posts_in_system,  # –í—Å–µ –ø–æ—Å—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ
            "progress_percentage": progress_percentage,
            
            # –°—Ç–∞—Ç—É—Å AI Orchestrator
            "orchestrator_status": orchestrator_status,
            "is_processing": is_processing,
            "last_activity": last_activity,
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
            "channels_detailed": channels_detailed,
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
            "bots_detailed": bots_detailed,
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã)
            "recent_processed": recent_posts,
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            "last_updated": datetime.now().isoformat(),
            "total_channels": len(channels_detailed),
            "total_active_bots": len(active_bots),
            "active_channel_telegram_ids": active_telegram_ids,  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            "active_bot_ids": active_bot_ids  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }
        
    except Exception as e:
        return {
            "error": str(e),
            "posts_stats": {"pending": 0, "processing": 0, "completed": 0, "failed": 0},
            "multitenant_stats": {"pending": 0, "categorized": 0, "summarized": 0, "completed": 0, "failed": 0},
            "total_posts": 0,
            "total_posts_in_system": 0,
            "progress_percentage": 0,
            "orchestrator_status": "–û–®–ò–ë–ö–ê",
            "is_processing": False,
            "channels_detailed": [],
            "bots_detailed": [],
            "recent_processed": [],
            "last_updated": datetime.now().isoformat()
        }

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ AI Orchestrator
orchestrator_status_cache = {
    "status": "UNKNOWN",
    "timestamp": None,
    "stats": {},
    "details": {}
}

@app.post("/api/ai/orchestrator-status")
async def receive_orchestrator_status(status_data: dict):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –æ —Å—Ç–∞—Ç—É—Å–µ AI Orchestrator"""
    global orchestrator_status_cache
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å—Ç–∞—Ç—É—Å–∞
        orchestrator_status_cache.update({
            "status": status_data.get("orchestrator_status", "UNKNOWN"),
            "timestamp": status_data.get("timestamp"),
            "stats": status_data.get("stats", {}),
            "details": status_data.get("details", {})
        })
        
        print(f"üì° –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å AI Orchestrator: {orchestrator_status_cache['status']}")
        
        return {"success": True, "message": "–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ AI Orchestrator: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/ai/orchestrator-live-status")
async def get_orchestrator_live_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ AI Orchestrator —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    global orchestrator_status_cache, orchestrator_process
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ —Å—Ç–∞—Ä—à–µ 2 –º–∏–Ω—É—Ç - —Å—á–∏—Ç–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º)
        current_time = datetime.now()
        is_active = False
        
        if orchestrator_status_cache["timestamp"]:
            try:
                status_time = datetime.fromisoformat(orchestrator_status_cache["timestamp"].replace('Z', '+00:00'))
                # –£–±–∏—Ä–∞–µ–º timezone info –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if status_time.tzinfo:
                    status_time = status_time.replace(tzinfo=None)
                
                time_diff = (current_time - status_time).total_seconds()
                is_active = time_diff < 120  # 2 –º–∏–Ω—É—Ç—ã
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        background_process_info = {
            "is_running": orchestrator_process is not None and orchestrator_process.poll() is None,
            "process_id": orchestrator_process.pid if orchestrator_process and orchestrator_process.poll() is None else None,
            "managed_by_backend": True
        }
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        diagnostics = {
            "heartbeat_active": is_active,
            "heartbeat_age_seconds": int((current_time - datetime.fromisoformat(orchestrator_status_cache["timestamp"].replace('Z', '+00:00')).replace(tzinfo=None)).total_seconds()) if orchestrator_status_cache["timestamp"] else None,
            "background_process": background_process_info,
            "overall_health": "HEALTHY" if (is_active or background_process_info["is_running"]) else "UNHEALTHY",
            "connection_method": "BACKGROUND_PROCESS" if background_process_info["is_running"] else "HEARTBEAT_ONLY"
        }
        
        return {
            "orchestrator_active": is_active or background_process_info["is_running"],
            "status": orchestrator_status_cache["status"] if is_active else ("BACKGROUND_RUNNING" if background_process_info["is_running"] else "INACTIVE"),
            "last_update": orchestrator_status_cache["timestamp"],
            "stats": orchestrator_status_cache["stats"],
            "details": orchestrator_status_cache["details"],
            "time_since_update": diagnostics["heartbeat_age_seconds"],
            "diagnostics": diagnostics,
            "background_control": background_process_info
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ live —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return {
            "orchestrator_active": False,
            "status": "ERROR",
            "error": str(e),
            "diagnostics": {
                "overall_health": "ERROR",
                "connection_method": "NONE"
            }
        }

# === AI ORCHESTRATOR COMMANDS ===

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è AI Orchestrator
orchestrator_commands = []

@app.get("/api/ai/orchestrator-commands")
async def get_orchestrator_commands():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è AI Orchestrator"""
    global orchestrator_commands
    return orchestrator_commands

@app.post("/api/ai/orchestrator-commands")
async def add_orchestrator_command(command: dict):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è AI Orchestrator"""
    global orchestrator_commands
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID –∏ timestamp
    command_with_id = {
        "id": len(orchestrator_commands) + 1,
        "timestamp": datetime.now().isoformat(),
        **command
    }
    
    orchestrator_commands.append(command_with_id)
    
    return {"success": True, "command_id": command_with_id["id"]}

@app.delete("/api/ai/orchestrator-commands/{command_id}")
async def mark_command_processed(command_id: int):
    """–ü–æ–º–µ—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é (—É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏)"""
    global orchestrator_commands
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞
    orchestrator_commands = [cmd for cmd in orchestrator_commands if cmd["id"] != command_id]
    
    return {"success": True, "message": f"–ö–æ–º–∞–Ω–¥–∞ {command_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è"}

# === –ö–û–ù–ï–¶ AI ORCHESTRATOR COMMANDS ===

# === AI ORCHESTRATOR BACKGROUND CONTROL ===

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ AI Orchestrator
orchestrator_process = None
orchestrator_logs = []  # –ë—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π)

@app.post("/api/ai/orchestrator/start-background")
async def start_orchestrator_background():
    """–ó–∞–ø—É—Å–∫ AI Orchestrator –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    global orchestrator_process
    
    try:
        # AI Orchestrator —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Celery - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Celery client –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis
            celery_client.control.inspect().ping()
        except Exception as e:
            return {
                "success": False,
                "message": f"Celery client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}",
                "status": "celery_unavailable"
            }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º AI Orchestrator —á–µ—Ä–µ–∑ Celery task
        task = celery_client.send_task(
            'tasks.trigger_ai_processing',
            args=[None, False],  # bot_id=None (–≤—Å–µ –±–æ—Ç—ã), force_reprocess=False
            kwargs={}
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –∑–∞–ø—É—Å–∫–µ
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "level": "INFO",
            "message": f"AI Orchestrator –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (Task ID: {task.id})"
        }
        orchestrator_logs.append(log_entry)
        
        return {
            "success": True,
            "message": "AI Orchestrator —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
            "status": "started",
            "task_id": task.id
        }
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ AI Orchestrator: {str(e)}"
        print(f"‚ùå {error_msg}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "level": "ERROR",
            "message": error_msg
        }
        orchestrator_logs.append(log_entry)
        
        return {
            "success": False,
            "message": error_msg,
            "status": "error"
        }

@app.post("/api/ai/orchestrator/stop-background")
async def stop_orchestrator_background():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI Orchestrator —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    global orchestrator_process
    
    try:
        # –° Celery tasks –Ω–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        # –ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "level": "INFO",
            "message": "AI Orchestrator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Celery tasks –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è)"
        }
        orchestrator_logs.append(log_entry)
        
        orchestrator_process = None
        
        return {
            "success": True,
            "message": "AI Orchestrator —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            "status": "stopped",
            "note": "Celery tasks –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è"
        }
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ AI Orchestrator: {str(e)}"
        print(f"‚ùå {error_msg}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "level": "ERROR",
            "message": error_msg
        }
        orchestrator_logs.append(log_entry)
        
        return {
            "success": False,
            "message": error_msg,
            "status": "error"
        }

@app.post("/api/ai/orchestrator/restart")
async def restart_orchestrator():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ AI Orchestrator"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        stop_result = await stop_orchestrator_background()
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        import asyncio
        await asyncio.sleep(2)
        
        # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º
        start_result = await start_orchestrator_background()
        
        if start_result["success"]:
            return {
                "success": True,
                "message": "AI Orchestrator —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω",
                "status": "restarted",
                "stop_result": stop_result,
                "start_result": start_result
            }
        else:
            return {
                "success": False,
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ AI Orchestrator",
                "status": "restart_failed",
                "stop_result": stop_result,
                "start_result": start_result
            }
            
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ AI Orchestrator: {str(e)}"
        print(f"‚ùå {error_msg}")
        
        return {
            "success": False,
            "message": error_msg,
            "status": "error"
        }

@app.get("/api/ai/orchestrator/logs")
async def get_orchestrator_logs(limit: int = 50):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ AI Orchestrator"""
    global orchestrator_logs
    
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ)
        recent_logs = orchestrator_logs[-limit:] if len(orchestrator_logs) > limit else orchestrator_logs
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
        process_info = {
            "is_running": orchestrator_process is not None and orchestrator_process.poll() is None,
            "process_id": orchestrator_process.pid if orchestrator_process and orchestrator_process.poll() is None else None
        }
        
        return {
            "success": True,
            "logs": recent_logs,
            "total_logs": len(orchestrator_logs),
            "process_info": process_info,
            "retrieved_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}"
        print(f"‚ùå {error_msg}")
        
        return {
            "success": False,
            "message": error_msg,
            "logs": [],
            "process_info": {"is_running": False, "process_id": None}
        }

# === –ö–û–ù–ï–¶ AI ORCHESTRATOR BACKGROUND CONTROL ===

# === –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• ===

@app.delete("/api/data/clear-all")
async def clear_all_data(
    confirm: bool = False,
    include_posts: bool = False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï —É–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã
    include_ai_results: bool = True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    if not confirm:
        raise HTTPException(status_code=400, detail="–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ confirm=true")
    
    try:
        deleted_stats = {
            "posts_cache": 0,
            "processed_data": 0,
            "posts_reset_to_pending": 0,
            "operation": "clear_all_data",
            "timestamp": datetime.now().isoformat()
        }
        
        # 1. –û—á–∏—Å—Ç–∫–∞ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê)
        if include_ai_results:
            ai_results_count = db.query(func.count(ProcessedData.id)).scalar()
            db.query(ProcessedData).delete()
            deleted_stats["processed_data"] = ai_results_count
            
            # –í –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –Ω–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ processing_status
            # –°—Ç–∞—Ç—É—Å—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ processed_data.processing_status –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
            # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Å—Ç–∞—Ç—É—Å—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            deleted_stats["posts_reset_to_pending"] = 0  # –ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ –≤ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
            
        # 2. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ—Å—Ç–æ–≤
        if include_posts:
            posts_count = db.query(func.count(PostCache.id)).scalar()
            db.query(PostCache).delete()
            deleted_stats["posts_cache"] = posts_count
            
        db.commit()
        
        logger.info(f"üßπ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–•: {deleted_stats}")
        
        return {
            "success": True,
            "message": "AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã, —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω",
            "deleted_stats": deleted_stats
        }
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@app.delete("/api/data/clear-by-channel/{channel_id}")
async def clear_data_by_channel(
    channel_id: int,
    confirm: bool = False,
    include_posts: bool = False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï —É–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã
    include_ai_results: bool = True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª—è–µ—Ç AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–Ω–∞–ª–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    if not confirm:
        raise HTTPException(status_code=400, detail="–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ confirm=true")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel = db.query(Channel).filter(Channel.id == channel_id).first()
        if not channel:
            raise HTTPException(status_code=404, detail=f"–ö–∞–Ω–∞–ª —Å ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        deleted_stats = {
            "channel_id": channel_id,
            "channel_name": channel.channel_name,
            "posts_cache": 0,
            "processed_data": 0,
            "posts_reset_to_pending": 0,
            "operation": "clear_by_channel"
        }
        
        # 1. –û—á–∏—Å—Ç–∫–∞ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if include_ai_results:
            # –ù–∞–π—Ç–∏ –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞
            channel_posts = db.query(PostCache.id).filter(
                PostCache.channel_telegram_id == channel.telegram_id
            ).all()
            
            if channel_posts:
                post_ids = [post.id for post in channel_posts]
                
                # –£–¥–∞–ª–∏—Ç—å AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                ai_count = db.query(ProcessedData).filter(
                    ProcessedData.post_id.in_(post_ids)
                ).count()
                
                db.query(ProcessedData).filter(
                    ProcessedData.post_id.in_(post_ids)
                ).delete(synchronize_session=False)
                
                deleted_stats["processed_data"] = ai_count
                
                # –í –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å—Ç–∞—Ç—É—Å—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ processed_data
                # –£–¥–∞–ª–µ–Ω–∏–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ "—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç" —Å—Ç–∞—Ç—É—Å—ã
                deleted_stats["posts_reset_to_pending"] = 0  # –ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ –≤ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
        
        # 2. –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤
        if include_posts:
            posts_count = db.query(PostCache).filter(
                PostCache.channel_telegram_id == channel.telegram_id
            ).count()
            
            db.query(PostCache).filter(
                PostCache.channel_telegram_id == channel.telegram_id
            ).delete()
            
            deleted_stats["posts_cache"] = posts_count
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        
        return {
            "success": True,
            "message": f"AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–Ω–∞–ª–∞ '{channel.channel_name}' –æ—á–∏—â–µ–Ω—ã, —Å—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω",
            "deleted_stats": deleted_stats
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞: {str(e)}")

@app.delete("/api/data/clear-by-bot/{bot_id}")
async def clear_data_by_bot(
    bot_id: int,
    confirm: bool = False,
    include_posts: bool = False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï —É–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ –±–æ—Ç—É
    include_ai_results: bool = True,
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª—è–µ—Ç AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ—Ç–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    if not confirm:
        raise HTTPException(status_code=400, detail="–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ confirm=true")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
        bot = db.query(PublicBot).filter(PublicBot.id == bot_id).first()
        if not bot:
            raise HTTPException(status_code=404, detail=f"–ë–æ—Ç —Å ID {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        deleted_stats = {
            "bot_id": bot_id,
            "bot_name": bot.name,
            "posts_cache": 0,
            "processed_data": 0,
            "posts_reset_to_pending": 0,
            "operation": "clear_by_bot",
            "timestamp": datetime.now().isoformat()
        }
        
        # 1. –û—á–∏—Å—Ç–∫–∞ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ—Ç–∞
        if include_ai_results:
            ai_results_count = db.query(func.count(ProcessedData.id)).filter(
                ProcessedData.public_bot_id == bot_id
            ).scalar()
            
            db.query(ProcessedData).filter(
                ProcessedData.public_bot_id == bot_id
            ).delete()
            
            deleted_stats["processed_data"] = ai_results_count
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞ –Ω–∞ "pending"
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–æ—Ç–æ–º
            bot_channels = db.query(BotChannel.channel_id).filter(
                BotChannel.public_bot_id == bot_id
            ).subquery()
            
            # –ü–æ–ª—É—á–∞–µ–º telegram_id —ç—Ç–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
            channel_telegram_ids = db.query(Channel.telegram_id).filter(
                Channel.id.in_(db.query(bot_channels.c.channel_id))
            ).all()
            
            telegram_ids = [row[0] for row in channel_telegram_ids]
            
            if telegram_ids:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞
                posts_reset_count = db.query(PostCache).filter(
                    PostCache.channel_telegram_id.in_(telegram_ids),
                    PostCache.processing_status != "pending"
                ).count()
                
                db.query(PostCache).filter(
                    PostCache.channel_telegram_id.in_(telegram_ids),
                    PostCache.processing_status != "pending"
                ).update({"processing_status": "pending"}, synchronize_session=False)
                
                deleted_stats["posts_reset_to_pending"] = posts_reset_count
        
        # 2. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        if include_posts:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–æ—Ç–æ–º
            bot_channels = db.query(BotChannel.channel_id).filter(
                BotChannel.public_bot_id == bot_id
            ).subquery()
            
            # –ü–æ–ª—É—á–∞–µ–º telegram_id —ç—Ç–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
            channel_telegram_ids = db.query(Channel.telegram_id).filter(
                Channel.id.in_(db.query(bot_channels.c.channel_id))
            ).all()
            
            telegram_ids = [row[0] for row in channel_telegram_ids]
            
            if telegram_ids:
                posts_count = db.query(func.count(PostCache.id)).filter(
                    PostCache.channel_telegram_id.in_(telegram_ids)
                ).scalar()
                
                db.query(PostCache).filter(
                    PostCache.channel_telegram_id.in_(telegram_ids)
                ).delete(synchronize_session=False)
                
                deleted_stats["posts_cache"] = posts_count
                deleted_stats["affected_channels"] = len(telegram_ids)
        
        db.commit()
        
        logger.info(f"üßπ –û–ß–ò–°–¢–ö–ê –ü–û –ë–û–¢–£ {bot.name}: {deleted_stats}")
        
        return {
            "success": True,
            "message": f"AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ—Ç–∞ '{bot.name}' –æ—á–∏—â–µ–Ω—ã, —Å—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω",
            "deleted_stats": deleted_stats
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ {bot_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞: {str(e)}")

@app.get("/api/data/cleanup-preview")
async def get_cleanup_preview(
    cleanup_type: str = Query(..., regex="^(all|channel|bot)$"),
    target_id: Optional[int] = None,
    db: Session = Depends(get_db)
):
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"""
    try:
        preview = {
            "cleanup_type": cleanup_type,
            "target_id": target_id,
            "posts_count": 0,
            "ai_results_count": 0,
            "affected_channels": [],
            "affected_bots": [],
            "size_estimate": "0 MB",
            "timestamp": datetime.now().isoformat()
        }
        
        if cleanup_type == "all":
            # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            preview["posts_count"] = db.query(func.count(PostCache.id)).scalar()
            preview["ai_results_count"] = db.query(func.count(ProcessedData.id)).scalar()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –±–æ—Ç–æ–≤
            channels = db.query(Channel.id, Channel.channel_name, Channel.telegram_id).all()
            bots = db.query(PublicBot.id, PublicBot.name).all()
            
            preview["affected_channels"] = [
                {"id": ch.id, "name": ch.channel_name, "telegram_id": ch.telegram_id} 
                for ch in channels
            ]
            preview["affected_bots"] = [
                {"id": bot.id, "name": bot.name} 
                for bot in bots
            ]
            
        elif cleanup_type == "channel" and target_id:
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ –∫–∞–Ω–∞–ª—É
            channel = db.query(Channel).filter(Channel.id == target_id).first()
            if not channel:
                raise HTTPException(status_code=404, detail=f"–ö–∞–Ω–∞–ª —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            preview["posts_count"] = db.query(func.count(PostCache.id)).filter(
                PostCache.channel_telegram_id == channel.telegram_id
            ).scalar()
            
            # AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–≤—Å–µ—Ö –±–æ—Ç–æ–≤)
            channel_posts = db.query(PostCache.id).filter(
                PostCache.channel_telegram_id == channel.telegram_id
            ).subquery()
            
            preview["ai_results_count"] = db.query(func.count(ProcessedData.id)).filter(
                ProcessedData.post_id.in_(db.query(channel_posts.c.id))
            ).scalar()
            
            preview["affected_channels"] = [
                {"id": channel.id, "name": channel.channel_name, "telegram_id": channel.telegram_id}
            ]
            
            # –ë–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
            bots_using_channel = db.query(PublicBot.id, PublicBot.name).join(
                BotChannel, PublicBot.id == BotChannel.public_bot_id
            ).filter(BotChannel.channel_id == target_id).all()
            
            preview["affected_bots"] = [
                {"id": bot.id, "name": bot.name} 
                for bot in bots_using_channel
            ]
            
        elif cleanup_type == "bot" and target_id:
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ –±–æ—Ç—É
            bot = db.query(PublicBot).filter(PublicBot.id == target_id).first()
            if not bot:
                raise HTTPException(status_code=404, detail=f"–ë–æ—Ç —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            preview["ai_results_count"] = db.query(func.count(ProcessedData.id)).filter(
                ProcessedData.public_bot_id == target_id
            ).scalar()
            
            # –ö–∞–Ω–∞–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–æ—Ç–æ–º
            channels_for_bot = db.query(Channel.id, Channel.channel_name, Channel.telegram_id).join(
                BotChannel, Channel.id == BotChannel.channel_id
            ).filter(BotChannel.public_bot_id == target_id).all()
            
            preview["affected_channels"] = [
                {"id": ch.id, "name": ch.channel_name, "telegram_id": ch.telegram_id} 
                for ch in channels_for_bot
            ]
            preview["affected_bots"] = [{"id": bot.id, "name": bot.name}]
            
            # –ü–æ—Å—Ç—ã –≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö (–µ—Å–ª–∏ –≤–∫–ª—é—á–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –ø–æ—Å—Ç–æ–≤)
            if channels_for_bot:
                telegram_ids = [ch.telegram_id for ch in channels_for_bot]
                preview["posts_count"] = db.query(func.count(PostCache.id)).filter(
                    PostCache.channel_telegram_id.in_(telegram_ids)
                ).scalar()
        
        else:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—á–∏—Å—Ç–∫–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç target_id")
        
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–æ—á–µ–Ω—å –≥—Ä—É–±–∞—è)
        total_records = preview["posts_count"] + preview["ai_results_count"]
        size_mb = round(total_records * 0.005, 2)  # ~5KB –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Å—Ä–µ–¥–Ω–µ–º
        preview["size_estimate"] = f"{size_mb} MB"
        
        return preview
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ preview –æ—á–∏—Å—Ç–∫–∏: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ preview: {str(e)}")

# === –ö–û–ù–ï–¶ –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–û–ô –û–ß–ò–°–¢–ö–ò –î–ê–ù–ù–´–• ===

@app.delete("/api/data/test-cleanup/{channel_id}")
async def test_cleanup_channel(channel_id: int, db: Session = Depends(get_db)):
    """–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏"""
    try:
        logger.info(f"üîç TEST: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel = db.query(Channel).filter(Channel.id == channel_id).first()
        if not channel:
            return {"error": f"–ö–∞–Ω–∞–ª —Å ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        logger.info(f"üîç TEST: –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel.channel_name}")
        
        return {
            "success": True,
            "channel_id": channel_id,
            "channel_name": channel.channel_name,
            "telegram_id": channel.telegram_id,
            "message": "–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç"
        }
        
    except Exception as e:
        logger.error(f"üîç TEST: –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")
        return {"error": str(e)}

# === WEBHOOK ENDPOINTS ===

@app.post("/api/webhooks/bot-changed")
async def bot_changed_webhook(request: dict):
    """
    Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è MultiBotManager –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–æ–≤
    
    Args:
        request: {"bot_id": int, "action": "created|updated|deleted|status_changed"}
    
    Returns:
        {"status": "success", "message": "Webhook processed"}
    """
    try:
        bot_id = request.get("bot_id")
        action = request.get("action", "updated")
        
        if not bot_id:
            raise HTTPException(status_code=400, detail="bot_id is required")
        
        logger.info(f"üîî Webhook –ø–æ–ª—É—á–µ–Ω: bot_id={bot_id}, action={action}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ MultiBotManager —á–µ—Ä–µ–∑ HTTP
        multibot_manager_url = os.getenv("MULTIBOT_MANAGER_URL", "http://localhost:8001")
        
        try:
            import httpx
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{multibot_manager_url}/reload",
                    json={"bot_id": bot_id, "action": action},
                    timeout=5.0
                )
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ MultiBotManager —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–æ—Ç–∞ {bot_id}")
                    return {"status": "success", "message": f"MultiBotManager notified about bot {bot_id}"}
                else:
                    logger.warning(f"‚ö†Ô∏è MultiBotManager –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª: {response.status_code}")
                    return {"status": "partial", "message": f"Webhook received but MultiBotManager unavailable"}
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è MultiBotManager: {e}")
            # Webhook –≤—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º –¥–∞–∂–µ –µ—Å–ª–∏ MultiBotManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return {"status": "partial", "message": f"Webhook received but MultiBotManager error: {str(e)}"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        raise HTTPException(status_code=500, detail=f"Webhook processing failed: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 
