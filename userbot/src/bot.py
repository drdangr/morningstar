import asyncio
import logging
import os
import sys
from datetime import datetime, timedelta
from pathlib import Path

import aiohttp
from dotenv import load_dotenv
from telethon import TelegramClient
from telethon.errors import FloodWaitError, SessionPasswordNeededError

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
def find_and_load_env():
    """–ü–æ–∏—Å–∫ .env —Ñ–∞–π–ª–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø—É—Ç–∏
    current_file = Path(__file__).resolve()
    current_dir = current_file.parent  # userbot/src
    userbot_dir = current_dir.parent   # userbot
    project_root = userbot_dir.parent  # MorningStarBot3
    
    # –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
    possible_paths = [
        current_dir / '.env',              # userbot/src/.env
        userbot_dir / '.env',              # userbot/.env
        project_root / '.env',             # MorningStarBot3/.env
        Path('.env'),                      # —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞
        Path('../.env'),                   # –ø–∞–ø–∫–∞ –≤—ã—à–µ
        Path('../../.env'),                # –¥–≤–µ –ø–∞–ø–∫–∏ –≤—ã—à–µ
    ]
    
    print("üîç –ü–æ–∏—Å–∫ .env —Ñ–∞–π–ª–∞...")
    print(f"üìÇ –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: {current_file}")
    print(f"üìÇ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {project_root}")
    
    for i, env_path in enumerate(possible_paths, 1):
        abs_path = env_path.resolve()
        print(f"   {i}. –ü—Ä–æ–≤–µ—Ä—è—é: {abs_path}")
        
        if abs_path.exists():
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª: {abs_path}")
            load_dotenv(abs_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            test_vars = ['API_ID', 'API_HASH', 'PHONE']
            loaded_vars = {var: os.getenv(var) for var in test_vars}
            
            print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
            for var, value in loaded_vars.items():
                status = "‚úÖ" if value else "‚ùå"
                display_value = f"{value[:10]}..." if value and len(str(value)) > 10 else value
                print(f"   {status} {var}: {display_value}")
            
            if all(loaded_vars.values()):
                print("üéâ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                return True
            else:
                print("‚ö†Ô∏è –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                continue
    
    print("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print("üí° –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—É—Ç–∏:")
    for path in possible_paths:
        print(f"   - {path.resolve()}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ .env —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
    print("\nüîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö .env —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ:")
    try:
        for env_file in project_root.rglob('.env'):
            print(f"   üîç –ù–∞–π–¥–µ–Ω: {env_file}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    return False

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("üöÄ –ó–∞–ø—É—Å–∫ MorningStar Userbot...")
if not find_and_load_env():
    print("\nüí° –†–µ—à–µ–Ω–∏—è:")
    print("   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env –≤ –ø–∞–ø–∫—É userbot/src/")
    print("   2. –ò–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ .env –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞")
    sys.exit(1)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è –ª–æ–≥–æ–≤ –∏ —Å–µ—Å—Å–∏–π
def get_app_paths():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    if os.path.exists('/app'):  # Docker —Å—Ä–µ–¥–∞
        logs_dir = Path('/app/logs')
        session_dir = Path('/app/session')
    else:  # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        base_dir = Path(__file__).parent.parent  # userbot/
        logs_dir = base_dir / 'logs'
        session_dir = base_dir / 'session'
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    logs_dir.mkdir(exist_ok=True)
    session_dir.mkdir(exist_ok=True)
    
    return logs_dir, session_dir

LOGS_DIR, SESSION_DIR = get_app_paths()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = os.getenv("LOG_LEVEL", "INFO")
logging.basicConfig(
    level=getattr(logging, log_level.upper()),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOGS_DIR / "userbot.log"),
        logging.StreamHandler(sys.stdout),
    ],
)
logger = logging.getLogger(__name__)

# –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"
if DEBUG_MODE:
    logging.getLogger().setLevel(logging.DEBUG)
    print("üîç –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    API_ID = int(os.getenv("API_ID", 0))
    API_HASH = os.getenv("API_HASH", "")
    PHONE = os.getenv("PHONE", "")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not all([API_ID, API_HASH, PHONE]):
        raise ValueError(
            "–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: API_ID, API_HASH, PHONE"
        )

    if API_ID == 0:
        raise ValueError("API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0")

except ValueError as e:
    logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %s", e)
    logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    logger.error("üìã –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: API_ID, API_HASH, PHONE")
    print("\nüîß –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ - –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ .env")
    sys.exit(1)

# –ü—É—Ç–∏ —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ —Å—Ä–µ–¥—É
SESSION_NAME = str(SESSION_DIR / "morningstar")
N8N_WEBHOOK_URL = os.getenv("N8N_WEBHOOK_URL", "")
N8N_WEBHOOK_TOKEN = os.getenv("N8N_WEBHOOK_TOKEN", "")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
CHANNELS_ENV = os.getenv("CHANNELS", "")
print(f"üîç CHANNELS_ENV –∏–∑ .env: '{CHANNELS_ENV}'")

if CHANNELS_ENV:
    TEST_CHANNELS = [ch.strip() for ch in CHANNELS_ENV.split(",") if ch.strip()]
else:
    TEST_CHANNELS = [
        "@rt_russian",
        "@rian_ru", 
        "@lentachold"
    ]

print(f"üì° –ò—Ç–æ–≥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã: {TEST_CHANNELS}")

logger.info("üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: %s", LOGS_DIR)
logger.info("üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: %s", SESSION_DIR)
logger.info("üì° –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: %s", TEST_CHANNELS)
logger.info("üîó N8N Webhook: %s", "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if N8N_WEBHOOK_URL else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


class MorningStarUserbot:
    def __init__(self):
        self.client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
        self.session = None
        self.me = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è userbot"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ userbot...")
            await self.client.start(phone=PHONE)
            logger.info("‚úÖ Userbot —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
            self.me = await self.client.get_me()
            username = self.me.username or "No username"
            logger.info("üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: %s (@%s)", self.me.first_name, username)
            return True

        except SessionPasswordNeededError:
            logger.error("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!")
            logger.error(
                "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TWO_FACTOR_PASSWORD"
            )
            raise
        except FloodWaitError as e:
            logger.error("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ñ–¥–∏—Ç–µ %s —Å–µ–∫—É–Ω–¥", e.seconds)
            raise
        except Exception as e:
            logger.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: %s", e)
            raise

    async def get_channel_info(self, channel_username):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            channel = await self.client.get_entity(channel_username)
            logger.debug("üì∫ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: %s (ID: %s)", channel.title, channel.id)
            return channel
        except Exception as e:
            logger.error(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ %s: %s", channel_username, e
            )
            return None

    async def get_channel_posts(self, channel_username, hours=72):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            channel = await self.get_channel_info(channel_username)
            if not channel:
                return []

            logger.info("üìñ –ß–∏—Ç–∞—é –∫–∞–Ω–∞–ª: %s", channel.title)

            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            time_limit = datetime.now() - timedelta(hours=hours)

            posts = []
            message_count = 0

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç)
            async for message in self.client.iter_messages(channel, limit=200):
                message_count += 1

                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                try:
                    message_date = message.date.replace(tzinfo=None)
                    if message_date < time_limit:
                        logger.debug(
                            "‚è∞ –°–æ–æ–±—â–µ–Ω–∏–µ %s —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ: %s", message.id, message_date
                        )
                        break
                except Exception as e:
                    logger.debug("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è %s: %s", message.id, e)
                    continue

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if not message.text and not message.media:
                    logger.debug("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ %s", message.id)
                    continue

                post_data = {
                    "id": message.id,
                    "channel_id": channel.id,
                    "channel_username": channel_username,
                    "channel_title": channel.title,
                    "text": message.text or "",
                    "date": message.date.isoformat(),
                    "views": message.views or 0,
                    "forwards": message.forwards or 0,
                    "replies": 0,  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    "url": f"https://t.me/{channel_username.replace('@', '')}/{message.id}",
                    "media_type": "text"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                }

                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ replies
                try:
                    if hasattr(message, "replies") and message.replies is not None:
                        replies_count = getattr(message.replies, "replies", 0)
                        post_data["replies"] = replies_count if replies_count else 0
                except Exception as e:
                    logger.debug("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ replies –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è %s: %s", message.id, e)

                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
                try:
                    if message.media:
                        if hasattr(message.media, "photo"):
                            post_data["media_type"] = "photo"
                        elif hasattr(message.media, "document") and message.media.document:
                            mime_type = getattr(message.media.document, "mime_type", "")
                            if mime_type:
                                if "video" in mime_type:
                                    post_data["media_type"] = "video"
                                elif "audio" in mime_type:
                                    post_data["media_type"] = "audio"
                                else:
                                    post_data["media_type"] = "document"
                            else:
                                post_data["media_type"] = "document"
                        else:
                            post_data["media_type"] = "other"
                except Exception as e:
                    logger.debug("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è %s: %s", message.id, e)

                posts.append(post_data)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
                logger.debug("üìù –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç %s: %s", message.id, (message.text or "")[:100])

            logger.info(
                "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ %s –ø–æ—Å—Ç–æ–≤ –∏–∑ %s (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ %s —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ %s —á–∞—Å–æ–≤)",
                len(posts),
                channel.title,
                message_count,
                hours,
            )
            return posts

        except FloodWaitError as e:
            logger.warning(
                "‚è∞ Rate limit –¥–ª—è –∫–∞–Ω–∞–ª–∞ %s. –ñ–¥–µ–º %s —Å–µ–∫—É–Ω–¥",
                channel_username,
                e.seconds,
            )
            await asyncio.sleep(e.seconds)
            return []
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ %s: %s", channel_username, e)
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
            return []

    async def send_to_n8n(self, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ n8n webhook"""
        if not N8N_WEBHOOK_URL:
            logger.warning("‚ö†Ô∏è N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É")
            return False

        headers = {
            "Content-Type": "application/json",
            "User-Agent": "MorningStarUserbot/1.0",
        }

        if N8N_WEBHOOK_TOKEN:
            headers["Authorization"] = f"Bearer {N8N_WEBHOOK_TOKEN}"

        try:
            timeout = aiohttp.ClientTimeout(total=30)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                logger.debug("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≤ n8n: %s", N8N_WEBHOOK_URL)

                async with session.post(
                    N8N_WEBHOOK_URL, json=data, headers=headers
                ) as response:
                    if response.status == 200:
                        logger.info(
                            "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ n8n: %s", response.status
                        )
                        return True
                    else:
                        response_text = await response.text()
                        logger.error(
                            "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n: %s - %s",
                            response.status,
                            response_text,
                        )
                        return False

        except asyncio.TimeoutError:
            logger.error("‚è∞ Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ n8n")
            return False
        except Exception as e:
            logger.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ n8n: %s", e)
            return False

    async def collect_and_send(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        all_posts = []
        successful_channels = 0
        failed_channels = 0

        logger.info("üìä –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –ø–æ—Å—Ç–æ–≤ –∏–∑ %s –∫–∞–Ω–∞–ª–æ–≤...", len(TEST_CHANNELS))

        for i, channel in enumerate(TEST_CHANNELS):
            logger.info(
                "üì∫ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞–Ω–∞–ª %s/%s: %s", i + 1, len(TEST_CHANNELS), channel
            )

            try:
                posts = await self.get_channel_posts(channel, hours=72)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 72 —á–∞—Å–æ–≤
                if posts:
                    all_posts.extend(posts)
                    successful_channels += 1
                    logger.info("‚úÖ %s: –ø–æ–ª—É—á–µ–Ω–æ %s –ø–æ—Å—Ç–æ–≤", channel, len(posts))
                else:
                    logger.warning("‚ö†Ô∏è %s: –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", channel)

            except Exception as e:
                failed_channels += 1
                logger.error("‚ùå %s: –æ—à–∏–±–∫–∞ - %s", channel, e)

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limits
            if i < len(TEST_CHANNELS) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–Ω–∞–ª–∞
                await asyncio.sleep(3)

        logger.info(
            "üìà –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω: —É—Å–ø–µ—à–Ω–æ %s, –æ—à–∏–±–æ–∫ %s",
            successful_channels,
            failed_channels,
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ n8n
        if all_posts:
            webhook_data = {
                "timestamp": datetime.now().isoformat(),
                "collection_stats": {
                    "total_posts": len(all_posts),
                    "successful_channels": successful_channels,
                    "failed_channels": failed_channels,
                    "channels_processed": TEST_CHANNELS,
                },
                "posts": all_posts,
            }

            success = await self.send_to_n8n(webhook_data)
            if success:
                logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %s –ø–æ—Å—Ç–æ–≤ –≤ n8n", len(all_posts))
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

        return all_posts

    async def run_once(self):
        """–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        await self.start()
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –ø–æ—Å—Ç–æ–≤...")
        posts = await self.collect_and_send()
        logger.info("‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: %s", len(posts))
        return posts

    async def run_periodic(self, interval_minutes=30):
        """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞"""
        await self.start()

        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –∫–∞–∂–¥—ã–µ %s –º–∏–Ω—É—Ç", interval_minutes)

        while True:
            try:
                logger.info("üìä –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä...")
                posts = await self.collect_and_send()
                logger.info("‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–±—Ä–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: %s", len(posts))

                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                sleep_seconds = interval_minutes * 60
                logger.info(
                    "üò¥ –û–∂–∏–¥–∞–Ω–∏–µ %s –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±–æ—Ä–∞...", interval_minutes
                )
                await asyncio.sleep(sleep_seconds)

            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error("üí• –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º —Ü–∏–∫–ª–µ: %s", e)
                logger.info("‚è≥ –ñ–¥—É 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

    async def run(self):
        """–ó–∞–ø—É—Å–∫ userbot –≤ —Ä–µ–∂–∏–º–µ, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        mode = os.getenv("USERBOT_MODE", "once")  # 'once' –∏–ª–∏ 'periodic'
        interval = (
            int(os.getenv("POLLING_INTERVAL", 1800)) // 60
        )  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã

        logger.info("üéØ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: %s", mode)

        if mode == "periodic":
            await self.run_periodic(interval_minutes=interval)
        else:
            await self.run_once()

    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            await self.client.disconnect()
            logger.info("üîå Userbot –æ—Ç–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: %s", e)


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    userbot = MorningStarUserbot()

    try:
        await userbot.run()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", e)
        raise
    finally:
        await userbot.disconnect()


if __name__ == "__main__":
    logger.info("üåÖ MorningStar Userbot v1.0")
    asyncio.run(main())
