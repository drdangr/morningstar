#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json

def check_latest_digest_details():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–°–õ–ï–î–ù–ï–ì–û –î–ê–ô–î–ñ–ï–°–¢–ê")
    print("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
        response = requests.get('http://localhost:8000/api/digests?limit=1')
        if response.status_code == 200:
            digests = response.json()
            if digests:
                latest = digests[0]
                digest_id = latest['digest_id']
                
                print(f"üìÑ –î–∞–π–¥–∂–µ—Å—Ç ID: {digest_id}")
                print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {latest.get('original_posts', 'N/A')}")
                print(f"üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {latest['relevant_posts']}")
                print(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {latest['channels_processed']}")
                print(f"üìà Avg importance: {latest['avg_importance']}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                data_response = requests.get(f'http://localhost:8000/api/digests/{digest_id}/data')
                if data_response.status_code == 200:
                    digest_data = data_response.json()
                    
                    print(f"\nüìã –ü–û–õ–ù–´–ï –î–ê–ù–ù–´–ï –î–ê–ô–î–ñ–ï–°–¢–ê:")
                    print(f"   –í–µ—Ä—Å–∏—è: {digest_data.get('relevance_parsing_version', 'Unknown')}")
                    print(f"   –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {digest_data.get('batch_processing_applied', False)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    ai_stats = digest_data.get('ai_analysis_stats', {})
                    if ai_stats:
                        print(f"\nü§ñ AI –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                        print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {ai_stats.get('total_analyzed', 0)}")
                        print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ: {ai_stats.get('relevant_posts', 0)}")
                        print(f"   –ë–∞—Ç—á–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {ai_stats.get('batches_processed', 0)}")
                        print(f"   Avg importance: {ai_stats.get('avg_importance', 0)}")
                        print(f"   Avg urgency: {ai_stats.get('avg_urgency', 0)}")
                        print(f"   Avg significance: {ai_stats.get('avg_significance', 0)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
                    processed_channels = digest_data.get('processed_channels', {})
                    print(f"\nüì∫ –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –ö–ê–ù–ê–õ–´ ({len(processed_channels)}):")
                    
                    for channel_key, channel_data in processed_channels.items():
                        title = channel_data.get('channel_title', 'Unknown')
                        total_posts = channel_data.get('all_processed_posts', 0)
                        relevant_posts = channel_data.get('relevant_posts', 0)
                        ai_processed = channel_data.get('ai_processed', False)
                        
                        print(f"   üì∫ {title}:")
                        print(f"      –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}")
                        print(f"      –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {relevant_posts}")
                        print(f"      AI –æ–±—Ä–∞–±–æ—Ç–∫–∞: {ai_processed}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                        posts = channel_data.get('posts', [])
                        if posts:
                            print(f"      üìù –ü—Ä–∏–º–µ—Ä—ã –ø–æ—Å—Ç–æ–≤:")
                            for i, post in enumerate(posts[:2]):
                                summary = post.get('ai_summary', 'No summary')
                                category = post.get('post_category', 'No category')
                                importance = post.get('ai_importance', 0)
                                print(f"         {i+1}. Category: {category}, Importance: {importance}")
                                print(f"            Summary: {summary[:100]}...")
                
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {data_response.status_code}")
                    
                return True
            else:
                print("‚ùå –î–∞–π–¥–∂–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê N8N WORKFLOW –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    success = check_latest_digest_details()
    
    if success:
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ N8N workflow –¥–ª—è OpenAI node")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ OpenAI")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á OpenAI –≤ N8N")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI node (JSON output, model, etc.)")
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")

if __name__ == "__main__":
    main() 