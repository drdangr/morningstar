#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Stage 3 - AI Processing & Topic-based Filtering
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ—Ç userbot –≤ Stage 2
"""

import asyncio
import aiohttp
import json
from datetime import datetime

# N8N webhook URL
WEBHOOK_URL = "http://localhost:5678/webhook/telegram-posts"

# –î–∞–Ω–Ω—ã–µ –≤ –¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–∞–∫ –æ—Ç userbot Stage 2
real_format_data = {
    "timestamp": "2025-12-07T22:32:15.271042",
    "collection_stats": {
        "total_posts": 4,
        "successful_channels": 2,
        "failed_channels": 0,
        "channels_processed": [
            "@ai_news",
            "@tech_trends"
        ]
    },
    "posts": [
        {
            "id": 12345,
            "channel_id": 1001,
            "channel_username": "@ai_news",
            "channel_title": "AI News",
            "text": "OpenAI –≤—ã–ø—É—Å—Ç–∏–ª –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å GPT-5, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏ –ø–æ –≤—Å–µ–º –º–µ—Ç—Ä–∏–∫–∞–º. –ú–æ–¥–µ–ª—å —Å–ø–æ—Å–æ–±–Ω–∞ —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø–∏—Å–∞—Ç—å –∫–æ–¥ –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ. –î–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ API —É–∂–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ.",
            "date": "2025-12-07T20:00:00+00:00",
            "views": 125000,
            "forwards": 890,
            "replies": 45,
            "url": "https://t.me/ai_news/12345",
            "media_type": "text"
        },
        {
            "id": 12346,
            "channel_id": 1001,
            "channel_username": "@ai_news",
            "channel_title": "AI News",
            "text": "–°–µ–≥–æ–¥–Ω—è —É –º–µ–Ω—è –±—ã–ª–æ –≤–∫—É—Å–Ω–æ–µ –º–æ—Ä–æ–∂–µ–Ω–æ–µ üç¶ –ê –µ—â–µ —è –ø–æ—à–µ–ª –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ —Ç—è–∂–µ–ª–æ–π!",
            "date": "2025-12-07T19:30:00+00:00",
            "views": 500,
            "forwards": 2,
            "replies": 1,
            "url": "https://t.me/ai_news/12346",
            "media_type": "text"
        },
        {
            "id": 54321,
            "channel_id": 1002,
            "channel_username": "@tech_trends",
            "channel_title": "Tech Trends",
            "text": "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç Bitcoin –Ω–∞ 15% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é. –≠–∫—Å–ø–µ—Ä—Ç—ã —Å–≤—è–∑—ã–≤–∞—é—Ç —ç—Ç–æ —Å –ø—Ä–∏–Ω—è—Ç–∏–µ–º –Ω–æ–≤—ã—Ö —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä –≤ –ï–≤—Ä–æ–ø–µ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π. –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª –æ—Å—Ç–∞—é—Ç—Å—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–º–∏.",
            "date": "2025-12-07T18:45:00+00:00",
            "views": 87500,
            "forwards": 520,
            "replies": 78,
            "url": "https://t.me/tech_trends/54321",
            "media_type": "text"
        },
        {
            "id": 54322,
            "channel_id": 1002,
            "channel_username": "@tech_trends",
            "channel_title": "Tech Trends",
            "text": "üéÅüéâ –°–£–ü–ï–† –ê–ö–¶–ò–Ø!!! üéâüéÅ –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —Å–∫–∏–¥–∫–∞ 90% –Ω–∞ –∫—É—Ä—Å –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ!!! üí∞üí∞üí∞ –ñ–º–∏ —Å—Å—ã–ª–∫—É –±—ã—Å—Ç—Ä–µ–µ!!! –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 3 –º–µ—Å—Ç–∞!!!",
            "date": "2025-12-07T17:15:00+00:00",
            "views": 1200,
            "forwards": 5,
            "replies": 0,
            "url": "https://t.me/tech_trends/54322",
            "media_type": "text"
        }
    ],
    "webhookUrl": "http://localhost:5678/webhook/telegram-posts",
    "executionMode": "production"
}

async def test_ai_workflow_diagnosis():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å OpenAI —É–∑–ª–æ–º –≤ N8N workflow"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ OpenAI –£–ó–õ–ê")
    print("=" * 60)
    
    backend_url = "http://localhost:8000"
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É COLLECTION_DEPTH_DAYS
    print("\n1. üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É COLLECTION_DEPTH_DAYS...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{backend_url}/api/config/COLLECTION_DEPTH_DAYS") as response:
                if response.status == 200:
                    data = await response.json()
                    collection_days = data.get('value', 1)
                    print(f"‚úÖ COLLECTION_DEPTH_DAYS: {collection_days} –¥–Ω–µ–π")
                    
                    # –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                    estimated_posts_per_day = 50  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                    estimated_total_posts = estimated_posts_per_day * int(collection_days)
                    print(f"üìä –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: ~{estimated_total_posts}")
                    
                    if estimated_total_posts > 100:
                        print(f"‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è OpenAI API")
                        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç MAX_POSTS_FOR_AI_ANALYSIS")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã
    print("\n2. üìà –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{backend_url}/api/digests?limit=3") as response:
                if response.status == 200:
                    digests = await response.json()
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(digests)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤")
                    
                    for i, digest in enumerate(digests):
                        print(f"\n  üìÑ –î–∞–π–¥–∂–µ—Å—Ç {i+1}:")
                        print(f"     ID: {digest.get('digest_id', 'N/A')}")
                        print(f"     –û–±—â–∏–π –ø–æ—Å—Ç–æ–≤: {digest.get('total_posts', 0)}")
                        print(f"     –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {digest.get('relevant_posts', 0)}")
                        print(f"     –ö–∞–Ω–∞–ª–æ–≤: {digest.get('channels_processed', 0)}")
                        print(f"     –í—Ä–µ–º—è: {digest.get('processed_at', 'N/A')}")
                        
                        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–∞
                        try:
                            digest_data = json.loads(digest.get('digest_data', '{}'))
                            original_posts = digest_data.get('summary', {}).get('original_posts', 0)
                            if original_posts > 0:
                                print(f"     üìä –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: {original_posts}")
                                if original_posts > 100:
                                    print(f"     ‚ö†Ô∏è –ú–Ω–æ–≥–æ –ø–æ—Å—Ç–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ OpenAI")
                        except:
                            pass
                            
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 3: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é
    print("\n3. üõ†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ï–®–ï–ù–ò–Æ:")
    print("\n–ü—Ä–æ–±–ª–µ–º–∞: OpenAI API –∑–∞—Ö–ª–µ–±—ã–≤–∞–µ—Ç—Å—è –æ—Ç –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤")
    print("\n–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:")
    print("1. üìâ –î–û–ë–ê–í–ò–¢–¨ –õ–ò–ú–ò–¢ –≤ 'Prepare for AI' node:")
    print("   - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ 50-100 –ø–æ—Å—Ç–æ–≤ –º–∞–∫—Å–∏–º—É–º")
    print("   - –ö–æ–¥: postsForAI = postsForAI.slice(0, 50)")
    
    print("\n2. üìä –£–í–ï–õ–ò–ß–ò–¢–¨ maxTokens –≤ OpenAI node:")
    print("   - –°–µ–π—á–∞—Å: 2000 tokens")
    print("   - –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å: 4000-8000 tokens")
    
    print("\n3. üéØ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –ö–ê–ß–ï–°–¢–í–£:")
    print("   - –û—Ç–±–∏—Ä–∞—Ç—å –ø–æ—Å—Ç—ã —Å views > 1000")
    print("   - –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞")
    
    print("\n4. üìù –†–ê–ó–ë–ò–¢–¨ –ù–ê –ë–ê–¢–ß–ò:")
    print("   - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ 25-30 –ø–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑")
    print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ OpenAI –≤—ã–∑–æ–≤–æ–≤")

if __name__ == "__main__":
    asyncio.run(test_ai_workflow_diagnosis()) 