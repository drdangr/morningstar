#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã: —Å–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ
"""

import requests
import json
from datetime import datetime

BASE_URL = "http://localhost:8000/api"

def test_categories_crud():
    print("üìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô")
    print("=" * 40)
    
    # 1. CREATE - –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    print("1Ô∏è‚É£ CREATE - –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    category_data = {
        "category_name": f"Test_Category_{datetime.now().strftime('%H%M%S')}",
        "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ CRUD",
        "is_active": True
    }
    
    response = requests.post(f"{BASE_URL}/categories", json=category_data)
    if response.status_code == 201:
        category = response.json()
        category_id = category['id']
        print(f"   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID {category_id}, –Ω–∞–∑–≤–∞–Ω–∏–µ '{category['category_name']}'")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code}")
        return None
    
    # 2. READ - –ß—Ç–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    print("2Ô∏è‚É£ READ - –ß—Ç–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    response = requests.get(f"{BASE_URL}/categories/{category_id}")
    if response.status_code == 200:
        print("   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {response.status_code}")
    
    # 3. UPDATE - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    print("3Ô∏è‚É£ UPDATE - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    update_data = {
        "category_name": f"Updated_Category_{datetime.now().strftime('%H%M%S')}",
        "description": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        "is_active": True
    }
    
    response = requests.put(f"{BASE_URL}/categories/{category_id}", json=update_data)
    if response.status_code == 200:
        updated_category = response.json()
        print(f"   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ '{updated_category['category_name']}'")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.status_code}")
        print(f"   Response: {response.text}")
    
    # 4. DELETE - –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    print("4Ô∏è‚É£ DELETE - –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    response = requests.delete(f"{BASE_URL}/categories/{category_id}")
    if response.status_code == 200:
        print("   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        return "SUCCESS"
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
        print(f"   Response: {response.text}")
        return "DELETE_FAILED"

def test_channels_crud():
    print("\nüì∫ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–ù–ê–õ–û–í")
    print("=" * 40)
    
    # 1. CREATE - –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    print("1Ô∏è‚É£ CREATE - –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞...")
    channel_data = {
        "channel_name": f"test_channel_{datetime.now().strftime('%H%M%S')}",
        "telegram_id": int(f"100{datetime.now().strftime('%H%M%S')}"),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        "username": f"test_channel_{datetime.now().strftime('%H%M%S')}",
        "title": f"Test Channel {datetime.now().strftime('%H:%M:%S')}",
        "description": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CRUD",
        "is_active": True
    }
    
    response = requests.post(f"{BASE_URL}/channels", json=channel_data)
    if response.status_code == 201:
        channel = response.json()
        channel_id = channel['id']
        print(f"   ‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: ID {channel_id}, –Ω–∞–∑–≤–∞–Ω–∏–µ '{channel['title']}'")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code}")
        print(f"   Response: {response.text}")
        return None
    
    # 2. READ - –ß—Ç–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    print("2Ô∏è‚É£ READ - –ß—Ç–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞...")
    response = requests.get(f"{BASE_URL}/channels/{channel_id}")
    if response.status_code == 200:
        print("   ‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {response.status_code}")
    
    # 3. UPDATE - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    print("3Ô∏è‚É£ UPDATE - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞...")
    update_data = {
        "channel_name": f"updated_channel_{datetime.now().strftime('%H%M%S')}",
        "telegram_id": channel_data["telegram_id"],  # –¢–æ—Ç –∂–µ ID
        "username": channel_data["username"],
        "title": f"Updated Channel {datetime.now().strftime('%H:%M:%S')}",
        "description": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
        "is_active": True
    }
    
    response = requests.put(f"{BASE_URL}/channels/{channel_id}", json=update_data)
    if response.status_code == 200:
        updated_channel = response.json()
        print(f"   ‚úÖ –ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω: –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ '{updated_channel['title']}'")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.status_code}")
        print(f"   Response: {response.text}")
    
    # 4. DELETE - –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    print("4Ô∏è‚É£ DELETE - –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞...")
    response = requests.delete(f"{BASE_URL}/channels/{channel_id}")
    if response.status_code == 200:
        print("   ‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        return "SUCCESS"
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
        print(f"   Response: {response.text}")
        return "DELETE_FAILED"

def check_backend_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend"""
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ö†Ô∏è Backend –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status_code}")
            return False
    except:
        print("‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

def main():
    print("üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CRUD –û–ü–ï–†–ê–¶–ò–ô")
    print("=" * 50)
    
    if not check_backend_status():
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ backend –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories_result = test_categories_crud()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã  
    channels_result = test_channels_crud()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 30)
    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ CRUD: {'‚úÖ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢' if categories_result == 'SUCCESS' else '‚ùå –£–î–ê–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢' if categories_result == 'DELETE_FAILED' else '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò'}")
    print(f"–ö–∞–Ω–∞–ª—ã CRUD: {'‚úÖ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢' if channels_result == 'SUCCESS' else '‚ùå –£–î–ê–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢' if channels_result == 'DELETE_FAILED' else '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò'}")
    
    if categories_result == "DELETE_FAILED" and channels_result == "SUCCESS":
        print("\nüí° –í–´–í–û–î: –ü—Ä–æ–±–ª–µ–º–∞ —Ç–æ–ª—å–∫–æ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ç–∞–±–ª–∏—Ü–∞ user_subscriptions)")
        print("–û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

if __name__ == "__main__":
    main() 