import asyncio
from telethon import TelegramClient
import os
import requests
import json
from dotenv import load_dotenv

load_dotenv()

# Telegram API –¥–∞–Ω–Ω—ã–µ
API_ID = os.getenv('TELEGRAM_API_ID')
API_HASH = os.getenv('TELEGRAM_API_HASH')
PHONE = os.getenv('TELEGRAM_PHONE')

async def validate_all_channels():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ —á–µ—Ä–µ–∑ Telegram API"""
    client = TelegramClient('userbot/session/userbot', API_ID, API_HASH)
    await client.start()
    
    print("üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ Backend API
    response = requests.get('http://localhost:8000/api/channels')
    channels = response.json()
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n")
    
    validation_results = []
    
    for channel in channels:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª: {channel['title']}")
        print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: username={channel.get('username')}, telegram_id={channel.get('telegram_id')}")
        
        result = {
            'id': channel['id'],
            'title_db': channel['title'],
            'username_db': channel.get('username'),
            'telegram_id': channel.get('telegram_id'),
            'status': 'unknown',
            'real_data': {},
            'recommendations': []
        }
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ telegram_id
            if channel.get('telegram_id'):
                entity = await client.get_entity(channel['telegram_id'])
                
                result['real_data'] = {
                    'title': entity.title,
                    'username': f"@{entity.username}" if entity.username else None,
                    'participants_count': getattr(entity, 'participants_count', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'verified': getattr(entity, 'verified', False)
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
                db_username = channel.get('username')
                real_username = result['real_data']['username']
                
                if db_username != real_username:
                    result['status'] = 'username_mismatch'
                    result['recommendations'].append(f"–û–±–Ω–æ–≤–∏—Ç—å username: {db_username} ‚Üí {real_username}")
                    print(f"   ‚ö†Ô∏è  –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï username: {db_username} ‚Üí {real_username}")
                else:
                    result['status'] = 'ok'
                    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                
                if channel['title'] != entity.title:
                    result['recommendations'].append(f"–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: {channel['title']} ‚Üí {entity.title}")
                    print(f"   üí° –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: {channel['title']} ‚Üí {entity.title}")
                
                print(f"   üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {result['real_data']['participants_count']}")
                
        except Exception as e:
            result['status'] = 'error'
            result['error'] = str(e)
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        validation_results.append(result)
        print()
    
    await client.disconnect()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    print("üìã –û–¢–ß–ï–¢ –ü–û –í–ê–õ–ò–î–ê–¶–ò–ò:")
    print("=" * 50)
    
    issues_found = 0
    for result in validation_results:
        if result['status'] in ['username_mismatch', 'error']:
            issues_found += 1
            print(f"\nüîß {result['title_db']} (ID: {result['id']})")
            print(f"   –°—Ç–∞—Ç—É—Å: {result['status']}")
            if result.get('recommendations'):
                for rec in result['recommendations']:
                    print(f"   üí° {rec}")
            if result.get('error'):
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    if issues_found == 0:
        print("\n‚úÖ –í—Å–µ –∫–∞–Ω–∞–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    else:
        print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {issues_found}")
    
    print(f"\nüìä –°–≤–æ–¥–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(validation_results)}")
    print(f"   –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {len([r for r in validation_results if r['status'] == 'ok'])}")
    print(f"   –° –æ—à–∏–±–∫–∞–º–∏ username: {len([r for r in validation_results if r['status'] == 'username_mismatch'])}")
    print(f"   –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {len([r for r in validation_results if r['status'] == 'error'])}")
    
    return validation_results

if __name__ == "__main__":
    results = asyncio.run(validate_all_channels()) 