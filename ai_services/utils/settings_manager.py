#!/usr/bin/env python3
"""
SettingsManager - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Backend API —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏
"""

import asyncio
import aiohttp
import time
from typing import Dict, Any, Optional
from loguru import logger
import os

class SettingsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self, backend_url: str = None, cache_ttl: int = 300):
        if backend_url is None:
            backend_url = os.getenv("BACKEND_API_URL", "http://localhost:8000")
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SettingsManager
        
        Args:
            backend_url: URL Backend API
            cache_ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        """
        self.backend_url = backend_url
        self.cache_ttl = cache_ttl
        self._cache = {}
        self._cache_timestamp = 0
        self.logger = logger.bind(component="SettingsManager")
        
        self.logger.info(f"üîß SettingsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {backend_url}")
    
    async def get_ai_service_config(self, service_name: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ Backend API
        
        Args:
            service_name: –ò–º—è —Å–µ—Ä–≤–∏—Å–∞ (categorization, summarization, analysis)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: model, max_tokens, temperature
            –î–ª—è summarization –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: top_p
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_settings = await self.get_cached_settings()
            if cached_settings:
                config = self._extract_service_config(cached_settings, service_name)
                if config:
                    self.logger.debug(f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ {service_name} –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞")
                    return config
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API –µ—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª
            fresh_settings = await self._load_settings_from_api()
            if fresh_settings:
                config = self._extract_service_config(fresh_settings, service_name)
                if config:
                    self.logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ {service_name} –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ API")
                    return config
            
            # Fallback –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            fallback_config = self.get_fallback_config(service_name)
            self.logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {service_name}")
            return fallback_config
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ {service_name}: {e}")
            return self.get_fallback_config(service_name)
    
    async def get_cached_settings(self) -> Optional[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ None –µ—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª
        """
        current_time = time.time()
        
        if (self._cache and 
            self._cache_timestamp > 0 and 
            (current_time - self._cache_timestamp) < self.cache_ttl):
            
            self.logger.debug(f"üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤–æ–∑—Ä–∞—Å—Ç: {int(current_time - self._cache_timestamp)}—Å)")
            return self._cache
        
        return None
    
    async def _load_settings_from_api(self) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Backend API –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/settings") as response:
                    if response.status == 200:
                        settings_list = await response.json()
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å key->value
                        settings_dict = {s['key']: s['value'] for s in settings_list}
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                        self._cache = settings_dict
                        self._cache_timestamp = time.time()
                        
                        ai_settings_count = len([k for k in settings_dict.keys() if k.startswith('ai_')])
                        self.logger.info(f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ API: {ai_settings_count} AI –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                        
                        return settings_dict
                    else:
                        self.logger.error(f"‚ùå Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status}")
                        return None
                        
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ API: {e}")
            return None
    
    def _extract_service_config(self, settings: Dict[str, Any], service_name: str) -> Optional[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ AI —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        
        Args:
            settings: –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            service_name: –ò–º—è —Å–µ—Ä–≤–∏—Å–∞
            
        Returns:
            –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ None
        """
        try:
            model_key = f"ai_{service_name}_model"
            tokens_key = f"ai_{service_name}_max_tokens"
            temp_key = f"ai_{service_name}_temperature"
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            base_keys = [model_key, tokens_key, temp_key]
            
            if all(key in settings for key in base_keys):
                config = {
                    'model': settings[model_key],
                    'max_tokens': int(settings[tokens_key]),
                    'temperature': float(settings[temp_key])
                }
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è summarization
                if service_name == 'summarization':
                    top_p_key = f"ai_{service_name}_top_p"
                    if top_p_key in settings:
                        config['top_p'] = float(settings[top_p_key])
                        self.logger.debug(f"üéØ –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä top_p: {config['top_p']}")
                    else:
                        # Fallback –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è top_p
                        config['top_p'] = 1.0
                        self.logger.debug(f"‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä {top_p_key} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback: 1.0")
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if self._validate_config(config, service_name):
                    return config
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ {service_name} –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                    return None
            else:
                missing_keys = [key for key in base_keys if key not in settings]
                self.logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {service_name}: {missing_keys}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ {service_name}: {e}")
            return None
    
    def _validate_config(self, config: Dict[str, Any], service_name: str) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            service_name: –ò–º—è —Å–µ—Ä–≤–∏—Å–∞
            
        Returns:
            True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–Ω—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
            valid_models = ['gpt-4o-mini', 'gpt-4o', 'gpt-3.5-turbo', 'gpt-4']
            if config['model'] not in valid_models:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å {config['model']} –¥–ª—è {service_name}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º max_tokens
            if not (100 <= config['max_tokens'] <= 8000):
                self.logger.warning(f"‚ö†Ô∏è max_tokens {config['max_tokens']} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 100-8000 –¥–ª—è {service_name}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º temperature
            if not (0.0 <= config['temperature'] <= 2.0):
                self.logger.warning(f"‚ö†Ô∏è temperature {config['temperature']} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0.0-2.0 –¥–ª—è {service_name}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º top_p –¥–ª—è summarization
            if service_name == 'summarization' and 'top_p' in config:
                if not (0.0 <= config['top_p'] <= 1.0):
                    self.logger.warning(f"‚ö†Ô∏è top_p {config['top_p']} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0.0-1.0 –¥–ª—è {service_name}")
                    return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ {service_name}: {e}")
            return False
    
    def get_fallback_config(self, service_name: str) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        
        Args:
            service_name: –ò–º—è —Å–µ—Ä–≤–∏—Å–∞
            
        Returns:
            Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        fallback_configs = {
            'categorization': {
                'model': 'gpt-4o-mini',
                'max_tokens': 1000,
                'temperature': 0.3
            },
            'summarization': {
                'model': 'gpt-4o',
                'max_tokens': 2000,
                'temperature': 0.7,
                'top_p': 1.0
            },
            'analysis': {
                'model': 'gpt-4o-mini', 
                'max_tokens': 1500,
                'temperature': 0.5
            }
        }
        
        config = fallback_configs.get(service_name, fallback_configs['categorization'])
        self.logger.info(f"üîÑ Fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {service_name}: {config}")
        return config
    
    async def refresh_cache(self) -> bool:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫
        
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        self.logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        fresh_settings = await self._load_settings_from_api()
        return fresh_settings is not None
    
    def get_cache_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—ç—à–∞
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
        """
        current_time = time.time()
        cache_age = int(current_time - self._cache_timestamp) if self._cache_timestamp > 0 else -1
        
        return {
            'cache_size': len(self._cache),
            'cache_age_seconds': cache_age,
            'cache_ttl_seconds': self.cache_ttl,
            'is_cache_valid': cache_age >= 0 and cache_age < self.cache_ttl,
            'ai_settings_count': len([k for k in self._cache.keys() if k.startswith('ai_')]) if self._cache else 0
        } 