#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç AI Services –∏–∑–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
"""

from celery_app import app
import time
import json

def test_basic_tasks():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    print("üß™ –ë–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏:")
    
    # Ping task
    result = app.send_task('tasks.ping_task', args=['Container test'])
    response = result.get(timeout=10)
    print(f"‚úÖ ping_task: {response['status']}")
    
    # Test task
    result = app.send_task('tasks.test_task', args=['Container data'])
    response = result.get(timeout=10)
    print(f"‚úÖ test_task: {response['status']}")

def test_ai_tasks():
    """–¢–µ—Å—Ç AI –∑–∞–¥–∞—á"""
    print("\nü§ñ AI –∑–∞–¥–∞—á–∏:")
    
    # OpenAI test
    result = app.send_task('tasks.test_openai_connection')
    try:
        response = result.get(timeout=30)
        print(f"‚úÖ test_openai_connection: {response['status']}")
    except Exception as e:
        print(f"‚ùå test_openai_connection: {e}")
    
    # Categorization test
    test_post = {
        'id': 999,
        'text': '–°–µ–≥–æ–¥–Ω—è –≤ –¢—É–ª–µ –ø—Ä–æ—à–µ–ª –∫–æ–Ω—Ü–µ—Ä—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º—É–∑—ã–∫–∏.',
        'channel_name': 'test'
    }
    
    categories = [
        {'id': 1, 'name': '–ö—É–ª—å—Ç—É—Ä–∞', 'description': '–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è'},
        {'id': 2, 'name': '–ù–æ–≤–æ—Å—Ç–∏', 'description': '–û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏'}
    ]
    
    result = app.send_task('tasks.categorize_post', args=[test_post, categories])
    try:
        response = result.get(timeout=30)
        print(f"‚úÖ categorize_post: {response['status']}")
    except Exception as e:
        print(f"‚ùå categorize_post: {e}")

def main():
    print("üöÄ AI Services Test (Container)")
    print("=" * 40)
    
    test_basic_tasks()
    test_ai_tasks()
    
    print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == '__main__':
    main() 