#!/usr/bin/env python3
"""
CategorizationService v3.0 - –ë–ê–¢–ß–ï–í–ê–Ø AI-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–∫ –≤ N8N –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import aiohttp
import json
import re
import logging
from typing import Dict, List, Optional, Tuple, Any
from openai import AsyncOpenAI
from models.post import Post
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CategorizationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è AI-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ PublicBot
    v3.0 - –ë–ê–¢–ß–ï–í–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –≤ N8N –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, openai_api_key: str, backend_url: str = "http://localhost:8000", batch_size: int = 30):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            openai_api_key: API –∫–ª—é—á OpenAI
            backend_url: URL Backend API
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ –≤ N8N)
        """
        self.openai_client = AsyncOpenAI(api_key=openai_api_key)
        self.backend_url = backend_url
        self.batch_size = batch_size
        
    async def process_with_bot_config(self, posts: List[Post], bot_id: int) -> List[Dict[str, Any]]:
        """
        üöÄ –ë–ê–¢–ß–ï–í–ê–Ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ PublicBot
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
            bot_id: ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
            bot_config = await self._get_bot_config(bot_id)
            if not bot_config:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞ {bot_id}")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
            bot_categories = await self._get_bot_categories(bot_id)
            if not bot_categories:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞ {bot_id}")
                return []
            
            logger.info(f"ü§ñ –ë–ê–¢–ß–ï–í–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ '{bot_config['name']}'")
            logger.info(f"üìÇ –î–æ—Å—Ç—É–ø–Ω–æ {len(bot_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size}")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ—Å—Ç—ã –Ω–∞ –±–∞—Ç—á–∏
            batches = self._split_posts_into_batches(posts)
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(batches)} –±–∞—Ç—á–µ–π")
            
            # üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ë–ê–¢–ß–ï–ô
            batch_tasks = []
            for i, batch in enumerate(batches, 1):
                logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –±–∞—Ç—á–∞ {i}/{len(batches)} ({len(batch)} –ø–æ—Å—Ç–æ–≤)")
                task = self._process_batch(batch, bot_config, bot_categories, i, len(batches))
                batch_tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –±–∞—Ç—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            logger.info(f"üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(batch_tasks)} –±–∞—Ç—á–µ–π")
            batch_results = await asyncio.gather(*batch_tasks, return_exceptions=True)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –±–∞—Ç—á–µ–π
            all_results = []
            for i, batch_result in enumerate(batch_results, 1):
                if isinstance(batch_result, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {i}: {batch_result}")
                    # –°–æ–∑–¥–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤ —ç—Ç–æ–≥–æ –±–∞—Ç—á–∞
                    batch_posts = batches[i-1]
                    for post in batch_posts:
                        fallback_result = self._create_fallback_result(post)
                        all_results.append(fallback_result)
                else:
                    all_results.extend(batch_result)
                    logger.info(f"‚úÖ –ë–∞—Ç—á {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(batch_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            logger.info(f"‚úÖ –ë–ê–¢–ß–ï–í–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(all_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return all_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_with_bot_config: {str(e)}")
            return []
    
    def _split_posts_into_batches(self, posts: List[Post]) -> List[List[Post]]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –ø–æ—Å—Ç—ã –Ω–∞ –±–∞—Ç—á–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        batches = []
        for i in range(0, len(posts), self.batch_size):
            batch = posts[i:i + self.batch_size]
            batches.append(batch)
        return batches
    
    async def _process_batch(self, batch_posts: List[Post], bot_config: Dict[str, Any], 
                           bot_categories: List[Dict[str, Any]], batch_index: int, total_batches: int) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á –ø–æ—Å—Ç–æ–≤
        
        Args:
            batch_posts: –ü–æ—Å—Ç—ã –≤ –±–∞—Ç—á–µ
            bot_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
            bot_categories: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
            batch_index: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
            total_batches: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π
        """
        try:
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {batch_index}/{total_batches} ({len(batch_posts)} –ø–æ—Å—Ç–æ–≤)")
            
            # –°—Ç—Ä–æ–∏–º –±–∞—Ç—á–µ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–∫–∞–∫ –≤ N8N)
            system_prompt, user_message = self._build_batch_prompt(bot_config, bot_categories, batch_posts, batch_index, total_batches)
            
            # –í—ã–∑—ã–≤–∞–µ–º OpenAI API –¥–ª—è –≤—Å–µ–≥–æ –±–∞—Ç—á–∞
            response = await self._call_openai_batch_api(system_prompt, user_message)
            if not response:
                logger.error(f"‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI –¥–ª—è –±–∞—Ç—á–∞ {batch_index}")
                return [self._create_fallback_result(post) for post in batch_posts]
            
            # –ü–∞—Ä—Å–∏–º –±–∞—Ç—á–µ–≤—ã–π –æ—Ç–≤–µ—Ç
            batch_results = self._parse_batch_response(response, batch_posts, bot_categories)
            
            logger.info(f"‚úÖ –ë–∞—Ç—á {batch_index} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(batch_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return batch_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {batch_index}: {str(e)}")
            return [self._create_fallback_result(post) for post in batch_posts]
    
    def _build_batch_prompt(self, bot_config: Dict[str, Any], bot_categories: List[Dict[str, Any]], 
                           batch_posts: List[Post], batch_index: int, total_batches: int) -> Tuple[str, str]:
        """
        –°—Ç—Ä–æ–∏—Ç –±–∞—Ç—á–µ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –≤ N8N workflows
        
        Returns:
            Tuple[system_prompt, user_message]
        """
        
        # 1. Bot Prompt –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        bot_prompt = bot_config.get('categorization_prompt', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å—Ç—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        categories_list = []
        for i, category in enumerate(bot_categories, 1):
            name = category.get('category_name', category.get('name', 'Unknown'))
            description = category.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
            categories_list.append(f"{i}. {name} ({description})")
        
        categories_text = "\n".join(categories_list)
        
        # 3. –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–∫–∞–∫ –≤ N8N)
        system_prompt = f"""{bot_prompt}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
{categories_text}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
1. –ù–æ–º–µ—Ä —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ—Å—Ç–∞–≤—å null
2. –û—Ü–µ–Ω–∫—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (0.0-1.0)
3. –í–∞–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ (1-10) - –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
4. –°—Ä–æ—á–Ω–æ—Å—Ç—å (1-10) - –Ω–∞—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ –Ω—É–∂–Ω–æ –æ–± —ç—Ç–æ–º —É–∑–Ω–∞—Ç—å
5. –ó–Ω–∞—á–∏–º–æ—Å—Ç—å (1-10) - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –º–∞—Å—Å–∏–≤–æ–º:
{{
  "results": [
    {{
      "id": post_id,
      "category_number": 1,
      "category_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
      "relevance_score": 0.95,
      "importance": 9,
      "urgency": 8,
      "significance": 9,
      "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ü–µ–Ω–æ–∫"
    }}
  ]
}}

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –∏—Å–ø–æ–ª—å–∑—É–π null (—Å—Ç—Ä–æ—á–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏), –Ω–µ NULL!"""
        
        # 4. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∫–∞–∫ –≤ N8N)
        posts_for_ai = []
        for post in batch_posts:
            posts_for_ai.append({
                "id": post.id,
                "text": post.content,
                "channel": getattr(post, 'channel_title', 'Unknown'),
                "views": getattr(post, 'views', 0),
                "date": post.date.isoformat() if hasattr(post, 'date') and post.date else None
            })
        
        # 5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –≤ N8N)
        user_message = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ {len(batch_posts)} –ø–æ—Å—Ç–æ–≤ (–±–∞—Ç—á {batch_index}/{total_batches}):\n\n{json.dumps(posts_for_ai, ensure_ascii=False, indent=2)}"
        
        return system_prompt, user_message
    
    async def _call_openai_batch_api(self, system_prompt: str, user_message: str) -> Optional[str]:
        """–í—ã–∑–æ–≤ OpenAI API –¥–ª—è –±–∞—Ç—á–∞ –ø–æ—Å—Ç–æ–≤"""
        try:
            response = await self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_message}
                ],
                max_tokens=6000,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –±–∞—Ç—á–∞ –∫–∞–∫ –≤ N8N
                temperature=0.3
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI API –¥–ª—è –±–∞—Ç—á–∞: {str(e)}")
            return None
    
    def _parse_batch_response(self, response: str, batch_posts: List[Post], bot_categories: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç –±–∞—Ç—á–µ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if not json_match:
                logger.warning("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞—Ç—á–µ–≤–æ–º –æ—Ç–≤–µ—Ç–µ AI")
                return [self._create_fallback_result(post) for post in batch_posts]
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å NULL -> null
            json_text = json_match.group()
            json_text = re.sub(r'\bNULL\b', 'null', json_text)
            
            # –ü–∞—Ä—Å–∏–º JSON
            try:
                parsed_response = json.loads(json_text)
            except json.JSONDecodeError as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ JSON: {str(e)}")
                return [self._create_fallback_result(post) for post in batch_posts]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            ai_results = parsed_response.get('results', [])
            if not isinstance(ai_results, list):
                logger.warning("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º")
                return [self._create_fallback_result(post) for post in batch_posts]
            
            # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏
            results = []
            post_id_to_post = {post.id: post for post in batch_posts}
            
            for ai_result in ai_results:
                post_id = ai_result.get('id')
                if post_id in post_id_to_post:
                    post = post_id_to_post[post_id]
                    
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤–∫–ª—é—á–∞—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ)
                    normalized_result = self._validate_and_normalize_batch_result(ai_result, post, bot_categories)
                    if normalized_result:
                        results.append(normalized_result)
                else:
                    logger.warning(f"–ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞—Ç—á–µ")
            
            # –ù–ï —Å–æ–∑–¥–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            # –ï—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é - –∑–Ω–∞—á–∏—Ç –æ–Ω –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            logger.info(f"‚úÖ –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(batch_posts)}")
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return [self._create_fallback_result(post) for post in batch_posts]
    
    def _validate_and_normalize_batch_result(self, ai_result: Dict[str, Any], post: Post, bot_categories: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –±–∞—Ç—á–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é - null –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –ø–æ—Å—Ç
            category_number = ai_result.get('category_number')
            
            if category_number is None or category_number == 'null':
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ù–ï–†–ï–õ–ï–í–ê–ù–¢–ù–û–ì–û –ø–æ—Å—Ç–∞
                logger.info(f"üìù –ü–æ—Å—Ç {post.id} –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω - —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç '–ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ'")
                return {
                    'post_id': post.id,
                    'post_text': post.content[:200] + '...' if len(post.content or '') > 200 else post.content,
                    'category_number': None,
                    'category_name': '–ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ',
                    'relevance_score': 0.0,
                    'importance': self._validate_score(ai_result.get('importance'), 1, 10),
                    'urgency': self._validate_score(ai_result.get('urgency'), 1, 10),
                    'significance': self._validate_score(ai_result.get('significance'), 1, 10),
                    'reasoning': str(ai_result.get('reasoning', '–ü–æ—Å—Ç –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞'))[:500],
                    'processing_method': 'batch_categorization_v3.0_irrelevant'
                }
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            validated_category_number = self._validate_category_number(category_number, len(bot_categories))
            if validated_category_number is None:
                logger.warning(f"üìù –ü–æ—Å—Ç {post.id} –∏–º–µ–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_number}")
                # –°–æ–∑–¥–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                return self._create_fallback_result(post)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª—è –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            normalized_result = {
                'post_id': post.id,
                'post_text': post.content[:200] + '...' if len(post.content or '') > 200 else post.content,
                'category_number': validated_category_number,
                'category_name': ai_result.get('category_name', 'Unknown'),
                'relevance_score': self._validate_score(ai_result.get('relevance_score'), 0.0, 1.0),
                'importance': self._validate_score(ai_result.get('importance'), 1, 10),
                'urgency': self._validate_score(ai_result.get('urgency'), 1, 10),
                'significance': self._validate_score(ai_result.get('significance'), 1, 10),
                'reasoning': str(ai_result.get('reasoning', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è'))[:500],
                'processing_method': 'batch_categorization_v3.0'
            }
            
            return normalized_result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–∞—Ç—á–µ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")
            return self._create_fallback_result(post)
    
    async def _get_bot_config(self, bot_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots/{bot_id}") as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞: HTTP {response.status}")
                        return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
            return None
    
    async def _get_bot_categories(self, bot_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots/{bot_id}/categories") as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞: {str(e)}")
            return []
    
    def _validate_category_number(self, category_number: Any, max_categories: int) -> Optional[int]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if category_number is None or category_number == 'null':
            return None
        
        try:
            num = int(category_number)
            if 1 <= num <= max_categories:
                return num
            else:
                logger.warning(f"–ù–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {num} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-{max_categories}")
                return None
        except (ValueError, TypeError):
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_number}")
            return None
    
    def _validate_score(self, score: Any, min_val: float, max_val: float) -> float:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫"""
        try:
            num = float(score)
            return max(min_val, min(max_val, num))
        except (ValueError, TypeError):
            return (min_val + max_val) / 2  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _create_fallback_result(self, post: Post) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ AI"""
        return {
            'post_id': post.id,
            'post_text': post.content[:200] + '...' if len(post.content or '') > 200 else post.content,
            'category_number': None,
            'category_name': None,
            'relevance_score': 0.0,
            'importance': 5,
            'urgency': 5,
            'significance': 5,
            'reasoning': 'Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –æ—à–∏–±–∫–∞ AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏',
            'processing_method': 'fallback_batch_v3.0'
        } 