#!/usr/bin/env python3
"""
AI Orchestrator v2.0 - Event-Driven Architecture
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä AI —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é –∏ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
"""

import asyncio
import aiohttp
import heapq
import os
import sys
from datetime import datetime, timedelta
from enum import Enum
from dataclasses import dataclass, field
from typing import List, Dict, Any, Optional
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
from ai_services.services.categorization import CategorizationService
from ai_services.services.summarization import SummarizationService

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
class AITaskPriority(Enum):
    BACKGROUND = 1    # –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–∫–æ–≥–¥–∞ –≤—Å–µ —Å–¥–µ–ª–∞–Ω–æ)
    NORMAL = 2        # –ü–ª–∞–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    HIGH = 3          # –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã, —Å–∫–æ—Ä—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã
    URGENT = 4        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    CRITICAL = 5      # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

class AITaskType(Enum):
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    STARTUP_PROCESSING = "startup_processing"
    BACKGROUND_PROCESSING = "background_processing"
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (CRITICAL –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    FORCE_REPROCESS_ALL = "force_reprocess_all"
    FORCE_REPROCESS_CHANNELS = "force_reprocess_channels"
    FORCE_REPROCESS_BOT = "force_reprocess_bot"
    CLEAR_AI_RESULTS = "clear_ai_results"
    
    # –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (URGENT/CRITICAL –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    NEW_POSTS_PROCESSING = "new_posts_processing"
    BOT_SETTINGS_CHANGED = "bot_settings_changed"
    USER_URGENT_REQUEST = "user_urgent_request"
    
    # –ü–ª–∞–Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (NORMAL/HIGH –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    SCHEDULED_PROCESSING = "scheduled_processing"
    DIGEST_PREPARATION = "digest_preparation"

@dataclass
class AITask:
    task_type: AITaskType
    priority: AITaskPriority
    bot_id: Optional[int] = None
    channel_ids: Optional[List[int]] = None
    post_ids: Optional[List[int]] = None
    user_id: Optional[int] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    created_at: datetime = field(default_factory=datetime.utcnow)
    
    def __lt__(self, other):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è heapq (–º–µ–Ω—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = –≤—ã—à–µ –≤ –æ—á–µ—Ä–µ–¥–∏)"""
        return (-self.priority.value, self.created_at) < (-other.priority.value, other.created_at)

class AIOrchestratorV2:
    """
    AI Orchestrator v2.0 - Event-Driven Architecture
    
    –§—É–Ω–∫—Ü–∏–∏:
    1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á (heapq)
    2. –†–µ–∞–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç Userbot
    3. –£–º–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞/–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    4. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    5. Startup initialization —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, 
                 backend_url: str = "http://localhost:8000",
                 openai_api_key: Optional[str] = None,
                 batch_size: int = 10):
        
        self.backend_url = backend_url
        self.batch_size = batch_size
        
        # Event-Driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
        self.task_queue = []  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å (heapq)
        self.processing_locks = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        self.background_worker_running = False
        self.last_activity = None
        self.worker_event = asyncio.Event()  # –°–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
        self.openai_api_key = openai_api_key or os.getenv("OPENAI_API_KEY")
        if not self.openai_api_key:
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è mock —Ä–µ–∂–∏–º")
        
        self.categorization_service = CategorizationService(
            openai_api_key=self.openai_api_key,
            backend_url=self.backend_url
        )
        
        self.summarization_service = SummarizationService(
            model_name="gpt-4o-mini",
            max_tokens=4000,
            temperature=0.3
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_processed": 0,
            "successful_processed": 0,
            "failed_processed": 0,
            "last_run": None,
            "processing_time": 0,
            "queue_size": 0,
            "active_tasks": 0
        }
        
        logger.info("ü§ñ AI Orchestrator v2.0 (Event-Driven) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üì° Backend URL: {self.backend_url}")
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size}")

    # === –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô –ò –ü–†–ò–û–†–ò–¢–ï–¢–û–í ===
    
    async def handle_new_posts_from_userbot(self, post_ids: List[int], channel_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç Userbot"""
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ {len(post_ids)} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –±–æ—Ç–æ–≤
        affected_bots = await self._get_bots_using_channel(channel_id)
        
        if not affected_bots:
            logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞
        for bot_id in affected_bots:
            task = AITask(
                task_type=AITaskType.NEW_POSTS_PROCESSING,
                priority=AITaskPriority.CRITICAL,  # –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                bot_id=bot_id,
                post_ids=post_ids,
                metadata={
                    'channel_id': channel_id,
                    'trigger': 'userbot_new_posts',
                    'posts_count': len(post_ids)
                }
            )
            
            await self._add_task_to_queue(task)
        
        # –ï—Å–ª–∏ —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è - –∑–∞–ø—É—Å–∫–∞–µ–º
        if not self.background_worker_running:
            logger.info("üîÑ –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º...")
            await self._start_background_worker()

    async def _add_task_to_queue(self, task: AITask):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        if await self._is_duplicate_task(task):
            logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task.task_type.value} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if task.priority == AITaskPriority.CRITICAL:
            await self._interrupt_current_processing(task)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å
        heapq.heappush(self.task_queue, task)
        self.stats['queue_size'] = len(self.task_queue)
        
        logger.info(f"‚ûï –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task.task_type.value} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.name})")
        
        # –ë—É–¥–∏–º —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.worker_event.set()

    async def _is_duplicate_task(self, task: AITask) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏ –∏ bot_id
        for existing_task in self.task_queue:
            if (existing_task.task_type == task.task_type and 
                existing_task.bot_id == task.bot_id):
                return True
        return False

    async def _interrupt_current_processing(self, urgent_task: AITask):
        """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        if urgent_task.priority == AITaskPriority.CRITICAL:
            logger.warning(f"üö® –ü–†–ï–†–´–í–ê–ù–ò–ï: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ {urgent_task.task_type.value}")
            
            # –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            for lock_key in list(self.processing_locks.keys()):
                current_task = self.processing_locks[lock_key]
                if current_task.priority.value < urgent_task.priority.value:
                    logger.info(f"‚è∏Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É {current_task.task_type.value}")

    # === –£–ú–ù–´–ô –§–û–ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ===
    
    async def _start_background_worker(self):
        """–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        if self.background_worker_running:
            return
        
        self.background_worker_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(self._smart_background_worker())

    async def _smart_background_worker(self):
        """–£–º–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        logger.info("üß† –£–º–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        try:
            while self.background_worker_running:
                if not self.task_queue:
                    # –ù–ï–¢ –ó–ê–î–ê–ß - –ó–ê–°–´–ü–ê–ï–ú –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
                    logger.info("üò¥ –ù–µ—Ç –∑–∞–¥–∞—á, –∑–∞—Å—ã–ø–∞–µ–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞...")
                    await self.report_orchestrator_status("IDLE", {"queue_size": 0})
                    
                    # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö
                    await self.worker_event.wait()
                    self.worker_event.clear()
                    
                    logger.info("‚è∞ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ—Å—ã–ø–∞–µ–º—Å—è...")
                else:
                    # –ï–°–¢–¨ –ó–ê–î–ê–ß–ò - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
                    task = heapq.heappop(self.task_queue)
                    self.stats['queue_size'] = len(self.task_queue)
                    
                    logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É: {task.task_type.value} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.name})")
                    
                    await self.report_orchestrator_status("PROCESSING", {
                        "current_task": task.task_type.value,
                        "priority": task.priority.name,
                        "queue_size": len(self.task_queue)
                    })
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
                    success = await self._process_task(task)
                    
                    if success:
                        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task.task_type.value} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task.task_type.value}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    self.last_activity = datetime.utcnow()
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {str(e)}")
        finally:
            self.background_worker_running = False
            logger.info("üõë –£–º–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def startup_initialization(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üöÄ Startup Initialization - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        pending_data = await self._check_pending_data()
        
        if pending_data['total_posts'] > 0:
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {pending_data['total_posts']} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            await self._schedule_pending_data_processing(pending_data)
        else:
            logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        
        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await self._start_background_worker()
        
        logger.info("‚úÖ AI Orchestrator –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    async def run_continuous(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ Event-Driven —Ä–µ–∂–∏–º–µ"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π Event-Driven –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # Startup initialization
        await self.startup_initialization()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        try:
            while True:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if self.background_worker_running:
                    logger.debug(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ—á–µ—Ä–µ–¥—å={len(self.task_queue)}, –∞–∫—Ç–∏–≤–Ω—ã—Ö={len(self.processing_locks)}")
                
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            await self.stop_background_worker()

    async def stop_background_worker(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        self.background_worker_running = False
        self.worker_event.set()  # –ë—É–¥–∏–º —á—Ç–æ–±—ã –æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è

    # === –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ú–ï–¢–û–î–û–í (–ë–£–î–£–¢ –†–ï–ê–õ–ò–ó–û–í–ê–ù–´) ===
    
    async def _get_bots_using_channel(self, channel_id: int) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
        return [1] if channel_id else []

    async def _check_pending_data(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/posts/unprocessed?limit=1000") as response:
                    if response.status == 200:
                        posts = await response.json()
                        return {
                            'total_posts': len(posts),
                            'bots_affected': 1,  # –ó–∞–≥–ª—É—à–∫–∞
                            'pending_by_bot': {1: len(posts)}
                        }
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: HTTP {response.status}")
                        return {'total_posts': 0, 'bots_affected': 0, 'pending_by_bot': {}}
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return {'total_posts': 0, 'bots_affected': 0, 'pending_by_bot': {}}

    async def _schedule_pending_data_processing(self, pending_data: Dict[str, Any]):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"""
        logger.info(f"üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {pending_data['total_posts']} –ø–æ—Å—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        task = AITask(
            task_type=AITaskType.BACKGROUND_PROCESSING,
            priority=AITaskPriority.NORMAL,
            metadata={'startup_processing': True, 'total_posts': pending_data['total_posts']}
        )
        
        await self._add_task_to_queue(task)
        logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")

    async def _process_task(self, task: AITask) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ {task.task_type.value}")
        
        try:
            if task.task_type == AITaskType.BACKGROUND_PROCESSING:
                return await self._process_background_batch()
            elif task.task_type == AITaskType.NEW_POSTS_PROCESSING:
                return await self._process_new_posts(task.post_ids, task.channel_ids)
            elif task.task_type == AITaskType.FORCE_REPROCESS_CHANNELS:
                return await self._reprocess_channels(task.channel_ids)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task.task_type.value}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task.task_type.value}: {str(e)}")
            return False

    async def _process_background_batch(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –±–∞—Ç—á–∞ –ø–æ—Å—Ç–æ–≤"""
        logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –±–∞—Ç—á–∞")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            pending_posts = await self._get_pending_posts(limit=self.batch_size)
            
            if not pending_posts:
                logger.info("‚úÖ –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
                return True
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(pending_posts)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º AI —Å–µ—Ä–≤–∏—Å–∞–º–∏ (–∑–∞–≥–ª—É—à–∫–∞)
            ai_results = []
            for post in pending_posts:
                # –ò–º–∏—Ç–∞—Ü–∏—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
                ai_result = {
                    "post_id": post["id"],
                    "public_bot_id": 1,  # –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
                    "summaries": {
                        "ru": f"AI —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ—Å—Ç–∞ {post['id']}",
                        "en": f"AI summary for post {post['id']}"
                    },
                    "categories": {
                        "primary": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                        "secondary": ["AI", "–¢–µ—Å—Ç"],
                        "relevance_scores": [0.95, 0.85]
                    },
                    "metrics": {
                        "importance": 8.0,
                        "urgency": 7.0, 
                        "significance": 8.5,
                        "tokens_used": 150,
                        "processing_time": 1.5
                    },
                    "processing_version": "v2.0"
                }
                ai_results.append(ai_result)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if ai_results:
                success = await self._save_ai_results(ai_results)
                if success:
                    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(ai_results)} AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    return True
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –±–∞—Ç—á–∞: {str(e)}")
            return False

    async def _get_pending_posts(self, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ Backend API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.backend_url}/api/posts/unprocessed",
                    params={"limit": limit}
                ) as response:
                    if response.status == 200:
                        posts = await response.json()
                        return posts
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {str(e)}")
            return []

    async def _save_ai_results(self, ai_results: List[Dict[str, Any]]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Backend API (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–û–†–ú–ê–¢)"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.backend_url}/api/ai/results/batch",
                    json=ai_results,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 201:
                        saved_results = await response.json()
                        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(saved_results)} AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: HTTP {response.status}")
                        logger.error(f"   –î–µ—Ç–∞–ª–∏: {error_text}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
            return False

    async def _process_new_posts(self, post_ids: List[int], channel_ids: List[int]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {len(post_ids)} –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ {channel_ids}")
        # –ó–∞–≥–ª—É—à–∫–∞
        return True

    async def _reprocess_channels(self, channel_ids: List[int]) -> bool:
        """–ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info(f"üîÑ –ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {channel_ids}")
        # –ó–∞–≥–ª—É—à–∫–∞
        return True

    async def report_orchestrator_status(self, status: str, details: Dict[str, Any] = None):
        """–û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ AI Orchestrator –≤ Backend API"""
        logger.debug(f"üì° –°—Ç–∞—Ç—É—Å: {status}, –¥–µ—Ç–∞–ª–∏: {details}")

    async def trigger_processing(self):
        """–†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ Backend API)"""
        logger.info("‚ö° Trigger Processing - —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        task = AITask(
            task_type=AITaskType.BACKGROUND_PROCESSING,
            priority=AITaskPriority.NORMAL,
            metadata={'trigger': 'api_request'}
        )
        
        await self._add_task_to_queue(task)
        
        # –ï—Å–ª–∏ —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω - –∑–∞–ø—É—Å–∫–∞–µ–º
        if not self.background_worker_running:
            await self._start_background_worker()
        
        return {"success": True, "message": "AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"}

    async def run_single_batch(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞—Ç—á–∞ AI Orchestrator v2.0")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        task = AITask(
            task_type=AITaskType.BACKGROUND_PROCESSING,
            priority=AITaskPriority.NORMAL,
            metadata={'trigger': 'single_batch_test'}
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
        success = await self._process_task(task)
        
        if success:
            logger.info("üéâ –¢–µ—Å—Ç–æ–≤—ã–π –±–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.error("üí• –¢–µ—Å—Ç–æ–≤—ã–π –±–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
        
        return success


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ AI Orchestrator v2.0"""
    import argparse
    
    parser = argparse.ArgumentParser(description="AI Orchestrator v2.0 Event-Driven Architecture")
    parser.add_argument("--mode", choices=["continuous", "single"], default="single",
                       help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: continuous (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ) –∏–ª–∏ single (–æ–¥–∏–Ω –±–∞—Ç—á)")
    parser.add_argument("--backend-url", default="http://localhost:8000",
                       help="URL Backend API")
    parser.add_argument("--batch-size", type=int, default=10,
                       help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ AI Orchestrator v2.0
    orchestrator = AIOrchestratorV2(
        backend_url=args.backend_url,
        batch_size=args.batch_size
    )
    
    # –ó–∞–ø—É—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    if args.mode == "continuous":
        await orchestrator.run_continuous()
    else:
        await orchestrator.run_single_batch()

if __name__ == "__main__":
    asyncio.run(main()) 