#!/usr/bin/env python3
"""
Unified Celery tasks for AI processing in MorningStarBot3
–ó–∞–¥–∞—á–∏ –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
"""

import logging
import time
import os
from typing import List, Dict, Any, Optional

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç Celery app - –¥–µ–ª–∞–µ–º —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
def get_celery_app():
    """–ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Celery app –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"""
    from celery_app import app
    return app

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SettingsManager
settings_manager = None
try:
    from utils.settings_manager import SettingsManager
    settings_manager = SettingsManager()
    logger.info("‚úÖ SettingsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è SettingsManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# –ü–æ–ª—É—á–∞–µ–º app –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
app = get_celery_app()

# Test and health check tasks
@app.task(bind=True, name='tasks.ping_task')
def ping_task(self, message="Ping from AI Services"):
    """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏"""
    logger.info(f"üèì Ping task started: {message}")
    
    result = {
        'message': message,
        'task_id': self.request.id,
        'timestamp': time.time(),
        'worker': self.request.hostname,
        'queue': 'default',
        'status': 'success'
    }
    
    logger.info(f"üèì Ping task completed: {result}")
    return result

@app.task(bind=True, name='tasks.test_task')
def test_task(self, message="Test from AI Services", delay=0):
    """Test task for debugging and monitoring"""
    logger.info(f"üß™ Test task started: {message}")
    
    if delay > 0:
        logger.info(f"‚è≥ Sleeping for {delay} seconds...")
        time.sleep(delay)
    
    result = {
        'message': message,
        'task_id': self.request.id,
        'timestamp': time.time(),
        'worker': self.request.hostname,
        'queue': 'default',
        'delay': delay,
        'status': 'success'
    }
    
    logger.info(f"üß™ Test task completed: {result}")
    return result

@app.task(bind=True, name='tasks.test_openai_connection')
def test_openai_connection(self):
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API"""
    logger.info("üîå Testing OpenAI connection...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        openai_key = os.getenv('OPENAI_API_KEY')
        if not openai_key:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI
        from openai import OpenAI
        client = OpenAI(api_key=openai_key)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": "Test message"}],
            max_tokens=10
        )
        
        result = {
            'status': 'success',
            'task_id': self.request.id,
            'timestamp': time.time(),
            'api_key_present': bool(openai_key),
            'test_response': response.choices[0].message.content if response.choices else None
        }
        
        logger.info("‚úÖ OpenAI connection test successful")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå OpenAI connection test failed: {e}")
        return {
            'status': 'error',
            'task_id': self.request.id,
            'timestamp': time.time(),
            'error': str(e)
        }

# AI Processing tasks
@app.task(bind=True, name='tasks.categorize_post')
def categorize_post(self, post: Dict, bot_id: int, **kwargs):
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    
    Args:
        post: –ü–æ—Å—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        bot_id: ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    logger.info(f"üè∑Ô∏è Categorize post task started: post {post.get('id')} for bot {bot_id}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        from services.categorization import CategorizationService
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        categorization_service = CategorizationService(
            model_name=kwargs.get('model_name', 'gpt-4o-mini'),
            max_tokens=kwargs.get('max_tokens', 1000),
            temperature=kwargs.get('temperature', 0.3),
            settings_manager=settings_manager
        )
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ Backend API)
        bot_categories = kwargs.get('bot_categories', [
            {'id': 1, 'name': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'},
            {'id': 2, 'name': '–ü–æ–ª–∏—Ç–∏–∫–∞'},
            {'id': 3, 'name': '–≠–∫–æ–Ω–æ–º–∏–∫–∞'}
        ])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç
        result = categorization_service.categorize_post(post, bot_categories)
        
        logger.info(f"‚úÖ Categorize post task completed: {result}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'post_id': post.get('id'),
            'result': result,
            'status': 'success',
            'timestamp': time.time()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Categorize post task failed: {e}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'post_id': post.get('id'),
            'result': None,
            'status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

@app.task(bind=True, name='tasks.categorize_batch')
def categorize_batch(self, posts: List[Dict], bot_id: int, **kwargs):
    """
    –ë–∞—Ç—á–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
    
    Args:
        posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        bot_id: ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    logger.info(f"üè∑Ô∏è Categorize batch task started: {len(posts)} posts for bot {bot_id}")
    
    try:
        results = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
        for post in posts:
            result = categorize_post.delay(post, bot_id, **kwargs)
            results.append(result.get(timeout=60))  # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 60 —Å–µ–∫—É–Ω–¥
        
        logger.info(f"‚úÖ Categorize batch task completed: {len(results)} results")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'posts_count': len(posts),
            'results_count': len(results),
            'results': results,
            'status': 'success',
            'timestamp': time.time()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Categorize batch task failed: {e}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'posts_count': len(posts),
            'results_count': 0,
            'results': [],
            'status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

@app.task(bind=True, name='tasks.summarize_posts')
def summarize_posts(self, posts: List[Dict], mode: str = 'individual', **kwargs):
    """
    –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
    
    Args:
        posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        mode: –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ ('individual' –∏–ª–∏ 'batch')
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
    """
    logger.info(f"üìù Summarize posts task started: {len(posts)} posts in {mode} mode")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        from services.summarization import SummarizationService
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        summarization_service = SummarizationService(
            model_name=kwargs.get('model_name', 'gpt-4o'),
            max_tokens=kwargs.get('max_tokens', 2000),
            temperature=kwargs.get('temperature', 0.7),
            settings_manager=settings_manager
        )
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if mode == 'individual':
            results = []
            for post in posts:
                summary = summarization_service.summarize_post(post)
                results.append({
                    'post_id': post.get('id'),
                    'summary': summary,
                    'status': 'success'
                })
        else:
            # –ë–∞—Ç—á–µ–≤—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
            results = summarization_service.summarize_batch(posts)
        
        logger.info(f"‚úÖ Summarize posts task completed: {len(results)} results")
        
        return {
            'task_id': self.request.id,
            'posts_count': len(posts),
            'results_count': len(results),
            'results': results,
            'mode': mode,
            'status': 'success',
            'timestamp': time.time()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Summarize posts task failed: {e}")
        
        return {
            'task_id': self.request.id,
            'posts_count': len(posts),
            'results_count': 0,
            'results': [],
            'mode': mode,
            'status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

@app.task(bind=True, name='tasks.summarize_batch')
def summarize_batch(self, posts: List[Dict], **kwargs):
    """
    –ë–∞—Ç—á–µ–≤–∞—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
    """
    return summarize_posts(posts, mode='batch', **kwargs)

@app.task(bind=True, name='tasks.process_digest')
def process_digest(self, bot_id: int, posts: List[Dict], **kwargs):
    """
    –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è + —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
    
    Args:
        bot_id: ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞
        posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    """
    logger.info(f"üîÑ Process digest task started: {len(posts)} posts for bot {bot_id}")
    
    try:
        # –®–∞–≥ 1: –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
        categorization_result = categorize_batch.delay(posts, bot_id, **kwargs)
        categorization_data = categorization_result.get(timeout=300)  # 5 –º–∏–Ω—É—Ç
        
        if categorization_data['status'] != 'success':
            raise Exception(f"Categorization failed: {categorization_data.get('error')}")
        
        # –®–∞–≥ 2: –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        summarization_result = summarize_posts.delay(posts, mode='individual', **kwargs)
        summarization_data = summarization_result.get(timeout=300)  # 5 –º–∏–Ω—É—Ç
        
        if summarization_data['status'] != 'success':
            raise Exception(f"Summarization failed: {summarization_data.get('error')}")
        
        logger.info(f"‚úÖ Process digest task completed for bot {bot_id}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'posts_count': len(posts),
            'categorization': categorization_data,
            'summarization': summarization_data,
            'status': 'success',
            'timestamp': time.time()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Process digest task failed: {e}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'posts_count': len(posts),
            'categorization': None,
            'summarization': None,
            'status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

# Cleanup tasks
@app.task(bind=True, name='tasks.cleanup_expired_results')
def cleanup_expired_results(self, max_age_hours: int = 24):
    """
    –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á
    
    Args:
        max_age_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —á–∞—Å–∞—Ö
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    logger.info(f"üßπ Cleanup expired results task started: max_age={max_age_hours}h")
    
    try:
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis
        
        result = {
            'task_id': self.request.id,
            'max_age_hours': max_age_hours,
            'deleted_count': 0,  # Placeholder
            'status': 'success',
            'timestamp': time.time()
        }
        
        logger.info(f"üßπ Cleanup expired results task completed: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Cleanup expired results task failed: {e}")
        return {
            'task_id': self.request.id,
            'max_age_hours': max_age_hours,
            'deleted_count': 0,
            'status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

# AI Orchestrator tasks
@app.task(bind=True, name='tasks.trigger_ai_processing')
def trigger_ai_processing(self, bot_id: Optional[int] = None, force_reprocess: bool = False):
    """
    –ó–∞–ø—É—Å–∫ AI Orchestrator –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤
    
    Args:
        bot_id: ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞ (None –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤)
        force_reprocess: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ AI Orchestrator
    """
    logger.info(f"ü§ñ AI Orchestrator task started: bot_id={bot_id}, force_reprocess={force_reprocess}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI Orchestrator
        from orchestrator_v5_parallel import process_bot_parallel
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if force_reprocess:
            mode = "force_reprocess"
        else:
            mode = "parallel"
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        result = process_bot_parallel(bot_id=bot_id, mode=mode)
        
        logger.info(f"‚úÖ AI Orchestrator task completed: {result}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'mode': mode,
            'result': result,
            'status': 'success',
            'timestamp': time.time()
        }
        
    except Exception as e:
        logger.error(f"‚ùå AI Orchestrator task failed: {e}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'mode': mode if 'mode' in locals() else 'unknown',
            'result': None,
            'status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

@app.task(bind=True, name='tasks.generate_digest_preview')
def generate_digest_preview(self, bot_id: int, limit: int = 10):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    
    Args:
        bot_id: ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–≤—å—é
        
    Returns:
        –ü—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
    """
    logger.info(f"üìã Generate digest preview task started: bot_id={bot_id}, limit={limit}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI Orchestrator  
        from orchestrator_v5_parallel import generate_digest_preview_parallel
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
        preview_result = generate_digest_preview_parallel(bot_id=bot_id, limit=limit)
        
        logger.info(f"‚úÖ Generate digest preview task completed for bot {bot_id}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'limit': limit,
            'preview': preview_result,
            'status': 'success',
            'timestamp': time.time()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Generate digest preview task failed: {e}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'limit': limit,
            'preview': None,
            'status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

# Export all tasks
__all__ = [
    'ping_task',
    'test_task',
    'test_openai_connection',
    'categorize_post',
    'categorize_batch',
    'summarize_posts',
    'summarize_batch',
    'process_digest',
    'cleanup_expired_results',
    'trigger_ai_processing',
    'generate_digest_preview'
] 