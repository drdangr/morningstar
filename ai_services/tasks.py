#!/usr/bin/env python3
"""
Unified Celery tasks for AI processing in MorningStarBot3
–ó–∞–¥–∞—á–∏ –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
"""

import logging
import time
import os
from typing import List, Dict, Any, Optional
import asyncio
from datetime import datetime
import httpx
from celery import group

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç Celery app - –¥–µ–ª–∞–µ–º —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
def get_celery_app():
    """–ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Celery app –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"""
    from celery_app import app
    return app

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SettingsManager
settings_manager = None
try:
    from utils.settings_manager import SettingsManager
    settings_manager = SettingsManager()
    logger.info("‚úÖ SettingsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è SettingsManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# –ü–æ–ª—É—á–∞–µ–º app –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
app = get_celery_app()

# === Helper constants ===
BACKEND_URL = os.getenv("BACKEND_INTERNAL_URL", "http://backend:8000")


# Test and health check tasks
@app.task(bind=True, name='tasks.ping_task')
def ping_task(self, message="Ping from AI Services"):
    """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏"""
    logger.info(f"üèì Ping task started: {message}")
    
    result = {
        'message': message,
        'task_id': self.request.id,
        'timestamp': time.time(),
        'worker': self.request.hostname,
        'queue': 'default',
        'status': 'success'
    }
    
    logger.info(f"üèì Ping task completed: {result}")
    return result

@app.task(bind=True, name='tasks.test_task')
def test_task(self, message="Test from AI Services", delay=0):
    """Test task for debugging and monitoring"""
    logger.info(f"üß™ Test task started: {message}")
    
    if delay > 0:
        logger.info(f"‚è≥ Sleeping for {delay} seconds...")
        time.sleep(delay)
    
    result = {
        'message': message,
        'task_id': self.request.id,
        'timestamp': time.time(),
        'worker': self.request.hostname,
        'queue': 'default',
        'delay': delay,
        'status': 'success'
    }
    
    logger.info(f"üß™ Test task completed: {result}")
    return result

@app.task(bind=True, name='tasks.test_openai_connection')
def test_openai_connection(self):
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API"""
    logger.info("üîå Testing OpenAI connection...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á —á–µ—Ä–µ–∑ SettingsManager (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
        
        async def get_api_key():
            if settings_manager:
                return await settings_manager.get_openai_key()
            else:
                raise ValueError("SettingsManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞
        openai_key = asyncio.run(get_api_key())
        
        if not openai_key:
            raise ValueError("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Backend API")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI
        from openai import OpenAI
        client = OpenAI(api_key=openai_key)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": "Test message"}],
            max_tokens=10
        )
        
        result = {
            'status': 'success',
            'task_id': self.request.id,
            'timestamp': time.time(),
            'api_key_present': bool(openai_key),
            'test_response': response.choices[0].message.content if response.choices else None
        }
        
        logger.info("‚úÖ OpenAI connection test successful")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå OpenAI connection test failed: {e}")
        return {
            'status': 'error',
            'task_id': self.request.id,
            'timestamp': time.time(),
            'error': str(e)
        }

# AI Processing tasks
@app.task(bind=True, name='tasks.categorize_post')
def categorize_post(self, post: Dict, bot_id: int, **kwargs):
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    
    Args:
        post: –ü–æ—Å—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        bot_id: ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    logger.info(f"üè∑Ô∏è Categorize post task started: post {post.get('id')} for bot {bot_id}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        from services.categorization import CategorizationService
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á - –ü–†–ò–û–†–ò–¢–ï–¢ –£ SETTINGS_MANAGER
        openai_key = None
        if settings_manager:
            try:
                import asyncio
                openai_key = asyncio.run(settings_manager.get_openai_key())
                logger.info("‚úÖ OpenAI –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω –∏–∑ SettingsManager")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –∏–∑ SettingsManager: {e}")
                openai_key = None
        
        # Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ SettingsManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if not openai_key:
            openai_key = os.getenv('OPENAI_API_KEY')
            if openai_key:
                logger.info("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (fallback)")
        
        if not openai_key:
            logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ SettingsManager, –Ω–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return {
                'task_id': self.request.id,
                'bot_id': bot_id,
                'post_id': post.get('id'),
                'result': None,
                'status': 'error',
                'error': 'missing_openai_api_key',
                'timestamp': time.time()
            }

        categorization_service = CategorizationService(
            backend_url=BACKEND_URL,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            settings_manager=settings_manager
        )
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ Backend API)
        bot_categories = kwargs.get('bot_categories', [
            {'id': 1, 'name': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'},
            {'id': 2, 'name': '–ü–æ–ª–∏—Ç–∏–∫–∞'},
            {'id': 3, 'name': '–≠–∫–æ–Ω–æ–º–∏–∫–∞'}
        ])
        
        # –°–æ–∑–¥–∞—ë–º —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π PostData –æ–±—ä–µ–∫—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–µ—Ä–≤–∏—Å—É (id, content)
        from types import SimpleNamespace
        simple_post = SimpleNamespace(
            id=post.get('id'),
            channel_telegram_id=post.get('channel_telegram_id'),
            telegram_message_id=post.get('telegram_message_id'),
            title=post.get('title'),
            content=post.get('content')
        )

        import asyncio
        result_list = asyncio.run(
            categorization_service.process_with_bot_config([simple_post], bot_id)
        )
        result = result_list[0] if result_list else {}
        
        logger.info(f"‚úÖ Categorize post task completed: {result}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'post_id': post.get('id'),
            'result': result,
            'status': 'success',
            'timestamp': time.time()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Categorize post task failed: {e}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'post_id': post.get('id'),
            'result': None,
            'status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

@app.task(bind=True, name='tasks.categorize_batch')
def categorize_batch(self, posts: List[Dict], bot_id: int, **kwargs):
    """
    –ë–∞—Ç—á–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
    """
    logger.info(f"üè∑Ô∏è Async Categorize batch task started: {len(posts)} posts for bot {bot_id}")
    try:
        from services_celery.categorization_celery import CategorizationServiceCelery
        categorizer = CategorizationServiceCelery(
            backend_url=BACKEND_URL, 
            settings_manager=settings_manager
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Celery
        results = asyncio.run(categorizer.process_with_bot_config_async(posts, bot_id))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        if results:
            batch_payload = {
                "service": "categorization",
                "results": results
            }
            with httpx.Client() as client:
                response = client.post(f"{BACKEND_URL}/api/ai/service-results/batch", json=batch_payload, timeout=60)
                response.raise_for_status()
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {response.json()}")

        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'posts_count': len(posts),
            'results_count': len(results),
            'status': 'success',
            'timestamp': time.time()
        }
    except Exception as e:
        logger.error(f"‚ùå Categorize batch task failed: {e}", exc_info=True)
        return {'status': 'error', 'error': str(e)}

@app.task(bind=True, name='tasks.summarize_posts')
def summarize_posts(self, posts: List[Dict], bot_id: int, mode: str = 'individual', **kwargs):
    """
    –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
    
    Args:
        posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        bot_id: ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞
        mode: –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ ('individual' –∏–ª–∏ 'batch')
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
    """
    logger.info(f"üìù Async Summarize posts task started: {len(posts)} posts for bot {bot_id} in {mode} mode")
    
    try:
        from services_celery.summarization_celery import SummarizationServiceCelery
        summarizer = SummarizationServiceCelery(settings_manager=settings_manager)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Celery
        results = asyncio.run(summarizer.process_posts_individually_async(posts, bot_id, **kwargs))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        if results:
            batch_payload = {
                "service": "summarization",
                "results": results
            }
            with httpx.Client() as client:
                response = client.post(f"{BACKEND_URL}/api/ai/service-results/batch", json=batch_payload, timeout=60)
                response.raise_for_status()
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {response.json()}")

        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'posts_count': len(posts),
            'results_count': len(results),
            'status': 'success',
            'timestamp': time.time()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Summarize posts task failed: {e}", exc_info=True)
        return {'status': 'error', 'error': str(e)}

@app.task(bind=True, name='tasks.summarize_batch')
def summarize_batch(self, posts: List[Dict], bot_id: int, **kwargs):
    """
    –ë–∞—Ç—á–µ–≤–∞—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
    """
    return summarize_posts(posts, bot_id, mode='batch', **kwargs)

@app.task(bind=True, name='tasks.process_digest')
def process_digest(self, bot_id: int, posts: List[Dict], **kwargs):
    """
    –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è + —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
    
    Args:
        bot_id: ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞
        posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    """
    logger.info(f"üîÑ Process digest task started: {len(posts)} posts for bot {bot_id}")
    
    try:
        # –®–∞–≥ 1: –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
        categorization_result = categorize_batch.delay(posts, bot_id, **kwargs)
        categorization_data = categorization_result.get(timeout=300)  # 5 –º–∏–Ω—É—Ç
        
        if categorization_data['status'] != 'success':
            raise Exception(f"Categorization failed: {categorization_data.get('error')}")
        
        # –®–∞–≥ 2: –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        summarization_result = summarize_posts.delay(posts, bot_id, mode='individual', **kwargs)
        summarization_data = summarization_result.get(timeout=300)  # 5 –º–∏–Ω—É—Ç
        
        if summarization_data['status'] != 'success':
            raise Exception(f"Summarization failed: {summarization_data.get('error')}")
        
        logger.info(f"‚úÖ Process digest task completed for bot {bot_id}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'posts_count': len(posts),
            'categorization': categorization_data,
            'summarization': summarization_data,
            'status': 'success',
            'timestamp': time.time()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Process digest task failed: {e}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'posts_count': len(posts),
            'categorization': None,
            'summarization': None,
            'status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

# Cleanup tasks
@app.task(bind=True, name='tasks.cleanup_expired_results')
def cleanup_expired_results(self, max_age_hours: int = 24):
    """
    –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á
    
    Args:
        max_age_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —á–∞—Å–∞—Ö
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    logger.info(f"üßπ Cleanup expired results task started: max_age={max_age_hours}h")
    
    try:
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis
        
        result = {
            'task_id': self.request.id,
            'max_age_hours': max_age_hours,
            'deleted_count': 0,  # Placeholder
            'status': 'success',
            'timestamp': time.time()
        }
        
        logger.info(f"üßπ Cleanup expired results task completed: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Cleanup expired results task failed: {e}")
        return {
            'task_id': self.request.id,
            'max_age_hours': max_age_hours,
            'deleted_count': 0,
            'status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

# AI Orchestrator tasks
@app.task(bind=True, name='tasks.trigger_ai_processing')
def trigger_ai_processing(self, bot_id: Optional[int] = None, force_reprocess: bool = False):
    """
    –ó–∞–ø—É—Å–∫ AI Orchestrator –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤
    
    Args:
        bot_id: ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞ (None –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤)
        force_reprocess: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ AI Orchestrator
    """
    logger.info(f"ü§ñ AI Orchestrator task started: bot_id={bot_id}, force_reprocess={force_reprocess}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI Orchestrator
        # üîÑ –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –Ω–æ–≤—ã–µ Celery pipeline –∑–∞–¥–∞—á–∏
        task_map = []
        if bot_id is None:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ Backend API
            try:
                import httpx
                with httpx.Client(timeout=30) as client:
                    resp = client.get(f"{BACKEND_URL}/api/public-bots", params={"status_filter": "active"})
                    resp.raise_for_status()
                    bots = resp.json()
                    bot_ids = [b['id'] for b in bots]
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤: {e}")
                bot_ids = []
        else:
            bot_ids = [bot_id]

        for b_id in bot_ids:
            t = process_bot_digest.delay(b_id)
            task_map.append({"bot_id": b_id, "task_id": t.id})

        logger.info(f"‚úÖ AI trigger redirected: {task_map}")

        return {
            'task_id': self.request.id,
            'tasks': task_map,
            'status': 'success',
            'timestamp': time.time()
        }
        
    except Exception as e:
        logger.error(f"‚ùå AI Orchestrator task failed: {e}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            # —É–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø–æ–ª–µ
            'result': None,
            'status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

@app.task(bind=True, name='tasks.generate_digest_preview')
def generate_digest_preview(self, bot_id: int, limit: int = 10):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    
    Args:
        bot_id: ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–≤—å—é
        
    Returns:
        –ü—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
    """
    logger.info(f"üìã Generate digest preview task started: bot_id={bot_id}, limit={limit}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI Orchestrator  
        from orchestrator_v5_parallel import generate_digest_preview_parallel
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
        preview_result = generate_digest_preview_parallel(bot_id=bot_id, limit=limit)
        
        logger.info(f"‚úÖ Generate digest preview task completed for bot {bot_id}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'limit': limit,
            'preview': preview_result,
            'status': 'success',
            'timestamp': time.time()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Generate digest preview task failed: {e}")
        
        return {
            'task_id': self.request.id,
            'bot_id': bot_id,
            'limit': limit,
            'preview': None,
            'status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

# NEW TASK: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
@app.task(bind=True, name='tasks.process_bot_digest')
def process_bot_digest(self, bot_id: int, limit: int = 50):
    """–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è + —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è).

    –®–∞–≥–∏:
    1. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞
    2. –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã (require_categorization)
    3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å CategorizationService –∏ SummarizationService
    4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–µ–º —á–µ—Ä–µ–∑ /api/ai/results/batch
    """

    logger.info(f"üöÄ process_bot_digest started for bot {bot_id}")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º context manager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è httpx –∫–ª–∏–µ–Ω—Ç–∞
        with httpx.Client(timeout=60) as session:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
            cat_resp = session.get(f"{BACKEND_URL}/api/public-bots/{bot_id}/categories", timeout=30)
            cat_resp.raise_for_status()
            bot_categories = cat_resp.json()

            if not bot_categories:
                logger.warning(f"‚ö†Ô∏è –£ –±–æ—Ç–∞ {bot_id} –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Äì –ø—Ä–æ–ø—É—Å–∫")
                return {
                    'status': 'skipped',
                    'reason': 'no_categories',
                    'bot_id': bot_id,
                    'task_id': self.request.id,
                    'timestamp': time.time()
                }

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
            categories_for_service = []
            for c in bot_categories:
                cat_name = c.get('name') or c.get('category_name') or c.get('category')
                if not cat_name:
                    cat_name = f"Category {c.get('id')}"
                categories_for_service.append({'id': c['id'], 'name': cat_name})

            # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            posts_resp = session.get(
                f"{BACKEND_URL}/api/posts/unprocessed",
                params={
                    'bot_id': bot_id,
                    'require_categorization': 'true',
                    'limit': limit
                },
                timeout=60
            )
            posts_resp.raise_for_status()
            posts = posts_resp.json()

            if not posts:
                logger.info(f"‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                return {
                    'status': 'nothing_to_do',
                    'bot_id': bot_id,
                    'posts_processed': 0,
                    'task_id': self.request.id,
                    'timestamp': time.time()
                }

            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å—ã
            from services.categorization import CategorizationService
            from services.summarization import SummarizationService

            # –ü–æ–ª—É—á–∞–µ–º OpenAI API –∫–ª—é—á - –ü–†–ò–û–†–ò–¢–ï–¢ –£ SETTINGS_MANAGER
            openai_api_key = None
            if settings_manager:
                try:
                    import asyncio
                    openai_api_key = asyncio.run(settings_manager.get_openai_key())
                    logger.info("‚úÖ OpenAI –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω –∏–∑ SettingsManager –¥–ª—è process_bot_digest")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –∏–∑ SettingsManager: {e}")
                    openai_api_key = None
            
            # Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ SettingsManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            if not openai_api_key:
                openai_api_key = os.getenv('OPENAI_API_KEY')
                if openai_api_key:
                    logger.info("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (fallback)")
            
            if not openai_api_key:
                logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ SettingsManager, –Ω–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return {
                    'status': 'error',
                    'error': 'missing_openai_api_key',
                    'bot_id': bot_id,
                    'task_id': self.request.id,
                    'timestamp': time.time()
                }

            categorizer = CategorizationService(
                backend_url=BACKEND_URL,
                settings_manager=settings_manager
            )
            summarizer = SummarizationService(settings_manager=settings_manager)

            ai_results_payload = []

            try:
                # AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤
                for post in posts:
                    try:
                        cat_result = categorizer.categorize_post(post, categories_for_service)

                        # summary –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ—Å—Ç–æ–≤
                        summary_data = asyncio.run(
                            summarizer.process(
                                text=post.get('content') or '',
                                max_summary_length=150
                            )
                        )

                        ai_results_payload.append({
                            'post_id': post['id'],
                            'public_bot_id': bot_id,
                            'summaries': {
                                'summary': summary_data.get('summary', '')
                            },
                            'categories': {
                                'category': cat_result.get('category')
                            },
                            'metrics': {
                                'relevance': cat_result.get('relevance', 0)
                            }
                        })

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ {post['id']}: {e}")

                if not ai_results_payload:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                    return {
                        'status': 'error',
                        'error': 'no_results',
                        'bot_id': bot_id,
                        'task_id': self.request.id,
                        'timestamp': time.time()
                    }

                # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–µ–º
                save_resp = session.post(f"{BACKEND_URL}/api/ai/results/batch", json=ai_results_payload, timeout=60)
                save_resp.raise_for_status()

                saved_results = save_resp.json()

                logger.info(f"‚úÖ process_bot_digest completed for bot {bot_id}: {len(saved_results)} results saved")

                return {
                    'status': 'success',
                    'bot_id': bot_id,
                    'posts_processed': len(saved_results),
                    'task_id': self.request.id,
                    'timestamp': time.time()
                }
                
            finally:
                # üîí –°–µ—Ä–≤–∏—Å—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è - –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
                pass

    except Exception as e:
        logger.error(f"‚ùå process_bot_digest failed for bot {bot_id}: {e}")
        return {
            'status': 'error',
            'bot_id': bot_id,
            'error': str(e),
            'task_id': self.request.id,
            'timestamp': time.time()
        }

# –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê-–î–ò–°–ü–ï–¢–ß–ï–† –î–õ–Ø –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ì–û –ó–ê–ü–£–°–ö–ê
@app.task(bind=True, name='tasks.dispatch_ai_processing')
def dispatch_ai_processing(self, post_ids: List[int], bot_id: int, services: Optional[List[str]] = None):
    """
    –î–∏—Å–ø–µ—Ç—á–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç AI —Å–µ—Ä–≤–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤.
    
    Args:
        post_ids: –°–ø–∏—Å–æ–∫ ID –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        bot_id: ID –±–æ—Ç–∞
        services: –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞. –ï—Å–ª–∏ None - –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã.
                 –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ["categorization", "summarization"]
    """
    logger.info(f"üöÄ –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(post_ids)} –ø–æ—Å—Ç–æ–≤, –±–æ—Ç {bot_id}, —Å–µ—Ä–≤–∏—Å—ã: {services or '–í–°–ï'}")
    
    # –†–µ–µ—Å—Ç—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
    AI_SERVICES = {
        "categorization": {"queue": "categorization", "task": "tasks.categorize_batch"},
        "summarization":  {"queue": "summarization",  "task": "tasks.summarize_posts"},
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    if services:
        services_to_run = {k: v for k, v in AI_SERVICES.items() if k in services}
    else:
        services_to_run = AI_SERVICES

    try:
        group_tasks = []
        for service, meta in services_to_run.items():
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ –∏—Ö ID —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            with httpx.Client(timeout=60) as client:
                posts_data = []
                for post_id in post_ids:
                    try:
                        post_resp = client.get(f"{BACKEND_URL}/api/posts/cache/{post_id}")
                        if post_resp.status_code == 200:
                            post_data = post_resp.json()
                            if post_data:
                                posts_data.append(post_data)
                                title = post_data.get('title') or post_data.get('content', '–ë–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ')[:50] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç'
                                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ—Å—Ç {post_id}: {title[:50]}...")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç {post_id} –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
                        else:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç {post_id}: HTTP {post_resp.status_code}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
                        continue

                if not posts_data:
                    logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å—Ç—ã {post_ids} –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service}")
                    continue

                task_name = meta['task']
                queue_name = meta['queue']

                # –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏: –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è ‚Äî –±–∞—Ç—á–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫; —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è ‚Äî –ø–æ –æ–¥–Ω–æ–º—É
                chunks: list[list[dict]] = []
                if task_name == 'tasks.categorize_batch':
                    # –ß–∏—Ç–∞–µ–º batch_size –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, fallback 5
                    batch_size = 5
                    try:
                        if settings_manager is not None:
                            cat_cfg = settings_manager.get_ai_service_config_sync('categorization') if hasattr(settings_manager, 'get_ai_service_config_sync') else None
                            if not cat_cfg:
                                # —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ñ–æ–ª–ª–±–µ–∫
                                import asyncio as _asyncio
                                cat_cfg = _asyncio.run(settings_manager.get_ai_service_config('categorization'))
                            if cat_cfg and isinstance(cat_cfg.get('batch_size'), int) and cat_cfg['batch_size'] > 0:
                                batch_size = cat_cfg['batch_size']
                    except Exception:
                        pass
                    for i in range(0, len(posts_data), batch_size):
                        chunks.append(posts_data[i:i+batch_size])
                else:
                    # –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è ‚Äî –ø–æ –æ–¥–Ω–æ–º—É –ø–æ—Å—Ç—É –Ω–∞ –∑–∞–¥–∞—á—É
                    for item in posts_data:
                        chunks.append([item])

                for chunk in chunks:
                    if task_name == 'tasks.summarize_posts':
                        sig = app.signature(
                            task_name,
                            args=[chunk, bot_id],
                            kwargs={'mode': 'individual'},
                            queue=queue_name
                        )
                    else:
                        sig = app.signature(
                            task_name,
                            args=[chunk, bot_id],
                            queue=queue_name
                        )
                    group_tasks.append(sig)
                logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(chunks)} –∑–∞–¥–∞—á(–∏) –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service}: —Å—É–º–º–∞—Ä–Ω–æ {len(posts_data)} –ø–æ—Å—Ç–æ–≤")

        if not group_tasks:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤ {post_ids}")
            return {'status': 'error', 'error': 'no_tasks_prepared'}

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        job = group(group_tasks)
        result = job.apply_async()
        
        logger.info(f"‚úÖ {len(group_tasks)} —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, group_id: {result.id}")
        return {'status': 'success', 'group_id': result.id, 'services_count': len(group_tasks)}

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ dispatch_ai_processing: {e}", exc_info=True)
        return {'status': 'error', 'error': str(e)}


@app.task(bind=True, name='tasks.check_for_new_posts')
def check_for_new_posts(self):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã - –∑–∞–ø—É—Å–∫–∞–µ—Ç trigger_ai_processing
    
    –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ —á–µ—Ä–µ–∑ Celery Beat
    """
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...")
    
    try:
        import httpx
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        active_bots_resp = httpx.get(f"{BACKEND_URL}/api/public-bots?status_filter=active")
        active_bots_resp.raise_for_status()
        active_bots = active_bots_resp.json()

        if not active_bots:
            logger.info("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return {'status': 'no_active_bots'}

        total_dispatched_posts = 0
        dispatched_bots_count = 0

        # 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ –∏—â–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        for bot in active_bots:
            bot_id = bot['id']
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Æ
            response_cat = httpx.get(
                f"{BACKEND_URL}/api/posts/unprocessed",
                params={'bot_id': bot_id, 'limit': 500, 'require_categorization': True} 
            )
            response_cat.raise_for_status()
            categorization_posts = response_cat.json()

            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–ê–ú–ú–ê–†–ò–ó–ê–¶–ò–Æ
            response_sum = httpx.get(
                f"{BACKEND_URL}/api/posts/unprocessed",
                params={'bot_id': bot_id, 'limit': 500, 'require_summarization': True} 
            )
            response_sum.raise_for_status()
            summarization_posts = response_sum.json()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
            if categorization_posts:
                post_ids = [p['id'] for p in categorization_posts]
                logger.info(f"üè∑Ô∏è –î–ª—è –±–æ—Ç–∞ {bot_id} –Ω–∞–π–¥–µ–Ω–æ {len(post_ids)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–ò. –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä...")
                dispatch_ai_processing.delay(post_ids=post_ids, bot_id=bot_id, services=["categorization"])
                total_dispatched_posts += len(post_ids)
                dispatched_bots_count += 1
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            if summarization_posts:
                post_ids = [p['id'] for p in summarization_posts]
                logger.info(f"üìù –î–ª—è –±–æ—Ç–∞ {bot_id} –Ω–∞–π–¥–µ–Ω–æ {len(post_ids)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –°–ê–ú–ú–ê–†–ò–ó–ê–¶–ò–ò. –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä...")
                dispatch_ai_processing.delay(post_ids=post_ids, bot_id=bot_id, services=["summarization"])
                total_dispatched_posts += len(post_ids)
                dispatched_bots_count += 1
        
        if total_dispatched_posts > 0:
            return {
                'task_id': self.request.id,
                'status': 'triggered',
                'found_posts': total_dispatched_posts,
                'dispatched_bots': dispatched_bots_count,
                'timestamp': time.time()
            }
        else:
            logger.info("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return {
                'task_id': self.request.id,
                'status': 'nothing_to_do',
                'timestamp': time.time()
            }
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
        return {
            'task_id': self.request.id,
            'status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

# Export all tasks
__all__ = [
    'ping_task',
    'test_task',
    'test_openai_connection',
    'categorize_post',
    'categorize_batch',
    'summarize_posts',
    'summarize_batch',
    'process_digest',
    'cleanup_expired_results',
    'trigger_ai_processing',
    'generate_digest_preview',
    'process_bot_digest',
    'check_for_new_posts'
] 