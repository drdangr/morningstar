#!/usr/bin/env python3
"""
AI Orchestrator v2.0 - Event-Driven Architecture
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä AI —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é –∏ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
"""

import asyncio
import aiohttp
import heapq
import os
import sys
from datetime import datetime, timedelta
from enum import Enum
from dataclasses import dataclass, field
from typing import List, Dict, Any, Optional
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
from ai_services.services.categorization import CategorizationService
from ai_services.services.summarization import SummarizationService

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
class AITaskPriority(Enum):
    BACKGROUND = 1    # –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–∫–æ–≥–¥–∞ –≤—Å–µ —Å–¥–µ–ª–∞–Ω–æ)
    NORMAL = 2        # –ü–ª–∞–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    HIGH = 3          # –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã, —Å–∫–æ—Ä—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã
    URGENT = 4        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    CRITICAL = 5      # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

class AITaskType(Enum):
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    STARTUP_PROCESSING = "startup_processing"
    BACKGROUND_PROCESSING = "background_processing"
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (CRITICAL –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    FORCE_REPROCESS_ALL = "force_reprocess_all"
    FORCE_REPROCESS_CHANNELS = "force_reprocess_channels"
    FORCE_REPROCESS_BOT = "force_reprocess_bot"
    CLEAR_AI_RESULTS = "clear_ai_results"
    
    # –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (URGENT/CRITICAL –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    NEW_POSTS_PROCESSING = "new_posts_processing"
    BOT_SETTINGS_CHANGED = "bot_settings_changed"
    USER_URGENT_REQUEST = "user_urgent_request"
    
    # –ü–ª–∞–Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (NORMAL/HIGH –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    SCHEDULED_PROCESSING = "scheduled_processing"
    DIGEST_PREPARATION = "digest_preparation"

@dataclass
class AITask:
    task_type: AITaskType
    priority: AITaskPriority
    bot_id: Optional[int] = None
    channel_ids: Optional[List[int]] = None
    post_ids: Optional[List[int]] = None
    user_id: Optional[int] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    created_at: datetime = field(default_factory=datetime.utcnow)
    
    def __lt__(self, other):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è heapq (–º–µ–Ω—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = –≤—ã—à–µ –≤ –æ—á–µ—Ä–µ–¥–∏)"""
        return (-self.priority.value, self.created_at) < (-other.priority.value, other.created_at)

class AIOrchestratorV2:
    """
    AI Orchestrator v2.0 - Event-Driven Architecture
    
    –§—É–Ω–∫—Ü–∏–∏:
    1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á (heapq)
    2. –†–µ–∞–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç Userbot
    3. –£–º–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞/–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    4. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    5. Startup initialization —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, 
                 backend_url: str = "http://localhost:8000",
                 openai_api_key: Optional[str] = None,
                 batch_size: Optional[int] = None):
        
        self.backend_url = backend_url
        self.batch_size = batch_size  # –ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ None
        
        # Event-Driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
        self.task_queue = []  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å (heapq)
        self.processing_locks = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        self.background_worker_running = False
        self.processing_active = False  # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.last_activity = None
        self.worker_event = asyncio.Event()  # –°–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
        self.openai_api_key = openai_api_key or os.getenv("OPENAI_API_KEY")
        if not self.openai_api_key:
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è mock —Ä–µ–∂–∏–º")
        
        # AI —Å–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ startup_initialization –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.categorization_service = None
        self.summarization_service = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_processed": 0,
            "successful_processed": 0,
            "failed_processed": 0,
            "last_run": None,
            "processing_time": 0,
            "queue_size": 0,
            "active_tasks": 0
        }
        
        logger.info("ü§ñ AI Orchestrator v2.0 (Event-Driven) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üì° Backend URL: {self.backend_url}")
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size}")

    # === –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô –ò –ü–†–ò–û–†–ò–¢–ï–¢–û–í ===
    
    async def handle_new_posts_from_userbot(self, post_ids: List[int], channel_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç Userbot"""
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ {len(post_ids)} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –±–æ—Ç–æ–≤
        affected_bots = await self._get_bots_using_channel(channel_id)
        
        if not affected_bots:
            logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞
        for bot_id in affected_bots:
            task = AITask(
                task_type=AITaskType.NEW_POSTS_PROCESSING,
                priority=AITaskPriority.CRITICAL,  # –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                bot_id=bot_id,
                post_ids=post_ids,
                metadata={
                    'channel_id': channel_id,
                    'trigger': 'userbot_new_posts',
                    'posts_count': len(post_ids)
                }
            )
            
            await self._add_task_to_queue(task)
        
        # –ï—Å–ª–∏ —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è - –∑–∞–ø—É—Å–∫–∞–µ–º
        if not self.background_worker_running:
            logger.info("üîÑ –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º...")
            await self._start_background_worker()

    async def _add_task_to_queue(self, task: AITask):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        if await self._is_duplicate_task(task):
            logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task.task_type.value} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if task.priority == AITaskPriority.CRITICAL:
            await self._interrupt_current_processing(task)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å
        heapq.heappush(self.task_queue, task)
        self.stats['queue_size'] = len(self.task_queue)
        
        logger.info(f"‚ûï –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task.task_type.value} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.name})")
        
        # –ë—É–¥–∏–º —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.worker_event.set()

    async def _is_duplicate_task(self, task: AITask) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏ –∏ bot_id
        for existing_task in self.task_queue:
            if (existing_task.task_type == task.task_type and 
                existing_task.bot_id == task.bot_id):
                return True
        return False

    async def _interrupt_current_processing(self, urgent_task: AITask):
        """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        if urgent_task.priority == AITaskPriority.CRITICAL:
            logger.warning(f"üö® –ü–†–ï–†–´–í–ê–ù–ò–ï: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ {urgent_task.task_type.value}")
            
            # –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            for lock_key in list(self.processing_locks.keys()):
                current_task = self.processing_locks[lock_key]
                if current_task.priority.value < urgent_task.priority.value:
                    logger.info(f"‚è∏Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É {current_task.task_type.value}")

    # === –£–ú–ù–´–ô –§–û–ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ===
    
    async def _start_background_worker(self):
        """–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        if self.background_worker_running:
            return
        
        self.background_worker_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(self._smart_background_worker())

    async def _smart_background_worker(self):
        """–£–º–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∑–∞—Å—ã–ø–∞–Ω–∏–µ–º/–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ–º –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º"""
        logger.info("üß† –£–º–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        self.background_worker_running = True
        
        try:
            while self.background_worker_running:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
                if self.task_queue:
                    logger.info(f"üìã –í –æ—á–µ—Ä–µ–¥–∏ {len(self.task_queue)} –∑–∞–¥–∞—á, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                    while self.task_queue and self.background_worker_running:
                        task = heapq.heappop(self.task_queue)
                        self.stats['queue_size'] = len(self.task_queue)
                        
                        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏: {task.task_type.value} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.name})")
                        await self.report_orchestrator_status("PROCESSING", {
                            "current_task": task.task_type.value,
                            "priority": task.priority.name,
                            "queue_remaining": len(self.task_queue)
                        })
                        
                        success = await self._process_task(task)
                        
                        if success:
                            self.stats['successful_processed'] += 1
                            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task.task_type.value} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        else:
                            self.stats['failed_processed'] += 1
                            logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ {task.task_type.value} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")
                        
                        self.stats['total_processed'] += 1
                        self.last_activity = datetime.utcnow()
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
                        await asyncio.sleep(0.5)
                
                else:
                    # –ù–µ—Ç –∑–∞–¥–∞—á - –∑–∞—Å—ã–ø–∞–µ–º –¥–æ —Å–∏–≥–Ω–∞–ª–∞
                    logger.info("üò¥ –ù–µ—Ç –∑–∞–¥–∞—á, –∑–∞—Å—ã–ø–∞–µ–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞...")
                    await self.report_orchestrator_status("IDLE", {"queue_size": 0})
                    
                    # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º Backend API –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                    try:
                        await asyncio.wait_for(self.worker_event.wait(), timeout=30.0)
                        self.worker_event.clear()
                        logger.info("‚ö° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è!")
                    except asyncio.TimeoutError:
                        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Backend API –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞–Ω–∏–π
                        logger.debug("üîç –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Backend API...")
                        await self._check_for_pending_tasks()
                        
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {str(e)}")
        finally:
            self.background_worker_running = False
            await self.report_orchestrator_status("STOPPED", {"reason": "background_worker_terminated"})
            logger.info("üõë –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _check_for_pending_tasks(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Backend API –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞–Ω–∏–π –æ—Ç single —Ä–µ–∂–∏–º–∞ –ò pending –ø–æ—Å—Ç–æ–≤"""
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç Backend API
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/ai/orchestrator-commands") as response:
                    if response.status == 200:
                        commands = await response.json()
                        
                        for command in commands:
                            command_type = command.get('command_type')
                            if command_type == 'trigger_processing':
                                logger.info("üì° –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ trigger_processing –æ—Ç Backend API")
                                
                                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                                task = AITask(
                                    task_type=AITaskType.BACKGROUND_PROCESSING,
                                    priority=AITaskPriority.NORMAL,
                                    metadata={'trigger': 'backend_api_command'}
                                )
                                
                                await self._add_task_to_queue(task)
                                
                                # –ü–æ–º–µ—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                                await self._mark_command_processed(command['id'])
                    
                    elif response.status == 404:
                        # Endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Backend
                        pass
                    else:
                        logger.debug(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–∞–Ω–¥: {response.status}")
                        
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pending –ø–æ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
            pending_data = await self._check_pending_data()
            if pending_data['total_posts'] > 0:
                logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {pending_data['total_posts']} pending –ø–æ—Å—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                task = AITask(
                    task_type=AITaskType.BACKGROUND_PROCESSING,
                    priority=AITaskPriority.NORMAL,
                    metadata={'trigger': 'periodic_check', 'total_posts': pending_data['total_posts']}
                )
                
                await self._add_task_to_queue(task)
            else:
                logger.debug("‚úÖ –ù–µ—Ç pending –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                        
        except Exception as e:
            logger.debug(f"üîç –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥/–¥–∞–Ω–Ω—ã—Ö Backend API: {str(e)}")

    async def _mark_command_processed(self, command_id: int):
        """–ü–æ–º–µ—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≤ Backend API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.delete(f"{self.backend_url}/api/ai/orchestrator-commands/{command_id}") as response:
                    if response.status == 200:
                        logger.debug(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {command_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è")
                    else:
                        logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É {command_id}: HTTP {response.status}")
        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã {command_id}: {str(e)}")

    async def startup_initialization(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üöÄ Startup Initialization - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å—ã
        await self._initialize_ai_services()
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        pending_data = await self._check_pending_data()
        
        if pending_data['total_posts'] > 0:
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {pending_data['total_posts']} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            
            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            await self._schedule_pending_data_processing(pending_data)
        else:
            logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        
        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await self._start_background_worker()
        
        logger.info("‚úÖ AI Orchestrator –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    async def run_continuous(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ Event-Driven —Ä–µ–∂–∏–º–µ"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π Event-Driven –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # Startup initialization
        await self.startup_initialization()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        try:
            while True:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if self.background_worker_running:
                    logger.debug(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ—á–µ—Ä–µ–¥—å={len(self.task_queue)}, –∞–∫—Ç–∏–≤–Ω—ã—Ö={len(self.processing_locks)}")
                
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            await self.stop_background_worker()

    async def stop_background_worker(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        self.background_worker_running = False
        self.worker_event.set()  # –ë—É–¥–∏–º —á—Ç–æ–±—ã –æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è

    # === –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ú–ï–¢–û–î–û–í (–ë–£–î–£–¢ –†–ï–ê–õ–ò–ó–û–í–ê–ù–´) ===
    
    async def _get_bots_using_channel(self, channel_id: int) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
        return [1] if channel_id else []

    async def _check_pending_data(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/posts/unprocessed?limit=500") as response:
                    if response.status == 200:
                        posts = await response.json()
                        return {
                            'total_posts': len(posts),
                            'bots_affected': 1,  # –ó–∞–≥–ª—É—à–∫–∞
                            'pending_by_bot': {1: len(posts)}
                        }
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: HTTP {response.status}")
                        return {'total_posts': 0, 'bots_affected': 0, 'pending_by_bot': {}}
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return {'total_posts': 0, 'bots_affected': 0, 'pending_by_bot': {}}

    async def _schedule_pending_data_processing(self, pending_data: Dict[str, Any]):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"""
        logger.info(f"üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {pending_data['total_posts']} –ø–æ—Å—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        task = AITask(
            task_type=AITaskType.BACKGROUND_PROCESSING,
            priority=AITaskPriority.NORMAL,
            metadata={'startup_processing': True, 'total_posts': pending_data['total_posts']}
        )
        
        await self._add_task_to_queue(task)
        logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")

    async def _process_task(self, task: AITask) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ {task.task_type.value}")
        
        try:
            if task.task_type == AITaskType.BACKGROUND_PROCESSING:
                return await self._process_background_batch()
            elif task.task_type == AITaskType.NEW_POSTS_PROCESSING:
                return await self._process_new_posts(task.post_ids, task.channel_ids)
            elif task.task_type == AITaskType.FORCE_REPROCESS_CHANNELS:
                return await self._reprocess_channels(task.channel_ids)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task.task_type.value}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task.task_type.value}: {str(e)}")
            return False

    async def _process_background_batch(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –±–∞—Ç—á–∞ –ø–æ—Å—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –±–æ—Ç–∞–º"""
        logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –±–∞—Ç—á–∞")
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
            active_bots = await self._get_active_bots()
            if not active_bots:
                logger.info("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return True
            
            logger.info(f"ü§ñ –ù–∞–π–¥–µ–Ω–æ {len(active_bots)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤")
            
            # 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –ø–æ—Å—Ç—ã
            total_processed = 0
            for bot in active_bots:
                bot_id = bot['id']
                bot_name = bot['name']
                logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞: {bot_name} (ID: {bot_id})")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
                bot_channels = await self._get_bot_channels(bot_id)
                if not bot_channels:
                    logger.info(f"‚ö†Ô∏è –£ –±–æ—Ç–∞ {bot_name} –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º telegram_id –∫–∞–Ω–∞–ª–æ–≤
                channel_telegram_ids = [ch['telegram_id'] for ch in bot_channels]
                logger.info(f"üì∫ –ö–∞–Ω–∞–ª—ã –±–æ—Ç–∞ {bot_name}: {[ch['username'] for ch in bot_channels]}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
                bot_categories = await self._get_bot_categories(bot_id)
                if not bot_categories:
                    logger.info(f"‚ö†Ô∏è –£ –±–æ—Ç–∞ {bot_name} –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                    continue
                
                category_names = [cat['category_name'] for cat in bot_categories]
                logger.info(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞ {bot_name}: {category_names}")
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
                bot_posts = await self._get_pending_posts_for_bot(channel_telegram_ids, limit=self.batch_size, bot_id=bot['id'])
                
                if not bot_posts:
                    logger.info(f"‚úÖ –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot_name}")
                    continue
                
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(bot_posts)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot_name}")
                
                # –°–†–ê–ó–£ –æ–±–Ω–æ–≤–ª—è–µ–º –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–æ–≤ –Ω–∞ "pending" –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
                post_ids = [post['id'] for post in bot_posts]
                await self._update_multitenant_status(post_ids, "pending", bot['id'])
                logger.info(f"üîÑ –ü–æ—Å—Ç—ã {post_ids} –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ 'pending' –¥–ª—è –±–æ—Ç–∞ {bot_name}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã –†–ï–ê–õ–¨–ù–´–ú–ò AI —Å–µ—Ä–≤–∏—Å–∞–º–∏
                ai_results = await self._process_posts_with_real_ai(bot_posts, bot, bot_categories)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if ai_results:
                    success = await self._save_ai_results(ai_results)
                    if success:
                        # –°—Ç–∞—Ç—É—Å—ã —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ _process_posts_with_real_ai
                        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(ai_results)} AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot_name}")
                        total_processed += len(ai_results)
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot_name}")
                        # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
                        post_ids = [result['post_id'] for result in ai_results]
                        await self._update_multitenant_status(post_ids, "failed", bot['id'])
            
            if total_processed > 0:
                logger.info(f"üéâ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed} –ø–æ—Å—Ç–æ–≤")
            else:
                logger.info("‚úÖ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –≤—Å–µ –±–æ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –Ω–µ—Ç orphan posts")
            
            return True  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True - –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ—Å—Ç–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –±–∞—Ç—á–∞: {str(e)}")
            return False

    async def _get_active_bots(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –±–æ—Ç–æ–≤"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots") as response:
                    if response.status == 200:
                        bots = await response.json()
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
                        active_bots = [bot for bot in bots if bot.get('status') == 'active']
                        return active_bots
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ—Ç–æ–≤: {str(e)}")
            return []

    async def _get_bot_channels(self, bot_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots/{bot_id}/channels") as response:
                    if response.status == 200:
                        channels = await response.json()
                        return channels
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞ {bot_id}: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞ {bot_id}: {str(e)}")
            return []

    async def _get_bot_categories(self, bot_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots/{bot_id}/categories") as response:
                    if response.status == 200:
                        categories = await response.json()
                        return categories
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞ {bot_id}: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞ {bot_id}: {str(e)}")
            return []

    async def _get_batch_size_from_settings(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Backend API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/settings") as response:
                    if response.status == 200:
                        settings = await response.json()
                        for setting in settings:
                            if setting.get('key') == 'MAX_POSTS_FOR_AI_ANALYSIS':
                                batch_size = int(setting.get('value', 30))
                                logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {batch_size}")
                                return batch_size
                        
                        logger.warning("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 'MAX_POSTS_FOR_AI_ANALYSIS' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º 30")
                        return 30
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: HTTP {response.status}")
                        return 30
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
            return 30

    async def _initialize_ai_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –±–∞—Ç—á–∞"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
        if self.batch_size is None:
            self.batch_size = await self._get_batch_size_from_settings()
            logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –ø–æ–ª—É—á–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {self.batch_size}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –±–∞—Ç—á–∞
        from ai_services.services.categorization import CategorizationService
        from ai_services.services.summarization import SummarizationService
        
        self.categorization_service = CategorizationService(
            openai_api_key=self.openai_api_key,
            backend_url=self.backend_url,
            batch_size=self.batch_size
        )
        
        self.summarization_service = SummarizationService(
            model_name="gpt-4o-mini",
            max_tokens=4000,
            temperature=0.3
        )
        
        logger.info(f"‚úÖ AI —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Ä–∞–∑–º–µ—Ä–æ–º –±–∞—Ç—á–∞: {self.batch_size}")

    async def _get_pending_posts_for_bot(self, channel_telegram_ids: List[int], limit: int = None, bot_id: int = None) -> List[Dict[str, Any]]:
        """‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ –ø—É–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 500
            fetch_limit = limit if limit is not None else 500
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–æ—Å—Ç—ã –∏–∑ –æ–±—â–µ–≥–æ –ø—É–ª–∞
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.backend_url}/api/posts/unprocessed",
                    params={"limit": fetch_limit * 3}  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                ) as response:
                    if response.status == 200:
                        all_posts = await response.json()
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: HTTP {response.status}")
                        return []
            
            # 2. –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
            bot_posts = [
                post for post in all_posts 
                if post.get('channel_telegram_id') in channel_telegram_ids
            ]
            
            if not bot_posts:
                logger.debug(f"üì≠ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞ {bot_id}")
                return []
            
            # 3. –ï—Å–ª–∏ bot_id –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ—Å—Ç—ã –ù–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
            if bot_id is not None:
                post_ids = [post['id'] for post in bot_posts]
                
                # üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É processed_data
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        f"{self.backend_url}/api/ai/results/batch-status",
                        params={
                            "post_ids": ",".join(map(str, post_ids)),
                            "bot_id": bot_id
                        }
                    ) as response:
                        if response.status == 200:
                            batch_status_response = await response.json()
                            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                            batch_status = batch_status_response.get('statuses', [])
                            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ completed –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
                            processed_post_ids = {
                                item['post_id'] for item in batch_status 
                                if item.get('status') == 'completed'
                            }
                            logger.debug(f"üîç –ë–æ—Ç {bot_id}: {len(processed_post_ids)} –ø–æ—Å—Ç–æ–≤ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ processed_data")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                            processed_post_ids = set()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ù–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
                unprocessed_posts = [
                    post for post in bot_posts 
                    if post['id'] not in processed_post_ids
                ]
                
                logger.info(f"üìä –ë–æ—Ç {bot_id}: {len(bot_posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤, {len(unprocessed_posts)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if limit is not None:
                    return unprocessed_posts[:limit]
                else:
                    return unprocessed_posts
            else:
                # –ï—Å–ª–∏ bot_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞
                if limit is not None:
                    return bot_posts[:limit]
                else:
                    return bot_posts
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {str(e)}")
            return []

    async def _process_posts_with_real_ai(self, posts: List[Dict[str, Any]], bot: Dict[str, Any], categories: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω—ã–º–∏ AI —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        logger.info(f"ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(posts)} –ø–æ—Å—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω—ã–º–∏ AI —Å–µ—Ä–≤–∏—Å–∞–º–∏")
        
        ai_results = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ AI —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            if self.categorization_service is None or self.summarization_service is None:
                logger.error("‚ùå AI —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
                return await self._process_posts_with_mock_ai(posts, bot)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ AI —Å–µ—Ä–≤–∏—Å—ã
            categorization_service = self.categorization_service
            summarization_service = self.summarization_service
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ—Å—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Post –¥–ª—è CategorizationService
            from ai_services.models.post import Post
            post_objects = []
            for post_data in posts:
                post_obj = Post(
                    id=post_data['id'],
                    content=post_data.get('content', ''),
                    channel_telegram_id=post_data.get('channel_telegram_id'),
                    created_at=post_data.get('created_at'),
                    telegram_message_id=post_data.get('message_id', 0)
                )
                post_objects.append(post_obj)
            
            # 1. –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ CategorizationService
            logger.info(f"üîÑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è {len(post_objects)} –ø–æ—Å—Ç–æ–≤")
            categorization_results = await categorization_service.process_with_bot_config(
                posts=post_objects,
                bot_id=bot['id']
            )
            
            # 2. –ë–ê–¢–ß–ï–í–ê–Ø —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ SummarizationService
            logger.info(f"üîÑ –ë–ê–¢–ß–ï–í–ê–Ø —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è {len(posts)} –ø–æ—Å—Ç–æ–≤")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            texts_for_summarization = []
            post_id_to_index = {}
            valid_posts = []
            
            for i, post in enumerate(posts):
                post_id = post['id']
                content = post.get('content', '')
                
                if not content or len(content.strip()) < 10:
                    logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç {post_id} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
                categorization_result = None
                for cat_result in categorization_results:
                    if cat_result.get('post_id') == post_id:
                        categorization_result = cat_result
                        break
                
                if not categorization_result:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                texts_for_summarization.append(content)
                post_id_to_index[post_id] = len(valid_posts)
                valid_posts.append(post)
            
            # –ë–∞—Ç—á–µ–≤–∞—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
            if texts_for_summarization:
                logger.info(f"üöÄ –ë–∞—Ç—á–µ–≤–∞—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è {len(texts_for_summarization)} –ø–æ—Å—Ç–æ–≤")
                summarization_results = await summarization_service.process_batch(
                    texts=texts_for_summarization,
                    language=bot.get('default_language', 'ru'),
                    custom_prompt=bot.get('summarization_prompt'),
                    max_summary_length=bot.get('max_summary_length', 150)
                )
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
                summarization_results = []
            
            # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ–±—ä–µ–¥–∏–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            logger.info(f"üîÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ {len(valid_posts)} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            for i, post in enumerate(valid_posts):
                try:
                    post_id = post['id']
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
                    categorization_result = None
                    for cat_result in categorization_results:
                        if cat_result.get('post_id') == post_id:
                            categorization_result = cat_result
                            break
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ –∏–Ω–¥–µ–∫—Å—É)
                    summarization_result = {}
                    if i < len(summarization_results):
                        summarization_result = summarization_results[i]
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    ai_result = {
                        "post_id": post_id,
                        "public_bot_id": bot['id'],  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π bot_id!
                        "summaries": {
                            "ru": summarization_result.get('summary', ''),
                            "en": summarization_result.get('summary_en', '')
                        },
                        "categories": {
                            "primary": categorization_result.get('category_name', '') if categorization_result else '',
                            "secondary": [],
                            "relevance_scores": [categorization_result.get('relevance_score', 0.0)] if categorization_result else [0.0]
                        },
                        "metrics": {
                            "importance": categorization_result.get('importance', 5.0) if categorization_result else 5.0,
                            "urgency": categorization_result.get('urgency', 5.0) if categorization_result else 5.0,
                            "significance": categorization_result.get('significance', 5.0) if categorization_result else 5.0,
                            "tokens_used": summarization_result.get('tokens_used', 0),
                            "processing_time": 0.0  # TODO: –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è
                        },
                        "processing_version": "v3.1_multitenant_batch"
                    }
                    
                    ai_results.append(ai_result)
                    
                    # üöÄ –£–ú–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–û–ì–û –°–¢–ê–¢–£–°–ê 
                    await self._update_multitenant_status([post_id], "completed", bot['id'], "both_services")
                    
                    category_name = categorization_result.get('category_name', 'N/A') if categorization_result else 'N/A'
                    logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {category_name}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ {post.get('id', 'Unknown')}: {str(e)}")
                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ failed
                    post_id = post.get('id')
                    if post_id:
                        await self._update_multitenant_status([post_id], "failed", bot['id'])
            
            logger.info(f"üéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(ai_results)} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(posts)}")
            return ai_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π AI –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏...")
            return await self._process_posts_with_mock_ai(posts, bot)

    async def _process_posts_with_mock_ai(self, posts: List[Dict[str, Any]], bot: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Fallback: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –∑–∞–≥–ª—É—à–∫–∞–º–∏ (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º bot_id)"""
        logger.info(f"üß™ Fallback: –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∑–∞–≥–ª—É—à–∫–∞–º–∏")
        
        ai_results = []
        for post in posts:
            post_id = post["id"]
            ai_result = {
                "post_id": post_id,
                "public_bot_id": bot['id'],  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π bot_id!
                "summaries": {
                    "ru": f"AI —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id} (–±–æ—Ç: {bot['name']})",
                    "en": f"AI summary for post {post_id} (bot: {bot['name']})"
                },
                "categories": {
                    "primary": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                    "secondary": ["AI", "–¢–µ—Å—Ç"],
                    "relevance_scores": [0.95, 0.85]
                },
                "metrics": {
                    "importance": 8.0,
                    "urgency": 7.0, 
                    "significance": 8.5,
                    "tokens_used": 150,
                    "processing_time": 1.5
                },
                                        "processing_version": "v3.1_multitenant_mock"
            }
            ai_results.append(ai_result)
            
            # üöÄ –£–ú–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–û–ì–û –°–¢–ê–¢–£–°–ê (Mock —Ä–µ–∂–∏–º)
            await self._update_multitenant_status([post_id], "completed", bot['id'], "both_services")
            logger.info(f"‚úÖ Mock –ø–æ—Å—Ç {post_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        
        return ai_results

    async def _process_new_posts(self, post_ids: List[int], channel_ids: List[int]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {len(post_ids)} –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ {channel_ids}")
        # –ó–∞–≥–ª—É—à–∫–∞
        return True

    async def _reprocess_channels(self, channel_ids: List[int]) -> bool:
        """–ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info(f"üîÑ –ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {channel_ids}")
        # –ó–∞–≥–ª—É—à–∫–∞
        return True

    async def report_orchestrator_status(self, status: str, details: Dict[str, Any] = None):
        """–û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ AI Orchestrator –≤ Backend API"""
        logger.debug(f"üì° –°—Ç–∞—Ç—É—Å: {status}, –¥–µ—Ç–∞–ª–∏: {details}")
        
        try:
            status_data = {
                "orchestrator_status": status,
                "timestamp": datetime.utcnow().isoformat() + "Z",
                "stats": {
                    "queue_size": len(self.task_queue),
                    "background_worker_running": self.background_worker_running,
                    "processing_active": self.processing_active
                },
                "details": details or {}
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.backend_url}/api/ai/orchestrator-status",
                    json=status_data,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        logger.debug("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Backend API")
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: HTTP {response.status}")
                        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

    async def trigger_processing(self):
        """–†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ Backend API)"""
        logger.info("‚ö° Trigger Processing - —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        task = AITask(
            task_type=AITaskType.BACKGROUND_PROCESSING,
            priority=AITaskPriority.NORMAL,
            metadata={'trigger': 'api_request'}
        )
        
        await self._add_task_to_queue(task)
        
        # –ï—Å–ª–∏ —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω - –∑–∞–ø—É—Å–∫–∞–µ–º
        if not self.background_worker_running:
            await self._start_background_worker()
        
        return {"success": True, "message": "AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"}

    async def run_single_batch(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞—Ç—á–∞ AI Orchestrator v2.0")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        await self._initialize_ai_services()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        task = AITask(
            task_type=AITaskType.BACKGROUND_PROCESSING,
            priority=AITaskPriority.NORMAL,
            metadata={'trigger': 'single_batch_test'}
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
        success = await self._process_task(task)
        
        if success:
            logger.info("üéâ –¢–µ—Å—Ç–æ–≤—ã–π –±–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.error("üí• –¢–µ—Å—Ç–æ–≤—ã–π –±–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
        
        return success

    async def _save_ai_results(self, ai_results: List[Dict[str, Any]]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Backend API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.backend_url}/api/ai/results/batch",
                    json=ai_results,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 201:
                        saved_results = await response.json()
                        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(saved_results)} AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: HTTP {response.status}")
                        logger.error(f"   –î–µ—Ç–∞–ª–∏: {error_text}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
            return False

    # ‚ùå –£–î–ê–õ–ï–ù –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î _update_posts_status - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ _update_multitenant_status –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

    async def _update_multitenant_status(self, post_ids: List[int], status: str, bot_id: int, service_type: str = None) -> bool:
        """üîß –ù–û–í–û–ï: –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            # üß† –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–¢–ê–¢–£–°–û–í
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ç–∏–ø–∞ —Å–µ—Ä–≤–∏—Å–∞
            smart_status = await self._calculate_smart_status(post_ids, bot_id, status, service_type)
            
            # üöÄ –ë–ê–¢–ß–ï–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π endpoint
            async with aiohttp.ClientSession() as session:
                async with session.put(
                    f"{self.backend_url}/api/ai/results/batch-status",
                    json={
                        "post_ids": post_ids,
                        "bot_id": bot_id,
                        "status": smart_status
                    },
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        affected_count = result.get('affected_count', 0)
                        logger.info(f"‚úÖ –ë–∞—Ç—á–µ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {affected_count} AI —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ '{smart_status}' –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: HTTP {response.status}")
                        logger.error(f"   –î–µ—Ç–∞–ª–∏: {error_text}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤: {str(e)}")
            return False

    async def _calculate_smart_status(self, post_ids: List[int], bot_id: int, requested_status: str, service_type: str = None) -> str:
        """üß† –£–º–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ç–∏–ø–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if not service_type:
            return requested_status
        
        try:
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã —á–µ—Ä–µ–∑ –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–´–ô endpoint
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.backend_url}/api/ai/results/batch-status",
                    params={
                        "post_ids": ",".join(map(str, post_ids)),
                        "bot_id": bot_id
                    },
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        batch_status_response = await response.json()
                        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        batch_status = batch_status_response.get('statuses', [])
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        current_statuses = {}
                        for item in batch_status:
                            if item['post_id'] in post_ids:
                                current_statuses[item['post_id']] = item.get('status', 'pending')
                        
                        # üß† –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–¢–ê–¢–£–°–û–í
                        if service_type == "categorization":
                            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                            smart_statuses = []
                            for post_id in post_ids:
                                current = current_statuses.get(post_id, 'pending')
                                if current == 'pending':
                                    smart_statuses.append('categorized')
                                elif current == 'summarized':
                                    smart_statuses.append('completed')
                                else:
                                    smart_statuses.append(current)  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            
                            # –ï—Å–ª–∏ –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–∏–Ω
                            unique_statuses = set(smart_statuses)
                            if len(unique_statuses) == 1:
                                return smart_statuses[0]
                            else:
                                logger.info(f"üìä –°–º–µ—à–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–ª–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {unique_statuses}")
                                return 'categorized'  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                        
                        elif service_type == "summarization":
                            # –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                            smart_statuses = []
                            for post_id in post_ids:
                                current = current_statuses.get(post_id, 'pending')
                                if current == 'pending':
                                    smart_statuses.append('summarized')
                                elif current == 'categorized':
                                    smart_statuses.append('completed')
                                else:
                                    smart_statuses.append(current)  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            
                            # –ï—Å–ª–∏ –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–∏–Ω
                            unique_statuses = set(smart_statuses)
                            if len(unique_statuses) == 1:
                                return smart_statuses[0]
                            else:
                                logger.info(f"üìä –°–º–µ—à–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–ª–µ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {unique_statuses}")
                                return 'summarized'  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                    
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: HTTP {response.status}")
                        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —É–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        
        # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        return requested_status

    # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° BACKEND ===
    
    async def process_posts_for_bot(self, posts: List['Post'], bot: 'Bot') -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å backend)"""
        logger.info(f"üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ '{bot.name}' (ID: {bot.id})")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Post –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        posts_data = []
        for post in posts:
            post_dict = {
                "id": post.id,
                "content": post.text,
                "title": post.caption,
                "views": post.views,
                "post_date": post.date,
                "channel_telegram_id": post.channel_id,
                "telegram_message_id": post.message_id
            }
            posts_data.append(post_dict)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Bot –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        bot_data = {
            "id": bot.id,
            "name": bot.name,
            "categorization_prompt": bot.categorization_prompt,
            "summarization_prompt": bot.summarization_prompt,
            "max_posts_per_digest": bot.max_posts_per_digest,
            "max_summary_length": bot.max_summary_length
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
        categories = await self._get_bot_categories(bot.id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π AI –∏–ª–∏ mock
        if self.openai_api_key:
            ai_results = await self._process_posts_with_real_ai(posts_data, bot_data, categories)
        else:
            ai_results = await self._process_posts_with_mock_ai(posts_data, bot_data)
        
        logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(ai_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return ai_results

    async def save_ai_results(self, ai_results: List[Dict[str, Any]]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å backend)"""
        return await self._save_ai_results(ai_results)

# === –ê–õ–ò–ê–° –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° BACKEND ===
# Backend –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç AIOrchestrator, –Ω–æ –∫–ª–∞—Å—Å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è AIOrchestratorV2
AIOrchestrator = AIOrchestratorV2

# === –ö–õ–ê–°–°–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° BACKEND ===
# Backend —Ç–∞–∫–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç Post –∏ Bot –∫–ª–∞—Å—Å—ã

class Post:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å backend)"""
    def __init__(self, id, text, caption="", views=0, date=None, channel_id=None, message_id=None):
        self.id = id
        self.text = text
        self.caption = caption
        self.views = views
        self.date = date
        self.channel_id = channel_id
        self.message_id = message_id

class Bot:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –±–æ—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å backend)"""
    def __init__(self, id, name, categorization_prompt="", summarization_prompt="", max_posts_per_digest=10, max_summary_length=150):
        self.id = id
        self.name = name
        self.categorization_prompt = categorization_prompt
        self.summarization_prompt = summarization_prompt
        self.max_posts_per_digest = max_posts_per_digest
        self.max_summary_length = max_summary_length

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ AI Orchestrator v2.0"""
    import argparse
    
    parser = argparse.ArgumentParser(description="AI Orchestrator v2.0 Event-Driven Architecture")
    parser.add_argument("--mode", choices=["continuous", "single"], default="single",
                       help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: continuous (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ) –∏–ª–∏ single (–æ–¥–∏–Ω –±–∞—Ç—á)")
    parser.add_argument("--backend-url", default="http://localhost:8000",
                       help="URL Backend API")
    parser.add_argument("--batch-size", type=int, default=None,
                       help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Backend)")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ AI Orchestrator v2.0
    orchestrator = AIOrchestratorV2(
        backend_url=args.backend_url,
        batch_size=args.batch_size
    )
    
    # –ó–∞–ø—É—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    if args.mode == "continuous":
        await orchestrator.run_continuous()
    else:
        await orchestrator.run_single_batch()

if __name__ == "__main__":
    asyncio.run(main()) 