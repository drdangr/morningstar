#!/usr/bin/env python3
"""
AI Orchestrator v2.0 - Event-Driven Architecture
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä AI —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é –∏ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
"""

import asyncio
import aiohttp
import json
import logging
import os
import sys
import heapq
from datetime import datetime, timedelta
from enum import Enum
from dataclasses import dataclass, field
from typing import List, Dict, Any, Optional
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
from ai_services.services.categorization import CategorizationService
from ai_services.services.summarization import SummarizationService

# –ü—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
class Post:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç–∞"""
    def __init__(self, id, text, caption="", views=0, date=None, channel_id=None, message_id=None):
        self.id = id
        self.text = text
        self.caption = caption
        self.views = views
        self.date = date
        self.channel_id = channel_id
        self.message_id = message_id

class Bot:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –±–æ—Ç–∞"""
    def __init__(self, id, name, categorization_prompt="", summarization_prompt="", max_posts_per_digest=10, max_summary_length=150):
        self.id = id
        self.name = name
        self.categorization_prompt = categorization_prompt
        self.summarization_prompt = summarization_prompt
        self.max_posts_per_digest = max_posts_per_digest
        self.max_summary_length = max_summary_length

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
class AITaskPriority(Enum):
    BACKGROUND = 1    # –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–∫–æ–≥–¥–∞ –≤—Å–µ —Å–¥–µ–ª–∞–Ω–æ)
    NORMAL = 2        # –ü–ª–∞–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    HIGH = 3          # –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã, —Å–∫–æ—Ä—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã
    URGENT = 4        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    CRITICAL = 5      # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

class AITaskType(Enum):
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    STARTUP_PROCESSING = "startup_processing"
    BACKGROUND_PROCESSING = "background_processing"
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (CRITICAL –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    FORCE_REPROCESS_ALL = "force_reprocess_all"
    FORCE_REPROCESS_CHANNELS = "force_reprocess_channels"
    FORCE_REPROCESS_BOT = "force_reprocess_bot"
    CLEAR_AI_RESULTS = "clear_ai_results"
    
    # –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (URGENT/CRITICAL –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    NEW_POSTS_PROCESSING = "new_posts_processing"
    BOT_SETTINGS_CHANGED = "bot_settings_changed"
    USER_URGENT_REQUEST = "user_urgent_request"
    
    # –ü–ª–∞–Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (NORMAL/HIGH –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    SCHEDULED_PROCESSING = "scheduled_processing"
    DIGEST_PREPARATION = "digest_preparation"

@dataclass
class AITask:
    task_type: AITaskType
    priority: AITaskPriority
    bot_id: Optional[int] = None
    channel_ids: Optional[List[int]] = None
    post_ids: Optional[List[int]] = None
    user_id: Optional[int] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    created_at: datetime = field(default_factory=datetime.utcnow)
    
    def __lt__(self, other):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è heapq (–º–µ–Ω—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = –≤—ã—à–µ –≤ –æ—á–µ—Ä–µ–¥–∏)"""
        return (-self.priority.value, self.created_at) < (-other.priority.value, other.created_at)

class AIOrchestrator:
    """
    AI Orchestrator v2.0 - Event-Driven Architecture
    
    –§—É–Ω–∫—Ü–∏–∏:
    1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á (heapq)
    2. –†–µ–∞–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç Userbot
    3. –£–º–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞/–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    4. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    5. Startup initialization —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, 
                 backend_url: str = "http://localhost:8000",
                 openai_api_key: Optional[str] = None,
                 batch_size: int = 10):
        
        self.backend_url = backend_url
        self.batch_size = batch_size
        
        # Event-Driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
        self.task_queue = []  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å (heapq)
        self.processing_locks = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        self.background_worker_running = False
        self.last_activity = None
        self.worker_event = asyncio.Event()  # –°–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
        self.openai_api_key = openai_api_key or os.getenv("OPENAI_API_KEY")
        if not self.openai_api_key:
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è mock —Ä–µ–∂–∏–º")
        
        self.categorization_service = CategorizationService(
            openai_api_key=self.openai_api_key,
            backend_url=self.backend_url
        )
        
        self.summarization_service = SummarizationService(
            model_name="gpt-4o-mini",
            max_tokens=4000,
            temperature=0.3
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_processed": 0,
            "successful_processed": 0,
            "failed_processed": 0,
            "last_run": None,
            "processing_time": 0,
            "queue_size": 0,
            "active_tasks": 0
        }
        
        logger.info("ü§ñ AI Orchestrator v2.0 (Event-Driven) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üì° Backend URL: {self.backend_url}")
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size}")

    # === –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô –ò –ü–†–ò–û–†–ò–¢–ï–¢–û–í ===
    
    async def handle_new_posts_from_userbot(self, post_ids: List[int], channel_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç Userbot"""
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ {len(post_ids)} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –±–æ—Ç–æ–≤
        affected_bots = await self._get_bots_using_channel(channel_id)
        
        if not affected_bots:
            logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞
        for bot_id in affected_bots:
            task = AITask(
                task_type=AITaskType.NEW_POSTS_PROCESSING,
                priority=AITaskPriority.CRITICAL,  # –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                bot_id=bot_id,
                post_ids=post_ids,
                metadata={
                    'channel_id': channel_id,
                    'trigger': 'userbot_new_posts',
                    'posts_count': len(post_ids)
                }
            )
            
            await self._add_task_to_queue(task)
        
        # –ï—Å–ª–∏ —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è - –∑–∞–ø—É—Å–∫–∞–µ–º
        if not self.background_worker_running:
            logger.info("üîÑ –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º...")
            await self._start_background_worker()

    async def _add_task_to_queue(self, task: AITask):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        if await self._is_duplicate_task(task):
            logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task.task_type} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if task.priority == AITaskPriority.CRITICAL:
            await self._interrupt_current_processing(task)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å
        heapq.heappush(self.task_queue, task)
        self.stats['queue_size'] = len(self.task_queue)
        
        logger.info(f"‚ûï –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task.task_type.value} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.name})")
        
        # –ë—É–¥–∏–º —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.worker_event.set()

    async def _is_duplicate_task(self, task: AITask) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏ –∏ bot_id
        for existing_task in self.task_queue:
            if (existing_task.task_type == task.task_type and 
                existing_task.bot_id == task.bot_id):
                return True
        return False

    async def _interrupt_current_processing(self, urgent_task: AITask):
        """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        if urgent_task.priority == AITaskPriority.CRITICAL:
            logger.warning(f"üö® –ü–†–ï–†–´–í–ê–ù–ò–ï: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ {urgent_task.task_type.value}")
            
            # –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            for lock_key in list(self.processing_locks.keys()):
                current_task = self.processing_locks[lock_key]
                if current_task.priority.value < urgent_task.priority.value:
                    logger.info(f"‚è∏Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É {current_task.task_type.value}")
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É graceful –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è

    # === –£–ú–ù–´–ô –§–û–ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ===
    
    async def _start_background_worker(self):
        """–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        if self.background_worker_running:
            return
        
        self.background_worker_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(self._smart_background_worker())

    async def _smart_background_worker(self):
        """–£–º–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        logger.info("üß† –£–º–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        try:
            while self.background_worker_running:
                if not self.task_queue:
                    # –ù–ï–¢ –ó–ê–î–ê–ß - –ó–ê–°–´–ü–ê–ï–ú –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
                    logger.info("üò¥ –ù–µ—Ç –∑–∞–¥–∞—á, –∑–∞—Å—ã–ø–∞–µ–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞...")
                    await self.report_orchestrator_status("IDLE", {"queue_size": 0})
                    
                    # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö
                    await self.worker_event.wait()
                    self.worker_event.clear()
                    
                    logger.info("‚è∞ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ—Å—ã–ø–∞–µ–º—Å—è...")
                else:
                    # –ï–°–¢–¨ –ó–ê–î–ê–ß–ò - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
                    task = heapq.heappop(self.task_queue)
                    self.stats['queue_size'] = len(self.task_queue)
                    
                    logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É: {task.task_type.value} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.name})")
                    
                    await self.report_orchestrator_status("PROCESSING", {
                        "current_task": task.task_type.value,
                        "priority": task.priority.name,
                        "queue_size": len(self.task_queue)
                    })
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
                    success = await self._process_task(task)
                    
                    if success:
                        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task.task_type.value} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task.task_type.value}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    self.last_activity = datetime.utcnow()
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {str(e)}")
        finally:
            self.background_worker_running = False
            logger.info("üõë –£–º–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _process_task(self, task: AITask) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            lock_key = f"{task.task_type.value}_{task.bot_id}_{task.created_at.timestamp()}"
            self.processing_locks[lock_key] = task
            self.stats['active_tasks'] = len(self.processing_locks)
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            if task.task_type == AITaskType.STARTUP_PROCESSING:
                success = await self._process_startup_task(task)
            elif task.task_type == AITaskType.NEW_POSTS_PROCESSING:
                success = await self._process_new_posts_task(task)
            elif task.task_type == AITaskType.BACKGROUND_PROCESSING:
                success = await self._process_background_task(task)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task.task_type.value}")
                success = False
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task.task_type.value}: {str(e)}")
            return False
        finally:
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            if lock_key in self.processing_locks:
                del self.processing_locks[lock_key]
            self.stats['active_tasks'] = len(self.processing_locks)

    # === STARTUP INITIALIZATION ===
    
    async def startup_initialization(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üöÄ Startup Initialization - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        pending_data = await self._check_pending_data()
        
        if pending_data['total_posts'] > 0:
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {pending_data['total_posts']} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            await self._schedule_pending_data_processing(pending_data)
        else:
            logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        
        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await self._start_background_worker()
        
        logger.info("‚úÖ AI Orchestrator –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    async def _check_pending_data(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –±–µ–∑ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
        unprocessed_posts = await self.get_unprocessed_posts(limit=1000)  # –ë–æ–ª—å—à–∏–π –ª–∏–º–∏—Ç –¥–ª—è startup
        
        if not unprocessed_posts:
            return {'total_posts': 0, 'bots_affected': 0, 'pending_by_bot': {}}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–æ—Ç–∞–º
        pending_by_bot = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        bots_data = await self.get_public_bots()
        
        for bot_data in bots_data:
            bot_id = bot_data['id']
            bot_channels = await self.get_bot_channels(bot_id)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
            bot_posts = [post for post in unprocessed_posts 
                        if post['channel_telegram_id'] in bot_channels]
            
            if bot_posts:
                pending_by_bot[bot_id] = {
                    'bot_id': bot_id,
                    'bot_name': bot_data['name'],
                    'posts': bot_posts,
                    'channels': set(post['channel_telegram_id'] for post in bot_posts),
                    'next_digest_time': await self._get_next_digest_time(bot_id)
                }
        
        return {
            'total_posts': len(unprocessed_posts),
            'bots_affected': len(pending_by_bot),
            'pending_by_bot': pending_by_bot
        }

    async def _schedule_pending_data_processing(self, pending_data: Dict[str, Any]):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"""
        bots_data = pending_data['pending_by_bot']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        sorted_bots = sorted(
            bots_data.values(),
            key=lambda bot: (
                not await self._is_bot_active(bot['bot_id']),  # –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –ø–µ—Ä–≤—ã–º–∏
                bot['next_digest_time'] or datetime.max,       # –ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
                -len(bot['posts'])                             # –ë–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            )
        )
        
        for i, bot_data in enumerate(sorted_bots):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏
            if i < 3:  # –ü–µ—Ä–≤—ã–µ 3 –±–æ—Ç–∞ - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                priority = AITaskPriority.HIGH
            elif bot_data['next_digest_time'] and bot_data['next_digest_time'] < datetime.utcnow() + timedelta(hours=2):
                priority = AITaskPriority.HIGH  # –°–∫–æ—Ä–æ –¥–∞–π–¥–∂–µ—Å—Ç
            else:
                priority = AITaskPriority.NORMAL
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            task = AITask(
                task_type=AITaskType.STARTUP_PROCESSING,
                priority=priority,
                bot_id=bot_data['bot_id'],
                post_ids=[post['id'] for post in bot_data['posts']],
                metadata={
                    'reason': 'startup_pending_data',
                    'posts_count': len(bot_data['posts']),
                    'channels_count': len(bot_data['channels']),
                    'bot_name': bot_data['bot_name'],
                    'next_digest': bot_data['next_digest_time'].isoformat() if bot_data['next_digest_time'] else None
                }
            )
            
            await self._add_task_to_queue(task)

    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–î–ê–ß ===
    
    async def _process_startup_task(self, task: AITask) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ startup –∑–∞–¥–∞—á–∏"""
        logger.info(f"üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ startup –∑–∞–¥–∞—á–∏ –¥–ª—è –±–æ—Ç–∞ {task.bot_id}")
        
        if not task.post_ids:
            return True
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return await self._process_posts_batch_for_bot(task.bot_id, task.post_ids)

    async def _process_new_posts_task(self, task: AITask) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –æ—Ç Userbot"""
        logger.info(f"üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {task.bot_id}")
        
        if not task.post_ids:
            return True
        
        # –ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        return await self._process_posts_batch_for_bot(task.bot_id, task.post_ids)

    async def _process_background_task(self, task: AITask) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –±–æ—Ç–∞ {task.bot_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
        bot_channels = await self.get_bot_channels(task.bot_id)
        if not bot_channels:
            return True
        
        unprocessed_posts = await self.get_unprocessed_posts_for_channels(bot_channels, self.batch_size)
        
        if not unprocessed_posts:
            logger.info(f"‚úÖ –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {task.bot_id}")
            return True
        
        post_ids = [post['id'] for post in unprocessed_posts]
        return await self._process_posts_batch_for_bot(task.bot_id, post_ids)

    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    async def _get_bots_using_channel(self, channel_id: int) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/channels/{channel_id}/bots") as response:
                    if response.status == 200:
                        bots = await response.json()
                        return [bot['id'] for bot in bots]
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {str(e)}")
            return []

    async def _get_next_digest_time(self, bot_id: int) -> Optional[datetime]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots/{bot_id}") as response:
                    if response.status == 200:
                        bot_data = await response.json()
                        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –±–µ—Ä–µ–º –≤—Ä–µ–º—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                        digest_time = bot_data.get('digest_generation_time', '09:00')
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
                        now = datetime.utcnow()
                        hour, minute = map(int, digest_time.split(':'))
                        next_digest = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
                        
                        if next_digest <= now:
                            next_digest += timedelta(days=1)
                        
                        return next_digest
                    else:
                        return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {str(e)}")
            return None

    async def _is_bot_active(self, bot_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots/{bot_id}") as response:
                    if response.status == 200:
                        bot_data = await response.json()
                        return bot_data.get('status') == 'active'
                    else:
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ {bot_id}: {str(e)}")
            return False

    async def _process_posts_batch_for_bot(self, bot_id: int, post_ids: List[int]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            start_time = datetime.utcnow()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–æ–≤
            posts_data = await self._get_posts_data(post_ids)
            if not posts_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–æ–≤: {post_ids}")
                return False
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã
            posts = self.convert_to_post_objects(posts_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            bot_data = await self._get_bot_data(bot_id)
            if not bot_data:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ {bot_id}")
                return False
            
            bot = self.convert_to_bot_objects([bot_data])[0]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å—ã
            ai_results = await self.process_posts_for_bot(posts, bot)
            
            if ai_results:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                success = await self.save_ai_results(ai_results)
                
                if success:
                    processing_time = (datetime.utcnow() - start_time).total_seconds()
                    self.stats['total_processed'] += len(posts)
                    self.stats['processing_time'] = processing_time
                    
                    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot_id} –∑–∞ {processing_time:.2f}—Å")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                    return False
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {str(e)}")
            return False

    async def _get_posts_data(self, post_ids: List[int]) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–æ–≤ –ø–æ ID"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ ID
            ids_filter = "&".join([f"id={pid}" for pid in post_ids])
            url = f"{self.backend_url}/api/posts/cache?{ids_filter}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        posts = await response.json()
                        return posts
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {str(e)}")
            return []

    async def _get_bot_data(self, bot_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –ø–æ ID"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots/{bot_id}") as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ {bot_id}: HTTP {response.status}")
                        return None
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ {bot_id}: {str(e)}")
            return None

    # === –ú–ï–¢–û–î–´ –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û ORCHESTRATOR ===
    
    async def get_unprocessed_posts_for_channels(self, channel_ids: List[int], limit: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –ª–∏–º–∏—Ç–æ–º"""
        if not channel_ids:
            return []
            
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞–Ω–∞–ª–∞–º
            channel_filter = "&".join([f"channel_telegram_id={cid}" for cid in channel_ids])
            url = f"{self.backend_url}/api/posts/cache?processing_status=pending&{channel_filter}&limit={limit}&sort_by=post_date&sort_order=desc"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        posts = await response.json()
                        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ {channel_ids}")
                        return posts
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
            return []

    async def get_unprocessed_posts(self, limit: int = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ Backend API"""
        limit = limit or self.batch_size
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.backend_url}/api/posts/unprocessed?limit={limit}"
                ) as response:
                    if response.status == 200:
                        posts = await response.json()
                        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
                        return posts
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {str(e)}")
            return []
    
    async def get_public_bots(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –±–æ—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è development)"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.backend_url}/api/public-bots"  # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö
                ) as response:
                    if response.status == 200:
                        bots = await response.json()
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ development –±–æ—Ç–æ–≤
                        processing_bots = [bot for bot in bots if bot.get('status') in ['active', 'development']]
                        active_bots = [bot for bot in processing_bots if bot.get('status') == 'active']
                        dev_bots = [bot for bot in processing_bots if bot.get('status') == 'development']
                        
                        logger.info(f"ü§ñ –ü–æ–ª—É—á–µ–Ω–æ {len(active_bots)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤, {len(dev_bots)} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                        return processing_bots
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ—Ç–æ–≤: {str(e)}")
            return []

    async def get_bot_channels(self, bot_id: int) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots/{bot_id}/channels") as response:
                    if response.status == 200:
                        channels = await response.json()
                        channel_ids = [channel['telegram_id'] for channel in channels]
                        logger.debug(f"üì∫ –ë–æ—Ç {bot_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞–Ω–∞–ª—ã: {channel_ids}")
                        return channel_ids
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è –±–æ—Ç–∞ {bot_id}: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {str(e)}")
            return []

    def convert_to_post_objects(self, posts_data: List[Dict[str, Any]]) -> List[Post]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –æ–±—ä–µ–∫—Ç—ã Post"""
        posts = []
        for post_data in posts_data:
            try:
                # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
                post_date_str = post_data['post_date']
                if post_date_str.endswith('Z'):
                    post_date_str = post_date_str[:-1] + '+00:00'
                
                post = Post(
                    id=post_data['id'],
                    text=post_data.get('content', ''),
                    caption=post_data.get('title', ''),
                    views=post_data.get('views', 0),
                    date=datetime.fromisoformat(post_date_str),
                    channel_id=post_data['channel_telegram_id'],
                    message_id=post_data['telegram_message_id']
                )
                posts.append(post)
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_data.get('id', 'unknown')}: {str(e)}")
        
        logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –≤ –æ–±—ä–µ–∫—Ç—ã Post")
        return posts
    
    def convert_to_bot_objects(self, bots_data: List[Dict[str, Any]]) -> List[Bot]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ –æ–±—ä–µ–∫—Ç—ã Bot"""
        bots = []
        for bot_data in bots_data:
            try:
                bot = Bot(
                    id=bot_data['id'],
                    name=bot_data['name'],
                    categorization_prompt=bot_data.get('categorization_prompt'),
                    summarization_prompt=bot_data.get('summarization_prompt'),
                    max_posts_per_digest=bot_data.get('max_posts_per_digest', 10),
                    max_summary_length=bot_data.get('max_summary_length', 150)
                )
                bots.append(bot)
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–æ—Ç–∞ {bot_data.get('id', 'unknown')}: {str(e)}")
        
        logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(bots)} –±–æ—Ç–æ–≤ –≤ –æ–±—ä–µ–∫—Ç—ã Bot")
        return bots
    
    async def process_posts_for_bot(self, posts: List[Post], bot: Bot) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        logger.info(f"üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ '{bot.name}' (ID: {bot.id})")
        
        if not self.categorization_service:
            logger.error("‚ùå CategorizationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return []
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ process_with_bot_config
        try:
            categorization_results = await self.categorization_service.process_with_bot_config(
                posts=posts,
                bot_id=bot.id
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ {bot.id}: {str(e)}")
            return []
        
        results = []
        
        for i, post in enumerate(posts):
            try:
                if i < len(categorization_results):
                    result = categorization_results[i]
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    ai_result = {
                        "post_id": post.id,
                        "public_bot_id": bot.id,
                        "summaries": result.get("summaries", {}),
                        "categories": result.get("categories", {}),
                        "metrics": result.get("metrics", {}),
                        "processing_version": "v2.0"
                    }
                    
                    results.append(ai_result)
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {post.id}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ {post.id}: {str(e)}")
        
        logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return results

    async def save_ai_results(self, ai_results: List[Dict[str, Any]]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Backend API"""
        if not ai_results:
            return True
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(ai_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.backend_url}/api/ai/results/batch",
                    json=ai_results,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 201:
                        saved_results = await response.json()
                        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(saved_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        self.stats["successful_processed"] += len(saved_results)
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: HTTP {response.status}")
                        logger.error(f"   –î–µ—Ç–∞–ª–∏: {error_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
            return False
    
    async def report_orchestrator_status(self, status: str, details: Dict[str, Any] = None):
        """–û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ AI Orchestrator –≤ Backend API"""
        try:
            status_data = {
                "orchestrator_status": status,
                "timestamp": datetime.utcnow().isoformat(),
                "stats": self.stats.copy(),
                "details": details or {}
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.backend_url}/api/ai/orchestrator-status",
                    json=status_data,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status in [200, 201]:
                        logger.debug(f"üì° –°—Ç–∞—Ç—É—Å '{status}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Backend API")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: HTTP {response.status}")
                        
        except Exception as e:
            logger.debug(f"üîá –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ Backend API: {str(e)}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

    # === –ü–£–ë–õ–ò–ß–ù–´–ï API –ú–ï–¢–û–î–´ ===
    
    async def trigger_processing(self):
        """–†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ Backend API)"""
        logger.info("‚ö° Trigger Processing - —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            task = AITask(
                task_type=AITaskType.BACKGROUND_PROCESSING,
                priority=AITaskPriority.NORMAL,
                metadata={'trigger': 'api_request'}
            )
            
            await self._add_task_to_queue(task)
            
            # –ï—Å–ª–∏ —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω - –∑–∞–ø—É—Å–∫–∞–µ–º
            if not self.background_worker_running:
                await self._start_background_worker()
            
            return {"success": True, "message": "AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"}
            
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
            return {"success": False, "message": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"}

    async def get_monitoring_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            'orchestrator_status': 'running' if self.background_worker_running else 'stopped',
            'queue_size': len(self.task_queue),
            'active_tasks': len(self.processing_locks),
            'last_activity': self.last_activity.isoformat() if self.last_activity else None,
            'stats': self.stats,
            'current_tasks': [
                {
                    'task_type': task.task_type.value,
                    'priority': task.priority.name,
                    'bot_id': task.bot_id,
                    'created_at': task.created_at.isoformat()
                }
                for task in list(self.task_queue)[:10]  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–¥–∞—á
            ],
            'processing_locks': list(self.processing_locks.keys())
        }

    async def stop_background_worker(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        self.background_worker_running = False
        self.worker_event.set()  # –ë—É–¥–∏–º —á—Ç–æ–±—ã –æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è

    # === –†–ï–ñ–ò–ú–´ –ó–ê–ü–£–°–ö–ê ===
    
    async def run_single_batch(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞—Ç—á–∞ AI Orchestrator v2.0")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        task = AITask(
            task_type=AITaskType.BACKGROUND_PROCESSING,
            priority=AITaskPriority.NORMAL,
            metadata={'trigger': 'single_batch_test'}
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
        success = await self._process_task(task)
        
        if success:
            logger.info("üéâ –¢–µ—Å—Ç–æ–≤—ã–π –±–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.error("üí• –¢–µ—Å—Ç–æ–≤—ã–π –±–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
        
        return success

    async def run_continuous(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ Event-Driven —Ä–µ–∂–∏–º–µ"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π Event-Driven –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # Startup initialization
        await self.startup_initialization()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        try:
            while True:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if self.background_worker_running:
                    logger.debug(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ—á–µ—Ä–µ–¥—å={len(self.task_queue)}, –∞–∫—Ç–∏–≤–Ω—ã—Ö={len(self.processing_locks)}")
                
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            await self.stop_background_worker()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ AI Orchestrator v2.0"""
    import argparse
    
    parser = argparse.ArgumentParser(description="AI Orchestrator v2.0 Event-Driven Architecture")
    parser.add_argument("--mode", choices=["continuous", "single"], default="single",
                       help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: continuous (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ) –∏–ª–∏ single (–æ–¥–∏–Ω –±–∞—Ç—á)")
    parser.add_argument("--backend-url", default="http://localhost:8000",
                       help="URL Backend API")
    parser.add_argument("--batch-size", type=int, default=10,
                       help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ AI Orchestrator v2.0
    orchestrator = AIOrchestrator(
        backend_url=args.backend_url,
        batch_size=args.batch_size
    )
    
    # –ó–∞–ø—É—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    if args.mode == "continuous":
        await orchestrator.run_continuous()
    else:
        await orchestrator.run_single_batch()

if __name__ == "__main__":
    asyncio.run(main()) 