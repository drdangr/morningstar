#!/usr/bin/env python3
"""
AI Orchestrator - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä AI —Å–µ—Ä–≤–∏—Å–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ CategorizationService –∏ SummarizationService
"""

import asyncio
import aiohttp
import json
import logging
import os
import sys
from datetime import datetime
from typing import List, Dict, Any, Optional
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
from ai_services.services.categorization import CategorizationService
from ai_services.services.summarization import SummarizationService

# –ü—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
class Post:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç–∞"""
    def __init__(self, id, text, caption="", views=0, date=None, channel_id=None, message_id=None):
        self.id = id
        self.text = text
        self.caption = caption
        self.views = views
        self.date = date
        self.channel_id = channel_id
        self.message_id = message_id

class Bot:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –±–æ—Ç–∞"""
    def __init__(self, id, name, categorization_prompt="", summarization_prompt="", max_posts_per_digest=10, max_summary_length=150):
        self.id = id
        self.name = name
        self.categorization_prompt = categorization_prompt
        self.summarization_prompt = summarization_prompt
        self.max_posts_per_digest = max_posts_per_digest
        self.max_summary_length = max_summary_length

class AIOrchestrator:
    """
    AI Orchestrator - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤
    
    –§—É–Ω–∫—Ü–∏–∏:
    1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    2. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –±–æ—Ç–æ–≤
    3. –í—ã–∑–æ–≤ AI —Å–µ—Ä–≤–∏—Å–æ–≤ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è + —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è)
    4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Backend API
    5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—Ç–æ–≤
    """
    
    def __init__(self, 
                 backend_url: str = "http://localhost:8000",
                 openai_api_key: Optional[str] = None,
                 processing_interval: int = 30,
                 batch_size: int = 10):
        
        self.backend_url = backend_url
        self.processing_interval = processing_interval
        self.batch_size = batch_size
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
        self.openai_api_key = openai_api_key or os.getenv("OPENAI_API_KEY")
        if not self.openai_api_key:
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è mock —Ä–µ–∂–∏–º")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.categorization_service = CategorizationService(
            openai_api_key=self.openai_api_key,
            backend_url=self.backend_url
        )
        
        self.summarization_service = SummarizationService(
            model_name="gpt-4o-mini",
            max_tokens=4000,
            temperature=0.3
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_processed": 0,
            "successful_processed": 0,
            "failed_processed": 0,
            "last_run": None,
            "processing_time": 0
        }
        
        logger.info("ü§ñ AI Orchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üì° Backend URL: {self.backend_url}")
        logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.processing_interval}—Å")
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size}")
    
    async def get_unprocessed_posts(self, limit: int = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ Backend API"""
        limit = limit or self.batch_size
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.backend_url}/api/posts/unprocessed?limit={limit}"
                ) as response:
                    if response.status == 200:
                        posts = await response.json()
                        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
                        return posts
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {str(e)}")
            return []
    
    async def get_public_bots(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –±–æ—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è development)"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.backend_url}/api/public-bots"  # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö
                ) as response:
                    if response.status == 200:
                        bots = await response.json()
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ development –±–æ—Ç–æ–≤
                        processing_bots = [bot for bot in bots if bot.get('status') in ['active', 'development']]
                        active_bots = [bot for bot in processing_bots if bot.get('status') == 'active']
                        dev_bots = [bot for bot in processing_bots if bot.get('status') == 'development']
                        
                        logger.info(f"ü§ñ –ü–æ–ª—É—á–µ–Ω–æ {len(active_bots)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤, {len(dev_bots)} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                        return processing_bots
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ—Ç–æ–≤: {str(e)}")
            return []
    
    def convert_to_post_objects(self, posts_data: List[Dict[str, Any]]) -> List[Post]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –æ–±—ä–µ–∫—Ç—ã Post"""
        posts = []
        for post_data in posts_data:
            try:
                # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
                post_date_str = post_data['post_date']
                if post_date_str.endswith('Z'):
                    post_date_str = post_date_str[:-1] + '+00:00'
                
                post = Post(
                    id=post_data['id'],
                    text=post_data.get('content', ''),
                    caption=post_data.get('title', ''),
                    views=post_data.get('views', 0),
                    date=datetime.fromisoformat(post_date_str),
                    channel_id=post_data['channel_telegram_id'],
                    message_id=post_data['telegram_message_id']
                )
                posts.append(post)
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_data.get('id', 'unknown')}: {str(e)}")
        
        logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –≤ –æ–±—ä–µ–∫—Ç—ã Post")
        return posts
    
    def convert_to_bot_objects(self, bots_data: List[Dict[str, Any]]) -> List[Bot]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ –æ–±—ä–µ–∫—Ç—ã Bot"""
        bots = []
        for bot_data in bots_data:
            try:
                bot = Bot(
                    id=bot_data['id'],
                    name=bot_data['name'],
                    categorization_prompt=bot_data.get('categorization_prompt'),
                    summarization_prompt=bot_data.get('summarization_prompt'),
                    max_posts_per_digest=bot_data.get('max_posts_per_digest', 10),
                    max_summary_length=bot_data.get('max_summary_length', 150)
                )
                bots.append(bot)
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–æ—Ç–∞ {bot_data.get('id', 'unknown')}: {str(e)}")
        
        logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(bots)} –±–æ—Ç–æ–≤ –≤ –æ–±—ä–µ–∫—Ç—ã Bot")
        return bots
    
    async def process_posts_for_bot(self, posts: List[Post], bot: Bot) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        logger.info(f"üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ '{bot.name}' (ID: {bot.id})")
        
        if not self.categorization_service:
            logger.error("‚ùå CategorizationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return []
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ process_with_bot_config
        try:
            categorization_results = await self.categorization_service.process_with_bot_config(
                posts=posts,
                bot_id=bot.id
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ {bot.id}: {str(e)}")
            return []
        
        results = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        for categorization_result in categorization_results:
            try:
                post_id = categorization_result.get('post_id')
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç
                post = next((p for p in posts if p.id == post_id), None)
                if not post:
                    logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
                    continue
                
                # 2. –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å OpenAI API)
                if self.openai_api_key and self.summarization_service:
                    summarization_result = await self.summarization_service.process(
                        text=post.text,
                        language="ru",
                        custom_prompt=bot.summarization_prompt
                    )
                else:
                    # Mock —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
                    summarization_result = {
                        "summary": f"–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {post.text[:100]}..." if post.text else "–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞",
                        "language": "ru",
                        "tokens_used": 150,
                        "status": "mock"
                    }
                
                # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                ai_result = {
                    "post_id": post_id,
                    "public_bot_id": bot.id,
                    "summaries": {"ru": summarization_result.get("summary", "")},
                    "categories": {"ru": categorization_result.get("category_name", "NULL")},
                    "metrics": {
                        "importance": categorization_result.get("importance", 7),
                        "urgency": categorization_result.get("urgency", 6),
                        "significance": categorization_result.get("significance", 7),
                        "relevance_score": categorization_result.get("relevance_score", 0.0)
                    },
                    "processing_version": "v2.1",
                    "ai_metadata": {
                        "reasoning": categorization_result.get("reasoning", ""),
                        "tokens_used": categorization_result.get("tokens_used", 0) + summarization_result.get("tokens_used", 0)
                    }
                }
                
                results.append(ai_result)
                logger.info(f"  ‚úÖ –ü–æ—Å—Ç {post_id}: {categorization_result.get('category_name', 'UNKNOWN')} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {categorization_result.get('relevance_score', 0):.2f})")
                
            except Exception as e:
                logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ {categorization_result.get('post_id', 'N/A')}: {str(e)}")
                self.stats["failed_processed"] += 1
        
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ '{bot.name}'")
        return results
    
    async def save_ai_results(self, ai_results: List[Dict[str, Any]]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Backend API"""
        if not ai_results:
            return True
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(ai_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.backend_url}/api/ai/results/batch",
                    json=ai_results,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 201:
                        saved_results = await response.json()
                        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(saved_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        self.stats["successful_processed"] += len(saved_results)
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: HTTP {response.status}")
                        logger.error(f"   –î–µ—Ç–∞–ª–∏: {error_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
            return False
    
    async def process_batch(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ –ø–æ—Å—Ç–æ–≤"""
        start_time = datetime.now()
        
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        posts_data = await self.get_unprocessed_posts()
        if not posts_data:
            logger.info("üì≠ –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return True
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        bots_data = await self.get_public_bots()
        if not bots_data:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False
        
        # 3. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –æ–±—ä–µ–∫—Ç—ã
        posts = self.convert_to_post_objects(posts_data)
        bots = self.convert_to_bot_objects(bots_data)
        
        # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        all_results = []
        dev_results = []  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è development –±–æ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
        
        for bot_data in bots_data:
            bot = next((b for b in bots if b.id == bot_data['id']), None)
            if not bot:
                continue
                
            bot_results = await self.process_posts_for_bot(posts, bot)
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞
            if bot_data.get('status') == 'development':
                dev_results.extend(bot_results)
                logger.info(f"üß™ DEVELOPMENT MODE: –ë–æ—Ç '{bot.name}' –æ–±—Ä–∞–±–æ—Ç–∞–ª {len(bot_results)} –ø–æ—Å—Ç–æ–≤ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)")
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è development –±–æ—Ç–æ–≤
                for result in bot_results:
                    logger.info(f"   üìù –ü–æ—Å—Ç {result['post_id']}: {result['categories']['ru']} (–≤–∞–∂–Ω–æ—Å—Ç—å: {result['metrics']['importance']})")
            else:  # active —Å—Ç–∞—Ç—É—Å
                all_results.extend(bot_results)
        
        # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤)
        if all_results:
            success = await self.save_ai_results(all_results)
            if not success:
                return False
        
        # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        processing_time = (datetime.now() - start_time).total_seconds()
        self.stats["last_run"] = datetime.now()
        self.stats["processing_time"] = processing_time
        self.stats["total_processed"] += len(posts)
        
        logger.info(f"‚è±Ô∏è –ë–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {processing_time:.2f}—Å")
        return True
    
    async def process_single_batch(self) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞—Ç—á–∞ AI Orchestrator")
        
        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        initial_stats = self.stats.copy()
        
        success = await self.process_batch()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = {
            "success": success,
            "posts_processed": self.stats['total_processed'] - initial_stats.get('total_processed', 0),
            "successful_processing": self.stats['successful_processed'] - initial_stats.get('successful_processed', 0),
            "errors": self.stats['failed_processed'] - initial_stats.get('failed_processed', 0),
            "processing_time": self.stats.get('processing_time', 0),
            "bots_processed": 1  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }
        
        if success:
            logger.info("üéâ –¢–µ—Å—Ç–æ–≤—ã–π –±–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.error("üí• –¢–µ—Å—Ç–æ–≤—ã–π –±–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
        
        # –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        logger.info("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"  ‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['posts_processed']}")
        logger.info(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {stats['successful_processing']}")
        logger.info(f"  ‚Ä¢ –û—à–∏–±–æ–∫: {stats['errors']}")
        logger.info(f"  ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['processing_time']:.2f}—Å")
        
        return stats
    
    async def run_single_batch(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        stats = await self.process_single_batch()
        return stats["success"]

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ AI Orchestrator"""
    import argparse
    
    parser = argparse.ArgumentParser(description="AI Orchestrator –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤")
    parser.add_argument("--mode", choices=["continuous", "single"], default="single",
                       help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: continuous (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ) –∏–ª–∏ single (–æ–¥–∏–Ω –±–∞—Ç—á)")
    parser.add_argument("--backend-url", default="http://localhost:8000",
                       help="URL Backend API")
    parser.add_argument("--interval", type=int, default=30,
                       help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--batch-size", type=int, default=10,
                       help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ AI Orchestrator
    orchestrator = AIOrchestrator(
        backend_url=args.backend_url,
        processing_interval=args.interval,
        batch_size=args.batch_size
    )
    
    # –ó–∞–ø—É—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    if args.mode == "continuous":
        await orchestrator.run_continuous()
    else:
        await orchestrator.run_single_batch()

if __name__ == "__main__":
    asyncio.run(main()) 