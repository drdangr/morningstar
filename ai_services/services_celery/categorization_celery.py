#!/usr/bin/env python3
"""
CategorizationServiceCelery - Celery-–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ services/categorization.py –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ Celery
"""

import json
import re
import time
import logging
import math
from typing import Dict, List, Optional, Tuple, Any
from openai import OpenAI
import requests
from .base_celery import BaseAIServiceCelery

logger = logging.getLogger(__name__)

class CategorizationServiceCelery(BaseAIServiceCelery):
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è AI-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ Celery
    –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    """
    
    def __init__(self, openai_api_key: str = None, backend_url: str = "http://localhost:8000", 
                 batch_size: int = 30, settings_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            openai_api_key: API –∫–ª—é—á OpenAI
            backend_url: URL Backend API
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            settings_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö LLM
        """
        super().__init__(settings_manager)
        
        self.openai_api_key = openai_api_key or self._get_openai_key()
        self.backend_url = backend_url
        self.batch_size = batch_size
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
        self.openai_client = OpenAI(api_key=self.openai_api_key)
        
        logger.info(f"üè∑Ô∏è CategorizationServiceCelery –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   Backend URL: {backend_url}")
        logger.info(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        if settings_manager:
            logger.info(f"   SettingsManager: –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            logger.warning(f"   ‚ö†Ô∏è SettingsManager –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    def process_with_bot_config(self, posts: List[Dict], bot_id: int) -> List[Dict[str, Any]]:
        """
        üöÄ –ë–ê–¢–ß–ï–í–ê–Ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ PublicBot
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ (dict format)
            bot_id: ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º dict –≤ Post objects –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            post_objects = self._convert_to_post_objects(posts)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
            bot_config = self._get_bot_config(bot_id)
            if not bot_config:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞ {bot_id}")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
            bot_categories = self._get_bot_categories(bot_id)
            if not bot_categories:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞ {bot_id}")
                return []
            
            logger.info(f"ü§ñ –ë–ê–¢–ß–ï–í–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(post_objects)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ '{bot_config['name']}'")
            logger.info(f"üìÇ –î–æ—Å—Ç—É–ø–Ω–æ {len(bot_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size}")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ—Å—Ç—ã –Ω–∞ –±–∞—Ç—á–∏
            batches = self._split_posts_into_batches(post_objects)
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(batches)} –±–∞—Ç—á–µ–π")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–Ω–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∫–∞–∫ –≤ async –≤–µ—Ä—Å–∏–∏)
            all_results = []
            for i, batch in enumerate(batches, 1):
                try:
                    logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {i}/{len(batches)} ({len(batch)} –ø–æ—Å—Ç–æ–≤)")
                    batch_results = self._process_batch(batch, bot_config, bot_categories, i, len(batches))
                    all_results.extend(batch_results)
                    logger.info(f"‚úÖ –ë–∞—Ç—á {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(batch_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {i}: {e}")
                    # –°–æ–∑–¥–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤ —ç—Ç–æ–≥–æ –±–∞—Ç—á–∞
                    for post in batch:
                        fallback_result = self._create_fallback_result(post)
                        all_results.append(fallback_result)
            
            logger.info(f"‚úÖ –ë–ê–¢–ß–ï–í–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(all_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return all_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_with_bot_config: {str(e)}")
            return []
    
    def _convert_to_post_objects(self, posts: List[Dict]) -> List[Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç dict –≤ Post objects –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        # –ï—Å–ª–∏ —É–∂–µ Post objects, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if posts and hasattr(posts[0], 'id'):
            return posts
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å –Ω—É–∂–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        class SimplePost:
            def __init__(self, data):
                self.id = data.get('id')
                self.text = data.get('text', '')
                self.media_path = data.get('media_path', '')
                self.views = data.get('views', 0)
                self.channel_telegram_id = data.get('channel_telegram_id', '')
                self.post_telegram_id = data.get('post_telegram_id', '')
                self.post_date = data.get('post_date', '')
                self.post_url = data.get('post_url', '')
        
        return [SimplePost(post) for post in posts]
    
    def _split_posts_into_batches(self, posts: List[Any]) -> List[List[Any]]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –ø–æ—Å—Ç—ã –Ω–∞ –±–∞—Ç—á–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        batches = []
        for i in range(0, len(posts), self.batch_size):
            batch = posts[i:i + self.batch_size]
            batches.append(batch)
        return batches
    
    def _process_batch(self, batch_posts: List[Any], bot_config: Dict[str, Any], 
                      bot_categories: List[Dict[str, Any]], batch_index: int, total_batches: int) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á –ø–æ—Å—Ç–æ–≤
        
        Args:
            batch_posts: –ü–æ—Å—Ç—ã –≤ –±–∞—Ç—á–µ
            bot_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
            bot_categories: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
            batch_index: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
            total_batches: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π
        """
        try:
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {batch_index}/{total_batches} ({len(batch_posts)} –ø–æ—Å—Ç–æ–≤)")
            
            # –°—Ç—Ä–æ–∏–º –±–∞—Ç—á–µ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–∫–∞–∫ –≤ N8N)
            system_prompt, user_message = self._build_batch_prompt(bot_config, bot_categories, batch_posts, batch_index, total_batches)
            
            # –í—ã–∑—ã–≤–∞–µ–º OpenAI API –¥–ª—è –≤—Å–µ–≥–æ –±–∞—Ç—á–∞
            response = self._call_openai_batch_api(system_prompt, user_message)
            if not response:
                logger.error(f"‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI –¥–ª—è –±–∞—Ç—á–∞ {batch_index}")
                return [self._create_fallback_result(post) for post in batch_posts]
            
            # –ü–∞—Ä—Å–∏–º –±–∞—Ç—á–µ–≤—ã–π –æ—Ç–≤–µ—Ç
            batch_results = self._parse_batch_response(response, batch_posts, bot_categories)
            
            logger.info(f"‚úÖ –ë–∞—Ç—á {batch_index} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(batch_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return batch_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {batch_index}: {str(e)}")
            return [self._create_fallback_result(post) for post in batch_posts]
    
    def _build_batch_prompt(self, bot_config: Dict[str, Any], bot_categories: List[Dict[str, Any]], 
                           batch_posts: List[Any], batch_index: int, total_batches: int) -> Tuple[str, str]:
        """
        –°—Ç—Ä–æ–∏—Ç –±–∞—Ç—á–µ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –≤ N8N workflows
        
        Returns:
            Tuple[system_prompt, user_message]
        """
        
        # 1. Bot Prompt –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        bot_prompt = bot_config.get('categorization_prompt', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å—Ç—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        categories_list = []
        for i, category in enumerate(bot_categories, 1):
            name = category.get('category_name', category.get('name', 'Unknown'))
            description = category.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
            categories_list.append(f"{i}. {name} ({description})")
        
        categories_text = "\n".join(categories_list)
        
        # 3. –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–∫–∞–∫ –≤ N8N)
        system_prompt = f"""{bot_prompt}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
{categories_text}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
1. –ù–æ–º–µ—Ä —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ—Å—Ç–∞–≤—å null
2. –û—Ü–µ–Ω–∫—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (0.0-1.0)
3. –í–∞–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ (1-10) - –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
4. –°—Ä–æ—á–Ω–æ—Å—Ç—å (1-10) - –Ω–∞—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ –Ω—É–∂–Ω–æ –æ–± —ç—Ç–æ–º —É–∑–Ω–∞—Ç—å
5. –ó–Ω–∞—á–∏–º–æ—Å—Ç—å (1-10) - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –º–∞—Å—Å–∏–≤–æ–º:
{{
  "results": [
    {{
      "id": post_id,
      "category_number": 1,
      "category_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
      "relevance_score": 0.95,
      "importance": 8,
      "urgency": 7,
      "significance": 9
    }}
  ]
}}"""
        
        # 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–∞–º–∏
        posts_text = []
        for i, post in enumerate(batch_posts, 1):
            post_text = post.text[:1000] if post.text else "–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
            posts_text.append(f"–ü–æ—Å—Ç {post.id}: {post_text}")
        
        user_message = f"–ë–∞—Ç—á {batch_index}/{total_batches} ({len(batch_posts)} –ø–æ—Å—Ç–æ–≤):\n\n" + "\n\n".join(posts_text)
        
        return system_prompt, user_message
    
    def _call_openai_batch_api(self, system_prompt: str, user_message: str) -> Optional[str]:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç OpenAI API –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        
        Args:
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            user_message: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç OpenAI –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ SettingsManager –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
            model, max_tokens, temperature = self._get_model_settings()
            
            response = self.openai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_message}
                ],
                max_tokens=max_tokens,
                temperature=temperature,
                timeout=60
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {str(e)}")
            return None
    
    def _parse_batch_response(self, response: str, batch_posts: List[Any], bot_categories: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç –±–∞—Ç—á–µ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç OpenAI
            batch_posts: –ü–æ—Å—Ç—ã –≤ –±–∞—Ç—á–µ
            bot_categories: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        results = []
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            json_match = re.search(r'\{[\s\S]*\}', response)
            if json_match:
                json_str = json_match.group(0)
                parsed = json.loads(json_str)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                ai_results = parsed.get('results', [])
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                for ai_result in ai_results:
                    validated_result = self._validate_and_normalize_batch_result(ai_result, None, bot_categories)
                    if validated_result:
                        results.append(validated_result)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ batch –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º –ø–æ—Å—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º fallback
        while len(results) < len(batch_posts):
            post_index = len(results)
            if post_index < len(batch_posts):
                fallback_result = self._create_fallback_result(batch_posts[post_index])
                results.append(fallback_result)
            else:
                break
        
        return results
    
    def _validate_and_normalize_batch_result(self, ai_result: Dict[str, Any], post: Any, bot_categories: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            ai_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç AI
            post: –ü–æ—Å—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
            bot_categories: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            post_id = ai_result.get('id')
            category_number = ai_result.get('category_number')
            category_name = ai_result.get('category_name', '')
            relevance_score = self._validate_score(ai_result.get('relevance_score', 0.5), 0.0, 1.0)
            importance = self._validate_score(ai_result.get('importance', 5), 1, 10)
            urgency = self._validate_score(ai_result.get('urgency', 5), 1, 10)
            significance = self._validate_score(ai_result.get('significance', 5), 1, 10)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category_number is not None:
                category_number = self._validate_category_number(category_number, len(bot_categories))
                if category_number is not None:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
                    category_index = category_number - 1
                    if 0 <= category_index < len(bot_categories):
                        category_name = bot_categories[category_index].get('category_name', 
                                                                        bot_categories[category_index].get('name', 'Unknown'))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'post_id': post_id,
                'category_number': category_number,
                'category_name': category_name,
                'relevance_score': relevance_score,
                'importance': importance,
                'urgency': urgency,
                'significance': significance,
                'processing_status': 'completed'
            }
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")
            return None
    
    def _get_bot_config(self, bot_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞ –∏–∑ Backend API"""
        try:
            response = requests.get(f"{self.backend_url}/api/public-bots/{bot_id}")
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ {bot_id}: {response.status_code}")
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ {bot_id}: {str(e)}")
            return None
    
    def _get_bot_categories(self, bot_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞ –∏–∑ Backend API"""
        try:
            response = requests.get(f"{self.backend_url}/api/public-bots/{bot_id}/categories")
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞ {bot_id}: {response.status_code}")
                return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞ {bot_id}: {str(e)}")
            return []
    
    def _validate_category_number(self, category_number: Any, max_categories: int) -> Optional[int]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            if category_number is None:
                return None
            
            num = int(category_number)
            if 1 <= num <= max_categories:
                return num
            else:
                logger.warning(f"‚ö†Ô∏è –ù–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {num} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-{max_categories}")
                return None
        except (ValueError, TypeError):
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_number}")
            return None
    
    def _validate_score(self, score: Any, min_val: float, max_val: float) -> float:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ü–µ–Ω–∫—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        try:
            val = float(score)
            return max(min_val, min(val, max_val))
        except (ValueError, TypeError):
            return (min_val + max_val) / 2  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _create_fallback_result(self, post: Any) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ AI"""
        return {
            'post_id': post.id if hasattr(post, 'id') else None,
            'category_number': None,
            'category_name': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
            'relevance_score': 0.5,
            'importance': 5,
            'urgency': 5,
            'significance': 5,
            'processing_status': 'failed'
        }
    
    def _get_model_settings(self) -> Tuple[str, int, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –∏–∑ SettingsManager –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ"""
        if self.settings_manager:
            try:
                config = self.settings_manager.get_ai_service_config('categorization')
                return (
                    config.get('model', 'gpt-4o-mini'),
                    config.get('max_tokens', 1000),
                    config.get('temperature', 0.3)
                )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        return ('gpt-4o-mini', 1000, 0.3)
    
    def _get_openai_key(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç OpenAI API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        import os
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            raise ValueError("OPENAI_API_KEY environment variable is required") 