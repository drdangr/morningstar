#!/usr/bin/env python3
"""
BaseAIService –¥–ª—è Celery - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Celery tasks
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ü–µ–Ω–Ω—ã—Ö –∫—É—Å–∫–∞—Ö –∏–∑ CELERY.md
"""

import time
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from typing import Dict, Any, Optional, List
import logging
from celery import Task

logger = logging.getLogger(__name__)

class BaseAIServiceCelery:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Celery
    –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ Celery tasks
    """
    
    def __init__(self, settings_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            settings_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö LLM
        """
        self.settings_manager = settings_manager
        self.session = self._create_session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (fallback –µ—Å–ª–∏ settings_manager –Ω–µ—Ç)
        self.default_settings = {
            'model': 'gpt-4o-mini',
            'temperature': 0.3,
            'max_tokens': 2000,
            'top_p': 1.0,
            'backend_url': 'http://localhost:8000'
        }
        
        logger.info(f"üîß {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Celery")
    
    def _create_session(self) -> requests.Session:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é HTTP —Å–µ—Å—Å–∏—é —Å connection pooling
        –¶–µ–Ω–Ω—ã–π –∫—É—Å–æ–∫ –∏–∑ CELERY.md –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        session = requests.Session()
        
        # Retry —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
        retry = Retry(
            total=3,
            read=3,
            connect=3,
            backoff_factor=0.3,
            status_forcelist=(500, 502, 504, 429)  # –î–æ–±–∞–≤–ª–µ–Ω 429 –¥–ª—è OpenAI rate limits
        )
        
        # Connection pooling
        adapter = HTTPAdapter(
            max_retries=retry, 
            pool_connections=10, 
            pool_maxsize=10
        )
        
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        
        return session
    
    def get_settings(self, setting_type: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            setting_type: 'categorization' –∏–ª–∏ 'summarization'
        """
        if not self.settings_manager:
            logger.warning(f"SettingsManager –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            return self.default_settings
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ SettingsManager
            model = self.settings_manager.get_setting(f'ai_{setting_type}_model', self.default_settings['model'])
            temperature = float(self.settings_manager.get_setting(f'ai_{setting_type}_temperature', self.default_settings['temperature']))
            max_tokens = int(self.settings_manager.get_setting(f'ai_{setting_type}_max_tokens', self.default_settings['max_tokens']))
            top_p = float(self.settings_manager.get_setting('ai_top_p', self.default_settings['top_p']))
            backend_url = self.settings_manager.get_setting('BACKEND_URL', self.default_settings['backend_url'])
            
            settings = {
                'model': model,
                'temperature': temperature,
                'max_tokens': max_tokens,
                'top_p': top_p,
                'backend_url': backend_url
            }
            
            logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ {setting_type}: {settings}")
            return settings
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            return self.default_settings
    
    def make_api_request(self, method: str, url: str, **kwargs) -> requests.Response:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç API –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π retry –ª–æ–≥–∏–∫–æ–π
        –¶–µ–Ω–Ω—ã–π –∫—É—Å–æ–∫ –∏–∑ CELERY.md
        
        Args:
            method: HTTP –º–µ—Ç–æ–¥
            url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        try:
            response = self.session.request(method, url, timeout=30, **kwargs)
            response.raise_for_status()
            return response
            
        except requests.RequestException as e:
            logger.error(f"üåê API –∑–∞–ø—Ä–æ—Å failed: {method} {url} - {e}")
            # –ù–µ –¥–µ–ª–∞–µ–º retry –∑–¥–µ—Å—å - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç requests.Session
            raise e
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise e
    
    def validate_input(self, text: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not isinstance(text, str):
            logger.error(f"Invalid input type: {type(text)}, expected str")
            return False
        
        if not text or text.strip() == "":
            logger.warning(f"Empty input text - will skip processing")
            return False
        
        return True
    
    def create_result(self, post_data: Dict[str, Any], status: str = "success", **extra_data) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            post_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            status: –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            **extra_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        result = {
            'post_id': post_data.get('id'),
            'channel_id': post_data.get('channel_id'),
            'timestamp': time.time(),
            'status': status,
            **extra_data
        }
        
        return result
    
    def create_fallback_result(self, post_data: Dict[str, Any], error: str = "Processing failed") -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        Args:
            post_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            error: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        """
        return self.create_result(
            post_data,
            status="error",
            error=error,
            categories=[],
            summary=None,
            importance=5,
            urgency=5,
            significance=5
        )
    
    def log_processing_stats(self, service_name: str, processed: int, total: int, duration: float):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        logger.info(f"üìä {service_name} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{total}")
        logger.info(f"   –í—Ä–µ–º—è: {duration:.2f} —Å–µ–∫")
        logger.info(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {processed/duration:.2f} –ø–æ—Å—Ç–æ–≤/—Å–µ–∫")
        
        if processed < total:
            logger.warning(f"‚ö†Ô∏è –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total - processed} –ø–æ—Å—Ç–æ–≤")


class BaseAITaskCelery(Task):
    """
    –ë–∞–∑–æ–≤—ã–π Celery Task –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
    –¶–µ–Ω–Ω—ã–π –∫—É—Å–æ–∫ –∏–∑ CELERY.md - BaseAITask –∫–ª–∞—Å—Å
    """
    
    def __init__(self):
        self.settings_manager = None
        self.service = None
    
    def __call__(self, *args, **kwargs):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        if self.settings_manager is None:
            try:
                from utils.settings_manager import SettingsManager
                self.settings_manager = SettingsManager()
                logger.info("‚úÖ SettingsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ BaseAITaskCelery")
            except ImportError:
                logger.warning("‚ö†Ô∏è SettingsManager –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ")
                self.settings_manager = None
        
        return self.run(*args, **kwargs)
    
    def retry_on_failure(self, exc, context: Dict = None):
        """
        –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è retry –ª–æ–≥–∏–∫–∞ –∏–∑ CELERY.md
        
        Args:
            exc: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if isinstance(exc, requests.RequestException):
            # Retry —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            logger.warning(f"üîÑ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, retry —á–µ—Ä–µ–∑ 60 —Å–µ–∫: {exc}")
            raise self.retry(exc=exc, countdown=60, max_retries=3)
        else:
            # –ù–µ retry –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ - –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥
            logger.error(f"‚ùå –ù–µ–∏—Å–ø—Ä–∞–≤–∏–º–∞—è –æ—à–∏–±–∫–∞: {exc}", extra=context)
            return {
                "status": "error", 
                "error": str(exc),
                "context": context
            } 