#!/usr/bin/env python3
"""
AI Orchestrator v4.0 - –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —Å –Ω—É–ª—è
–ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ + –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å + –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
+
+–ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ (—Å 26 –∏—é–Ω—è 2025):
+- –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±—É–ª–µ–≤—ã–µ —Ñ–ª–∞–≥–∏ is_categorized, is_summarized –≤ processed_data
+- –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: 0 —Ñ–ª–∞–≥–æ–≤ ‚Üí pending, 1 —Ñ–ª–∞–≥ ‚Üí processing, –≤—Å–µ —Ñ–ª–∞–≥–∏ ‚Üí completed
+- –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–∞–µ—Ç –∫–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ sync-status endpoint
+- Backend —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–π –ª–æ–≥–∏–∫–æ–π —Å—Ç–∞—Ç—É—Å–æ–≤
"""

import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ ai_services –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

import asyncio
import aiohttp
import json
import logging
import argparse
from typing import Dict, List, Optional, Any
from datetime import datetime
from dataclasses import dataclass
from enum import Enum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger('AIOrchestrator_v4')

class ProcessingStatus(Enum):
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"

@dataclass
class ProcessingResult:
    post_id: int
    bot_id: int
    success: bool
    categories: Dict[str, Any]
    summaries: Dict[str, Any]
    metrics: Dict[str, Any]
    processing_version: str = "v4.0_multitenant_batch"
    error_message: Optional[str] = None

class AIOrchestrator:
    def __init__(self, backend_url: str = "http://localhost:8000", batch_size: int = 30):
        self.backend_url = backend_url
        self.batch_size = batch_size
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        
        if not self.openai_api_key:
            raise ValueError("OPENAI_API_KEY environment variable is required")
        
        self.categorization_service = None
        self.summarization_service = None
        
        logger.info(f"üöÄ AI Orchestrator v4.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   Backend URL: {backend_url}")
        logger.info(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    
    async def initialize_ai_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            from services.categorization import CategorizationService
            from services.summarization import SummarizationService
            
            self.categorization_service = CategorizationService(
                openai_api_key=self.openai_api_key,
                backend_url=self.backend_url,
                batch_size=self.batch_size
            )
            
            self.summarization_service = SummarizationService(
                model_name="gpt-4o-mini",
                max_tokens=4000,
                temperature=0.3
            )
            
            # AI —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
            
            logger.info("‚úÖ AI —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    async def run_single_batch(self, skip_initialization: bool = False):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ AI —Å–µ—Ä–≤–∏—Å—ã, –µ—Å–ª–∏ –Ω–µ—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        # –í continuous —Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if not skip_initialization and (self.categorization_service is None or self.summarization_service is None):
            if not await self.initialize_ai_services():
                return False
        
        active_bots = await self.get_active_bots()
        if not active_bots:
            logger.info("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return True
        
        logger.info(f"ü§ñ –ù–∞–π–¥–µ–Ω–æ {len(active_bots)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤")
        
        total_processed = 0
        for bot in active_bots:
            try:
                processed_count = await self.process_bot(bot)
                total_processed += processed_count
                logger.info(f"‚úÖ –ë–æ—Ç '{bot['name']}': –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–æ—Å—Ç–æ–≤")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞ '{bot['name']}': {e}")
        
        logger.info(f"üéâ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed} –ø–æ—Å—Ç–æ–≤")
        await self.report_statistics(total_processed, len(active_bots))
        
        return total_processed > 0
    
    async def process_bot(self, bot: Dict[str, Any]) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞"""
        bot_id = bot['id']
        bot_name = bot['name']
        
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞: {bot_name} (ID: {bot_id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        channels = await self.get_bot_channels(bot_id)
        if not channels:
            logger.warning(f"‚ö†Ô∏è –£ –±–æ—Ç–∞ {bot_name} –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            return 0
        
        categories = await self.get_bot_categories(bot_id)
        if not categories:
            logger.warning(f"‚ö†Ô∏è –£ –±–æ—Ç–∞ {bot_name} –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            return 0
        
        channel_telegram_ids = [ch['telegram_id'] for ch in channels]
        logger.info(f"üì∫ –ö–∞–Ω–∞–ª—ã: {[ch['username'] for ch in channels]}")
        logger.info(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {[cat['category_name'] for cat in categories]}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        posts = await self.get_unprocessed_posts_for_bot(channel_telegram_ids, bot_id)
        if not posts:
            logger.info(f"‚úÖ –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot_name}")
            return 0
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(posts)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã, –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        # –ë–ê–¢–ß–ï–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê
        results = await self.process_posts_batch(posts, bot, categories)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ processed_data)
        if results:
            saved_count = await self.save_results(results)
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return saved_count
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã, Backend —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥–∏
            # –ü–æ—Å—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            return 0
    
    async def _get_posts_status(self, post_ids: List[int], bot_id: int) -> Dict[int, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å post_id ‚Üí {status, is_categorized, is_summarized} –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.
        –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã —Å—á–∏—Ç–∞—é—Ç—Å—è not_found (—Ç–æ –µ—Å—Ç—å —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏).
        
        –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å —Ñ–ª–∞–≥–∞–º–∏:
        - –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë processing_status –∏ —Ñ–ª–∞–≥–∏
        - Backend —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–∞–º–∏ —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥–∏ is_categorized/is_summarized
        """
        if not post_ids:
            return {}

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.backend_url}/api/ai/results/batch-status",
                    params={
                        "post_ids": ",".join(map(str, post_ids)),
                        "bot_id": bot_id,
                    },
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        statuses = {}
                        for s in data.get("statuses", []):
                            statuses[s["post_id"]] = {
                                "status": s.get("status", "not_found"),
                                "is_categorized": s.get("is_categorized", False),
                                "is_summarized": s.get("is_summarized", False)
                            }
                        return statuses
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å—Ç–æ–≤: {e}")

        # fallback
        return {
            pid: {"status": "not_found", "is_categorized": False, "is_summarized": False}
            for pid in post_ids
        }

    async def process_posts_batch(self, posts: List[Dict], bot: Dict, categories: List[Dict]) -> List[ProcessingResult]:
        """üöÄ –ë–ê–¢–ß–ï–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–°–¢–û–í"""
        logger.info(f"üöÄ –ë–ê–¢–ß–ï–í–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(posts)} –ø–æ—Å—Ç–æ–≤")
        
        try:
            from models.post import Post
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            post_objects = []
            post_texts = []
            valid_posts = []
            
            for post_data in posts:
                content = post_data.get('content', '') or post_data.get('text', '')
                if not content or len(content.strip()) < 10:
                    logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç {post_data['id']} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                post_obj = Post(
                    id=post_data['id'],
                    content=content,
                    channel_telegram_id=post_data.get('channel_telegram_id'),
                    created_at=post_data.get('post_date'),
                    telegram_message_id=post_data.get('telegram_message_id', 0)
                )
                
                post_objects.append(post_obj)
                post_texts.append(content)
                valid_posts.append(post_data)
            
            if not post_objects:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return []
            
            logger.info(f"üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(post_objects)} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å—Ç–æ–≤ (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ)
            post_ids = [p["id"] for p in valid_posts]
            current_statuses = await self._get_posts_status(post_ids, bot["id"])

            # --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è ---
            posts_for_cat: List[Post] = []
            idx_map_cat: List[int] = []  # –∏–Ω–¥–µ–∫—Å valid_posts ‚Üí –ø–æ–∑–∏—Ü–∏—è –≤ cat result
            for idx, vp in enumerate(valid_posts):
                status_info = current_statuses.get(vp["id"], {"status": "not_found", "is_categorized": False, "is_summarized": False})
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –ù–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                if not status_info.get("is_categorized", False):
                    posts_for_cat.append(post_objects[idx])
                    idx_map_cat.append(idx)
                else:
                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å—Ç–∞ {vp['id']} - —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω")

            categorization_raw_results: List[Dict[str, Any]] = [{}] * len(valid_posts)

            if posts_for_cat:
                logger.info(f"üîÑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è {len(posts_for_cat)} –ø–æ—Å—Ç–æ–≤ (–±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ {len(valid_posts)-len(posts_for_cat)})")
                cat_res = await self.categorization_service.process_with_bot_config(posts_for_cat, bot["id"])
                for local_i, global_idx in enumerate(idx_map_cat):
                    categorization_raw_results[global_idx] = cat_res[local_i] if local_i < len(cat_res) else {}

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¢–û–õ–¨–ö–û –¥–ª—è —É—Å–ø–µ—à–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
                successful_cat_post_ids = []
                for local_i, global_idx in enumerate(idx_map_cat):
                    if local_i < len(cat_res) and cat_res[local_i]:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                        result = cat_res[local_i]
                        if result.get('category_name') and result.get('relevance_score', 0) > 0:
                            successful_cat_post_ids.append(valid_posts[global_idx]["id"])
                        else:
                            logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç {valid_posts[global_idx]['id']} –Ω–µ –ø–æ–ª—É—á–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
                
                if successful_cat_post_ids:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(successful_cat_post_ids)} –∏–∑ {len(posts_for_cat)} –ø–æ—Å—Ç–æ–≤")
                    await self.sync_service_status(successful_cat_post_ids, bot["id"], "categorizer")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –ø–æ—Å—Ç –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.info("‚ÑπÔ∏è –í—Å–µ –ø–æ—Å—Ç—ã —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, —à–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω")

            # --- –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è ---
            # –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–°–´ –ø–æ—Å–ª–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            updated_statuses = await self._get_posts_status(post_ids, bot["id"])
            
            texts_for_sum: List[str] = []
            idx_map_sum: List[int] = []
            for idx, vp in enumerate(valid_posts):
                status_info = updated_statuses.get(vp["id"], {"status": "not_found", "is_categorized": False, "is_summarized": False})
                
                # –°–∞–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –ù–ï —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                if not status_info.get("is_summarized", False):
                    texts_for_sum.append(post_texts[idx])
                    idx_map_sum.append(idx)
                else:
                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å—Ç–∞ {vp['id']} - —É–∂–µ —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω")

            summarization_raw_results: List[Dict[str, Any]] = [{}] * len(valid_posts)

            if texts_for_sum:
                logger.info(f"üîÑ –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è {len(texts_for_sum)} –ø–æ—Å—Ç–æ–≤ (–±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ {len(valid_posts)-len(texts_for_sum)})")
                sum_res = await self.summarization_service.process_batch(
                    texts=texts_for_sum,
                    language=bot.get("default_language", "ru"),
                    custom_prompt=bot.get("summarization_prompt"),
                )
                for local_i, global_idx in enumerate(idx_map_sum):
                    summarization_raw_results[global_idx] = sum_res[local_i] if local_i < len(sum_res) else {}

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¢–û–õ–¨–ö–û –¥–ª—è —É—Å–ø–µ—à–Ω–æ —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
                successful_sum_post_ids = []
                for local_i, global_idx in enumerate(idx_map_sum):
                    if local_i < len(sum_res) and sum_res[local_i]:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∞–º–º–∞—Ä–∏
                        result = sum_res[local_i]
                        if result.get('summary') and len(result.get('summary', '').strip()) > 10:
                            successful_sum_post_ids.append(valid_posts[global_idx]["id"])
                        else:
                            logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç {valid_posts[global_idx]['id']} –Ω–µ –ø–æ–ª—É—á–∏–ª —Å–∞–º–º–∞—Ä–∏")
                
                if successful_sum_post_ids:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(successful_sum_post_ids)} –∏–∑ {len(texts_for_sum)} –ø–æ—Å—Ç–æ–≤")
                    await self.sync_service_status(successful_sum_post_ids, bot["id"], "summarizer")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –ø–æ—Å—Ç –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.info("‚ÑπÔ∏è –í—Å–µ –ø–æ—Å—Ç—ã —É–∂–µ —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, —à–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω")

            # –û–ë–™–ï–î–ò–ù–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´
            results = []
            for i, post_data in enumerate(valid_posts):
                try:
                    categorization_result = categorization_raw_results[i]
                    summarization_result = summarization_raw_results[i]
                    
                    result = ProcessingResult(
                        post_id=post_data['id'],
                        bot_id=bot['id'],
                        success=True,
                        categories={
                            "primary": categorization_result.get('category_name', ''),
                            "secondary": [],
                            "relevance_scores": [categorization_result.get('relevance_score', 0.0)]
                        },
                        summaries={
                            "ru": summarization_result.get('summary', ''),
                            "en": ""
                        },
                        metrics={
                            "importance": categorization_result.get('importance', 5.0),
                            "urgency": categorization_result.get('urgency', 5.0),
                            "significance": categorization_result.get('significance', 5.0),
                            "tokens_used": summarization_result.get('tokens_used', 0),
                            "processing_time": 0.0
                        }
                    )
                    
                    results.append(result)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {post_data['id']}: {e}")
                    
                    fallback_result = ProcessingResult(
                        post_id=post_data['id'],
                        bot_id=bot['id'],
                        success=False,
                        categories={"primary": "", "secondary": [], "relevance_scores": [0.0]},
                        summaries={"ru": "", "en": ""},
                        metrics={"importance": 5.0, "urgency": 5.0, "significance": 5.0, "tokens_used": 0, "processing_time": 0.0},
                        error_message=str(e)
                    )
                    results.append(fallback_result)
            
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(results)} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return []
    
    async def save_results(self, results: List[ProcessingResult]) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Backend API"""
        if not results:
            return 0
        
        try:
            api_results = []
            successful_post_ids = []
            failed_post_ids = []
            
            for result in results:
                if result.success:
                    api_result = {
                        "post_id": result.post_id,
                        "public_bot_id": result.bot_id,
                        "summaries": result.summaries,
                        "categories": result.categories,
                        "metrics": result.metrics,
                        "processing_version": result.processing_version
                    }
                    api_results.append(api_result)
                    successful_post_ids.append(result.post_id)
                else:
                    failed_post_ids.append(result.post_id)
            
            saved_count = 0
            if api_results:
                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        f"{self.backend_url}/api/ai/results/batch",
                        json=api_results,
                        headers={"Content-Type": "application/json"}
                    ) as response:
                        if response.status == 201:
                            saved_results = await response.json()
                            saved_count = len(saved_results)
                            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                            
                            # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: Backend –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥–∏ —á–µ—Ä–µ–∑ sync-status
                            # –°—Ç–∞—Ç—É—Å completed —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–≥–¥–∞ –≤—Å–µ —Ñ–ª–∞–≥–∏ = true
                        else:
                            error_text = await response.text()
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: HTTP {response.status}")
                            logger.error(f"   –î–µ—Ç–∞–ª–∏: {error_text}")
            
            # –ü–æ–º–µ—á–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ failed
            if failed_post_ids:
                # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è failed –ø–æ—Å—Ç–æ–≤
                # Backend —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–∞–º–∏ —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥–∏
                logger.warning(f"‚ö†Ô∏è {len(failed_post_ids)} –ø–æ—Å—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
            
            return saved_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return 0
    
    async def update_multitenant_status(self, post_ids: List[int], bot_id: int, status: ProcessingStatus):
        """–ë–ê–¢–ß–ï–í–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤"""
        if not post_ids:
            return
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.put(
                    f"{self.backend_url}/api/ai/results/batch-status",
                    json={
                        "post_ids": post_ids,
                        "bot_id": bot_id,
                        "status": status.value
                    },
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        logger.debug(f"‚úÖ –°—Ç–∞—Ç—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(post_ids)} –ø–æ—Å—Ç–æ–≤ ‚Üí {status.value}")
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤: HTTP {response.status}")
                        logger.error(f"   –î–µ—Ç–∞–ª–∏: {error_text}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
    
    async def sync_service_status(self, post_ids: List[int], bot_id: int, service: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π endpoint sync-status"""
        if not post_ids:
            return
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.put(
                    f"{self.backend_url}/api/ai/results/sync-status",
                    json={
                        "post_ids": post_ids,
                        "bot_id": bot_id,
                        "service": service
                    },
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å {service} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {len(post_ids)} –ø–æ—Å—Ç–æ–≤")
                        logger.debug(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {data}")
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {service}: HTTP {response.status}")
                        logger.error(f"   –î–µ—Ç–∞–ª–∏: {error_text}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ sync-status –¥–ª—è {service}: {e}")
    
    async def get_active_bots(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots") as response:
                    if response.status == 200:
                        bots = await response.json()
                        active_bots = [bot for bot in bots if bot.get('status') == 'active']
                        return active_bots
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–æ—Ç–æ–≤: {e}")
            return []
    
    async def get_bot_channels(self, bot_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots/{bot_id}/channels") as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞ {bot_id}: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç–∞ {bot_id}: {e}")
            return []
    
    async def get_bot_categories(self, bot_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots/{bot_id}/categories") as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞ {bot_id}: HTTP {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞ {bot_id}: {e}")
            return []
    
    async def get_unprocessed_posts_for_bot(self, channel_telegram_ids: List[int], bot_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.backend_url}/api/posts/unprocessed",
                    params={"limit": self.batch_size * 3}
                ) as response:
                    if response.status == 200:
                        all_posts = await response.json()
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: HTTP {response.status}")
                        return []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º –±–æ—Ç–∞
            bot_posts = [
                post for post in all_posts 
                if post.get('channel_telegram_id') in channel_telegram_ids
            ]
            
            if not bot_posts:
                return []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
            post_ids = [post['id'] for post in bot_posts]
            
            async with aiohttp.ClientSession() as session:
                post_ids_str = ','.join(map(str, post_ids))
                async with session.get(
                    f"{self.backend_url}/api/ai/results/batch-status",
                    params={"post_ids": post_ids_str, "bot_id": bot_id}
                ) as response:
                    if response.status == 200:
                        status_data = await response.json()
                        posts_to_process = []
                        
                        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                        status_map = {
                            s["post_id"]: s.get("status", "not_found")
                            for s in status_data.get("statuses", [])
                        }
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ not_found, pending, processing
                        # –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º completed
                        for post in bot_posts:
                            post_status = status_map.get(post['id'], 'not_found')
                            if post_status in ['not_found', 'pending', 'processing']:
                                posts_to_process.append(post)
                            else:
                                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç {post['id']} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{post_status}'")
                        
                        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(posts_to_process)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ {len(bot_posts)} (—Å—Ç–∞—Ç—É—Å—ã: not_found/pending/processing)")
                        return posts_to_process[:self.batch_size]
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: HTTP {response.status}")
                        return bot_posts[:self.batch_size]
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
            return []
    
    async def report_statistics(self, total_processed: int, active_bots_count: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Backend"""
        try:
            stats = {
                "orchestrator_status": "completed",
                "timestamp": datetime.utcnow().isoformat() + "Z",
                "stats": {
                    "posts_processed": total_processed,
                    "active_bots": active_bots_count,
                    "processing_version": "v4.0_multitenant_batch"
                }
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.backend_url}/api/ai/orchestrator-status",
                    json=stats,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Backend")
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: HTTP {response.status}")
                        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def report_continuous_status(self, status: str, details: Dict[str, Any] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ Backend"""
        try:
            status_data = {
                "orchestrator_status": status,
                "timestamp": datetime.utcnow().isoformat() + "Z",
                "stats": {
                    "mode": "continuous",
                    "processing_version": "v4.0_multitenant_continuous",
                    "background_worker_running": True if status in ["STARTED", "PROCESSING", "IDLE"] else False
                },
                "details": details or {}
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.backend_url}/api/ai/orchestrator-status",
                    json=status_data,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        logger.debug(f"‚úÖ –°—Ç–∞—Ç—É—Å '{status}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Backend")
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: HTTP {response.status}")
                        
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

async def main():
    parser = argparse.ArgumentParser(description='AI Orchestrator v4.0')
    parser.add_argument('--mode', choices=['single', 'continuous'], default='single')
    parser.add_argument('--batch-size', type=int, default=30)
    parser.add_argument('--backend-url', default='http://localhost:8000')
    
    args = parser.parse_args()
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ AI Orchestrator v4.0")
    logger.info(f"   –†–µ–∂–∏–º: {args.mode}")
    logger.info(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {args.batch_size}")
    
    orchestrator = AIOrchestrator(
        backend_url=args.backend_url,
        batch_size=args.batch_size
    )
    
    if args.mode == 'single':
        success = await orchestrator.run_single_batch()
        if success:
            logger.info("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    elif args.mode == 'continuous':
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
            if not await orchestrator.initialize_ai_services():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å AI —Å–µ—Ä–≤–∏—Å—ã")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ –∑–∞–ø—É—Å–∫–µ
            await orchestrator.report_continuous_status("STARTED", {"mode": "continuous", "batch_size": args.batch_size})
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            cycle_count = 0
            while True:
                try:
                    cycle_count += 1
                    logger.info(f"üîÑ –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ #{cycle_count}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    await orchestrator.report_continuous_status("PROCESSING", {
                        "cycle": cycle_count,
                        "status": "processing_started"
                    })
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω –±–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é - —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)
                    success = await orchestrator.run_single_batch(skip_initialization=True)
                    
                    if success:
                        logger.info(f"‚úÖ –¶–∏–∫–ª #{cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        await orchestrator.report_continuous_status("IDLE", {
                            "cycle": cycle_count,
                            "status": "processing_completed",
                            "result": "success"
                        })
                    else:
                        logger.info(f"‚ÑπÔ∏è –¶–∏–∫–ª #{cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        await orchestrator.report_continuous_status("IDLE", {
                            "cycle": cycle_count,
                            "status": "processing_completed",
                            "result": "no_posts"
                        })
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (30 —Å–µ–∫—É–Ω–¥)
                    logger.info("üò¥ –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                    await asyncio.sleep(30)
                    
                except KeyboardInterrupt:
                    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{cycle_count}: {e}")
                    await orchestrator.report_continuous_status("ERROR", {
                        "cycle": cycle_count,
                        "error": str(e)
                    })
                    # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ (60 —Å–µ–∫—É–Ω–¥)
                    await asyncio.sleep(60)
                    
        except KeyboardInterrupt:
            logger.info("üõë –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
        finally:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            await orchestrator.report_continuous_status("STOPPED", {"reason": "shutdown"})
            logger.info("üèÅ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 