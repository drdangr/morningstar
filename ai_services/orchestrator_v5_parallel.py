#!/usr/bin/env python3
"""
AI Orchestrator v5.0 - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞–≤–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ worker —Ü–∏–∫–ª—ã

–ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
1. –î–≤–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö —Ü–∏–∫–ª–∞ - categorization_worker() –∏ summarization_worker()
2. –§–ª–∞–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
3. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
4. –£–º–Ω—ã–µ —Ü–∏–∫–ª—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

–ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
- Categorization Worker: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã —Å is_categorized=false
- Summarization Worker: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã —Å is_categorized=true, is_summarized=false
- –ö–∞–∂–¥—ã–π worker —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –¥—Ä—É–≥–æ–π
- Backend –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–∞–º–∏ —á–µ—Ä–µ–∑ boolean —Ñ–ª–∞–≥–∏
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

import asyncio
import aiohttp
import json
import logging
import argparse
from typing import Dict, List, Optional, Any
from datetime import datetime
from dataclasses import dataclass
from enum import Enum

from models.post import Post

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger('AIOrchestrator_v5_Parallel')

class ProcessingStatus(Enum):
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"

@dataclass
class ProcessingResult:
    post_id: int
    bot_id: int
    success: bool
    categories: Dict[str, Any]
    summaries: Dict[str, Any]
    metrics: Dict[str, Any]
    processing_version: str = "v5.0_parallel_workers"
    error_message: Optional[str] = None

class AIOrchestrator:
    def __init__(self, backend_url: str = "http://localhost:8000", batch_size: int = 30):
        self.backend_url = backend_url
        self.batch_size = batch_size
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        
        if not self.openai_api_key:
            raise ValueError("OPENAI_API_KEY environment variable is required")
        
        self.categorization_service = None
        self.summarization_service = None
        
        # –ù–û–í–´–ï –§–õ–ê–ì–ò –î–õ–Ø –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´
        self.categorization_is_running = False
        self.summarization_is_running = False
        self.workers_lock = asyncio.Lock()
        
        # –õ–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.max_batches_per_cycle = 10
        self.batch_timeout_minutes = 5
        
        logger.info(f"üöÄ AI Orchestrator v5.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)")
        logger.info(f"   Backend URL: {backend_url}")
        logger.info(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        logger.info(f"   –ú–∞–∫—Å –±–∞—Ç—á–µ–π –∑–∞ —Ü–∏–∫–ª: {self.max_batches_per_cycle}")
    
    async def initialize_ai_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            from services.categorization import CategorizationService
            from services.summarization import SummarizationService
            
            self.categorization_service = CategorizationService(
                openai_api_key=self.openai_api_key,
                backend_url=self.backend_url,
                batch_size=self.batch_size
            )
            
            self.summarization_service = SummarizationService(
                model_name="gpt-4o-mini",
                max_tokens=4000,
                temperature=0.3
            )
            
            logger.info("‚úÖ AI —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False

    async def run_parallel_workers(self):
        """–ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –∑–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö worker —Ü–∏–∫–ª–æ–≤"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö AI worker —Ü–∏–∫–ª–æ–≤")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å—ã –æ–¥–∏–Ω —Ä–∞–∑
        if not await self.initialize_ai_services():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å AI —Å–µ—Ä–≤–∏—Å—ã")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ worker —Ü–∏–∫–ª–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        try:
            await asyncio.gather(
                self.categorization_worker(),
                self.summarization_worker(),
                return_exceptions=True
            )
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö worker —Ü–∏–∫–ª–∞—Ö: {e}")

    async def categorization_worker(self):
        """Worker —Ü–∏–∫–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.info("üè∑Ô∏è –ó–∞–ø—É—Å–∫ Categorization Worker")
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                async with self.workers_lock:
                    if self.categorization_is_running:
                        logger.debug("üè∑Ô∏è Categorization —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª")
                        await asyncio.sleep(30)
                        continue
                
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–∞–±–æ—Ç—ã
                if not await self.has_uncategorized_posts():
                    logger.debug("üè∑Ô∏è –ù–µ—Ç –Ω–µ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
                    await asyncio.sleep(30)
                    continue
                
                # –í—ã—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                async with self.workers_lock:
                    self.categorization_is_running = True
                
                logger.info("üè∑Ô∏è Categorization Worker: –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    await self.process_all_categorization()
                finally:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    async with self.workers_lock:
                        self.categorization_is_running = False
                    logger.info("üè∑Ô∏è Categorization Worker: —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(30)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Categorization Worker: {e}")
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                async with self.workers_lock:
                    self.categorization_is_running = False
                await asyncio.sleep(60)  # –ë–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def summarization_worker(self):
        """Worker —Ü–∏–∫–ª –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.info("üìù –ó–∞–ø—É—Å–∫ Summarization Worker")
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                async with self.workers_lock:
                    if self.summarization_is_running:
                        logger.debug("üìù Summarization —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª")
                        await asyncio.sleep(30)
                        continue
                
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–∞–±–æ—Ç—ã
                if not await self.has_unsummarized_posts():
                    logger.debug("üìù –ù–µ—Ç –Ω–µ—Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
                    await asyncio.sleep(30)
                    continue
                
                # –í—ã—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                async with self.workers_lock:
                    self.summarization_is_running = True
                
                logger.info("üìù Summarization Worker: –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    await self.process_all_summarization()
                finally:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    async with self.workers_lock:
                        self.summarization_is_running = False
                    logger.info("üìù Summarization Worker: —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(30)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Summarization Worker: {e}")
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                async with self.workers_lock:
                    self.summarization_is_running = False
                await asyncio.sleep(60)  # –ë–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def has_uncategorized_posts(self) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/ai/status") as response:
                    if response.status == 200:
                        data = await response.json()
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º not_found –∏–ª–∏ pending
                        # –∏–ª–∏ –ø–æ—Å—Ç—ã —Å is_categorized=false
                        flags_stats = data.get("flags_stats", {})
                        uncategorized = flags_stats.get("uncategorized", 0)
                        return uncategorized > 0
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –µ—Å—Ç—å (fail-safe)
            return True
        return False

    async def has_unsummarized_posts(self) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/ai/status") as response:
                    if response.status == 200:
                        data = await response.json()
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç—ã —Å is_summarized=false
                        flags_stats = data.get("flags_stats", {})
                        unsummarized = flags_stats.get("unsummarized", 0)
                        return unsummarized > 0
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –µ—Å—Ç—å (fail-safe)
            return True
        return False

    async def process_all_categorization(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –Ω–µ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        batches_processed = 0
        
        while batches_processed < self.max_batches_per_cycle:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
            active_bots = await self.get_active_bots()
            if not active_bots:
                logger.info("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏")
                break
            
            work_found = False
            
            for bot in active_bots:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
                    posts = await self.get_posts_for_categorization(bot)
                    
                    if posts:
                        work_found = True
                        logger.info(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ '{bot['name']}'")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
                        await self.process_categorization_batch(posts, bot)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
                        post_ids = [p['id'] for p in posts]
                        await self.sync_service_status(post_ids, bot['id'], 'categorization')
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ '{bot['name']}': {e}")
            
            if not work_found:
                logger.info("‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                break
            
            batches_processed += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(1)
        
        if batches_processed >= self.max_batches_per_cycle:
            logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–∞—Ç—á–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {self.max_batches_per_cycle}")

    async def process_all_summarization(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –Ω–µ—Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        batches_processed = 0
        
        while batches_processed < self.max_batches_per_cycle:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
            active_bots = await self.get_active_bots()
            if not active_bots:
                logger.info("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
                break
            
            work_found = False
            
            for bot in active_bots:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                    posts = await self.get_posts_for_summarization(bot)
                    
                    if posts:
                        work_found = True
                        logger.info(f"üìù –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ '{bot['name']}'")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
                        await self.process_summarization_batch(posts, bot)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                        post_ids = [p['id'] for p in posts]
                        await self.sync_service_status(post_ids, bot['id'], 'summarization')
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ '{bot['name']}': {e}")
            
            if not work_found:
                logger.info("‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                break
            
            batches_processed += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(1)
        
        if batches_processed >= self.max_batches_per_cycle:
            logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–∞—Ç—á–µ–π —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {self.max_batches_per_cycle}")

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def get_posts_for_categorization(self, bot: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ (is_categorized=false)"""
        bot_id = bot['id']
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
        channels = await self.get_bot_channels(bot_id)
        if not channels:
            return []
        
        channel_telegram_ids = [ch['telegram_id'] for ch in channels]
        
        try:
            async with aiohttp.ClientSession() as session:
                params = {
                    "channel_telegram_ids": ",".join(map(str, channel_telegram_ids)),
                    "bot_id": bot_id,
                    "limit": self.batch_size,
                    "require_categorization": "true"  # –¢–æ–ª—å–∫–æ –Ω–µ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
                }
                
                async with session.get(
                    f"{self.backend_url}/api/posts/unprocessed",
                    params=params
                ) as response:
                    if response.status == 200:
                        posts = await response.json()
                        return posts  # Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return []

    async def get_posts_for_summarization(self, bot: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (is_categorized=true, is_summarized=false)"""
        bot_id = bot['id']
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
        channels = await self.get_bot_channels(bot_id)
        if not channels:
            return []
        
        channel_telegram_ids = [ch['telegram_id'] for ch in channels]
        
        try:
            async with aiohttp.ClientSession() as session:
                params = {
                    "channel_telegram_ids": ",".join(map(str, channel_telegram_ids)),
                    "bot_id": bot_id,
                    "limit": self.batch_size,
                    "require_summarization": "true"  # –¢–æ–ª—å–∫–æ –Ω–µ—Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
                }
                
                async with session.get(
                    f"{self.backend_url}/api/posts/unprocessed",
                    params=params
                ) as response:
                    if response.status == 200:
                        posts = await response.json()
                        return posts  # Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return []

    async def process_categorization_batch(self, posts: List[Dict], bot: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        categories = await self.get_bot_categories(bot['id'])
        if not categories:
            logger.warning(f"‚ö†Ô∏è –£ –±–æ—Ç–∞ {bot['name']} –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π CategorizationService
        if self.categorization_service:
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –≤ –æ–±—ä–µ–∫—Ç—ã Post –¥–ª—è CategorizationService
                post_objects = []
                for post_dict in posts:
                    post_obj = Post(
                        id=post_dict['id'],
                        channel_telegram_id=post_dict['channel_telegram_id'],
                        telegram_message_id=post_dict['telegram_message_id'],
                        title=post_dict.get('title', ''),
                        content=post_dict.get('content', ''),
                        post_date=post_dict['post_date'],
                        views=post_dict.get('views', 0),
                        media_urls=post_dict.get('media_urls', [])
                    )
                    post_objects.append(post_obj)
                
                # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ CategorizationService
                results = await self.categorization_service.process_with_bot_config(
                    post_objects, bot['id']
                )
                
                if results:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ ProcessingResult
                    processing_results = []
                    for result in results:
                        processing_result = ProcessingResult(
                            post_id=result.get('post_id', 0),
                            bot_id=bot['id'],
                            success=True,
                            categories=result,
                            summaries={},
                            metrics=result.get('metrics', {})
                        )
                        processing_results.append(processing_result)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
                    saved_count = await self.save_results(processing_results)
                    logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
                    post_ids = [result.get('post_id', 0) for result in results]
                    await self.sync_service_status(post_ids, bot['id'], 'categorization')
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

    async def process_summarization_batch(self, posts: List[Dict], bot: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SummarizationService
        if self.summarization_service:
            try:
                # –î–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                processed_posts = []
                for post in posts:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ processed_data –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞ –∏ –±–æ—Ç–∞
                    processed_data = await self.get_processed_data(post['id'], bot['id'])
                    if processed_data and processed_data.get('categorization_result'):
                        processed_posts.append({
                            **post,
                            'categories': processed_data['categorization_result']
                        })
                
                if processed_posts:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    texts = []
                    for post in processed_posts:
                        text = f"{post.get('title', '')} {post.get('content', '')}".strip()
                        texts.append(text)
                    
                    # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ SummarizationService
                    results = await self.summarization_service.process_batch(texts)
                    
                    if results:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ ProcessingResult
                        processing_results = []
                        for i, result in enumerate(results):
                            if i < len(processed_posts):
                                processing_result = ProcessingResult(
                                    post_id=processed_posts[i]['id'],
                                    bot_id=bot['id'],
                                    success=True,
                                    categories=processed_posts[i].get('categories', {}),
                                    summaries=result,
                                    metrics={}
                                )
                                processing_results.append(processing_result)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                        saved_count = await self.save_results(processing_results)
                        logger.info(f"‚úÖ –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                        post_ids = [post['id'] for post in processed_posts]
                        await self.sync_service_status(post_ids, bot['id'], 'summarization')
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")

    async def get_processed_data(self, post_id: int, bot_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞ –∏ –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.backend_url}/api/ai/results",
                    params={"post_id": post_id, "bot_id": bot_id}
                ) as response:
                    if response.status == 200:
                        results = await response.json()  # Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫
                        return results[0] if results else None
                    return None
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è processed_data –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return None

    # ===== –ú–ï–¢–û–î–´ –ò–ó V4 (–ù–ï–ò–ó–ú–ï–ù–ï–ù–ù–´–ï) =====
    
    async def sync_service_status(self, post_ids: List[int], bot_id: int, service: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ boolean —Ñ–ª–∞–≥–∏"""
        if not post_ids:
            return
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª—è—Ç—å
            update_data = {}
            if service == 'categorization':
                update_data['is_categorized'] = True
            elif service == 'summarization':
                update_data['is_summarized'] = True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {service}")
                return
            
            # –ú–∞–ø–ø–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è API
            service_mapping = {
                'categorization': 'categorizer',
                'summarization': 'summarizer'
            }
            
            payload = {
                "post_ids": post_ids,
                "bot_id": bot_id,
                "service": service_mapping.get(service, service),
                **update_data
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.put(
                    f"{self.backend_url}/api/ai/results/sync-status",
                    json=payload
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ {service}: {len(post_ids)} –ø–æ—Å—Ç–æ–≤, —Å—Ç–∞—Ç—É—Å: {data.get('message', 'OK')}")
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ {service}: {response.status} - {error_text}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ {service}: {e}")

    async def save_results(self, results: List[ProcessingResult]) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not results:
            return 0
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
            results_data = []
            for result in results:
                result_dict = {
                    "post_id": result.post_id,
                    "public_bot_id": result.bot_id,
                    "categorization_result": result.categories,
                    "summarization_result": result.summaries,
                    "metrics": result.metrics,
                    "processing_version": result.processing_version,
                    "success": result.success
                }
                
                if result.error_message:
                    result_dict["error_message"] = result.error_message
                
                results_data.append(result_dict)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å (API –æ–∂–∏–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫, –Ω–µ –æ–±—ä–µ–∫—Ç)
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.backend_url}/api/ai/results/batch",
                    json=results_data  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
                ) as response:
                    if response.status == 201:
                        data = await response.json()
                        saved_count = data.get("saved_count", 0)
                        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ processed_data")
                        return saved_count
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {response.status} - {error_text}")
                        return 0
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return 0

    async def get_active_bots(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots") as response:
                    if response.status == 200:
                        bots = await response.json()  # Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
                        active_bots = [bot for bot in bots if bot.get("status") == "active"]
                        return active_bots
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤: {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–æ—Ç–æ–≤: {e}")
            return []

    async def get_bot_channels(self, bot_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots/{bot_id}/channels") as response:
                    if response.status == 200:
                        channels = await response.json()  # Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
                        return channels
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
            return []

    async def get_bot_categories(self, bot_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/api/public-bots/{bot_id}/categories") as response:
                    if response.status == 200:
                        categories = await response.json()  # Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
                        return categories
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±–æ—Ç–∞ {bot_id}: {response.status}")
                        return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
            return []

    # ===== LEGACY –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò =====
    
    async def run_single_batch(self, skip_initialization: bool = False):
        """Legacy –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ (Legacy mode)")
        
        if not skip_initialization and (self.categorization_service is None or self.summarization_service is None):
            if not await self.initialize_ai_services():
                return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –∫–∞–∂–¥–æ–≥–æ worker'–∞
        await self.process_all_categorization()
        await self.process_all_summarization()
        
        return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ AI Orchestrator"""
    parser = argparse.ArgumentParser(description='AI Orchestrator v5.0 - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞')
    parser.add_argument('mode', choices=['single', 'parallel'], 
                       help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: single - –æ–¥–∏–Ω –±–∞—Ç—á, parallel - –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ workers')
    parser.add_argument('--backend-url', default='http://localhost:8000',
                       help='URL Backend API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8000)')
    parser.add_argument('--batch-size', type=int, default=30,
                       help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)')
    
    args = parser.parse_args()
    
    orchestrator = AIOrchestrator(
        backend_url=args.backend_url,
        batch_size=args.batch_size
    )
    
    try:
        if args.mode == 'single':
            logger.info("üéØ –†–µ–∂–∏–º: –û–¥–∏–Ω–æ—á–Ω—ã–π –±–∞—Ç—á")
            success = await orchestrator.run_single_batch()
            if success:
                logger.info("‚úÖ –û–¥–∏–Ω–æ—á–Ω—ã–π –±–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –±–∞—Ç—á–∞")
        
        elif args.mode == 'parallel':
            logger.info("üîÑ –†–µ–∂–∏–º: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ workers")
            await orchestrator.run_parallel_workers()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    import sys
    sys.exit(asyncio.run(main())) 