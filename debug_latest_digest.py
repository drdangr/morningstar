#!/usr/bin/env python3

import requests
import json
import sys

def debug_latest_digest():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
    try:
        response = requests.get('http://localhost:8000/api/digests?limit=1')
        response.raise_for_status()
        digests = response.json()
        
        if not digests:
            print("‚ùå –î–∞–π–¥–∂–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        latest_digest = digests[0]
        print(f"üîç –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: {latest_digest['digest_id']}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω: {latest_digest['created_at']}")
        print(f"üìä –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {latest_digest['total_posts']}")
        print(f"üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {latest_digest['relevant_posts']}")
        print(f"üìà –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å: {latest_digest.get('avg_importance', 'N/A')}")
        print(f"üö® –°—Ä–µ–¥–Ω—è—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å: {latest_digest.get('avg_urgency', 'N/A')}")
        print(f"‚≠ê –°—Ä–µ–¥–Ω—è—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å: {latest_digest.get('avg_significance', 'N/A')}")
        print(f"ü§ñ Batch processing: {latest_digest.get('batch_processing_applied', 'N/A')}")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        digest_data_response = requests.get(f'http://localhost:8000/api/digests/{latest_digest["digest_id"]}/data')
        digest_data_response.raise_for_status()
        full_data = digest_data_response.json()
        
        print("üìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–°–¢–û–í:")
        print("=" * 50)
        
        channels = full_data.get('channels', [])
        total_ai_processed = 0
        total_with_categories = 0
        ai_analysis_examples = []
        
        for i, channel in enumerate(channels[:3]):  # –ü–µ—Ä–≤—ã–µ 3 –∫–∞–Ω–∞–ª–∞
            print(f"\nüì∫ –ö–∞–Ω–∞–ª {i+1}: {channel.get('title', 'Unknown')}")
            print(f"üë§ Username: {channel.get('username', 'N/A')}")
            print(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞: {channel.get('categories', [])}")
            print(f"üì∞ –ü–æ—Å—Ç–æ–≤ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ: {len(channel.get('posts', []))}")
            
            posts = channel.get('posts', [])
            for j, post in enumerate(posts[:2]):  # –ü–µ—Ä–≤—ã–µ 2 –ø–æ—Å—Ç–∞
                print(f"\n  üìÑ –ü–æ—Å—Ç {j+1}:")
                print(f"    üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {post.get('title', 'N/A')[:100]}...")
                print(f"    üéØ AI –≤–∞–∂–Ω–æ—Å—Ç—å: {post.get('ai_importance', 'N/A')}")
                print(f"    üö® AI —Å—Ä–æ—á–Ω–æ—Å—Ç—å: {post.get('ai_urgency', 'N/A')}")
                print(f"    ‚≠ê AI –∑–Ω–∞—á–∏–º–æ—Å—Ç—å: {post.get('ai_significance', 'N/A')}")
                print(f"    üè∑Ô∏è Post –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {post.get('post_category', 'N/A')}")
                print(f"    üìã AI summary: {post.get('summary', 'N/A')[:150]}...")
                print(f"    üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {post.get('views', 'N/A')}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if post.get('ai_importance', 0) > 0:
                    total_ai_processed += 1
                if post.get('post_category') and post.get('post_category') != 'Unknown':
                    total_with_categories += 1
                    
                ai_analysis_examples.append({
                    'channel': channel.get('title'),
                    'ai_importance': post.get('ai_importance', 0),
                    'post_category': post.get('post_category', 'N/A'),
                    'summary': post.get('summary', 'N/A')[:100]
                })
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê AI –û–ë–†–ê–ë–û–¢–ö–ò:")
        print(f"ü§ñ –ü–æ—Å—Ç–æ–≤ —Å AI –º–µ—Ç—Ä–∏–∫–∞–º–∏: {total_ai_processed}")
        print(f"üè∑Ô∏è –ü–æ—Å—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: {total_with_categories}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç AI –æ–±—Ä–∞–±–æ—Ç–∫–∏: {(total_ai_processed/max(latest_digest['total_posts'], 1)*100):.1f}%")
        
        print(f"\nüîç –ü–†–ò–ú–ï–†–´ AI –ê–ù–ê–õ–ò–ó–ê:")
        for example in ai_analysis_examples[:3]:
            print(f"  üì∫ {example['channel']}: –≤–∞–∂–Ω–æ—Å—Ç—å={example['ai_importance']}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è='{example['post_category']}', summary='{example['summary']}...'")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ batch processing –¥–∞–Ω–Ω—ã—Ö
        if full_data.get('batch_processing_applied'):
            print(f"\nüîÑ BATCH PROCESSING DATA:")
            summary = full_data.get('summary', {})
            print(f"  üì¶ –ë–∞—Ç—á–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {summary.get('batches_processed', 'N/A')}")
            print(f"  üìä –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {summary.get('original_posts', 'N/A')}")
            print(f"  üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ: {summary.get('relevant_posts', 'N/A')}")
            print(f"  üìà –°—Ä–µ–¥–Ω–∏–µ AI –º–µ—Ç—Ä–∏–∫–∏: imp={summary.get('avg_importance', 'N/A'):.1f}, urg={summary.get('avg_urgency', 'N/A'):.1f}, sig={summary.get('avg_significance', 'N/A'):.1f}")
        
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    debug_latest_digest() 