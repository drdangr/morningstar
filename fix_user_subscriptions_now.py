#!/usr/bin/env python3
"""
–°–†–û–ß–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã user_subscriptions
–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫–∞ backend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
"""

import psycopg2
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def main():
    print("üîß –°–†–û–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ user_subscriptions")
    print("=" * 60)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ .env
        conn = psycopg2.connect(
            host=os.getenv('DB_HOST', 'localhost'),
            port=int(os.getenv('DB_PORT', '5432')),
            database=os.getenv('DB_NAME', 'digest_bot'),
            user=os.getenv('DB_USER', 'digest_bot'),
            password=os.getenv('DB_PASSWORD')
        )
        conn.autocommit = True
        cursor = conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'user_subscriptions' 
            ORDER BY ordinal_position
        """)
        columns = cursor.fetchall()
        
        if columns:
            print("–¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã:")
            for col in columns:
                print(f"  ‚Ä¢ {col[0]}: {col[1]} ({'NULL' if col[2] == 'YES' else 'NOT NULL'})")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ user_subscriptions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        print("\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
        cursor.execute("DROP TABLE IF EXISTS user_subscriptions CASCADE")
        print("‚úÖ –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
        cursor.execute("""
            CREATE TABLE user_subscriptions (
                user_id INTEGER NOT NULL,
                category_id INTEGER NOT NULL,
                PRIMARY KEY (user_id, category_id),
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE
            )
        """)
        print("‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\n‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'user_subscriptions' 
            ORDER BY ordinal_position
        """)
        columns = cursor.fetchall()
        
        for col in columns:
            print(f"  ‚Ä¢ {col[0]}: {col[1]} ({'NULL' if col[2] == 'YES' else 'NOT NULL'})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        cursor.execute("""
            SELECT conname, contype 
            FROM pg_constraint 
            WHERE conrelid = 'user_subscriptions'::regclass
        """)
        constraints = cursor.fetchall()
        
        print("\nüîó –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
        for constraint in constraints:
            constraint_type = {
                'p': 'PRIMARY KEY',
                'f': 'FOREIGN KEY', 
                'u': 'UNIQUE',
                'c': 'CHECK'
            }.get(constraint[1], constraint[1])
            print(f"  ‚Ä¢ {constraint[0]}: {constraint_type}")
        
        cursor.close()
        conn.close()
        
        print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å backend")
        print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_subscriptions –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ")

if __name__ == "__main__":
    main() 