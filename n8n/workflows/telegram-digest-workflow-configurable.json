{
  "name": "Telegram Digest Workflow (Configurable)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "telegram-posts",
        "options": {}
      },
      "name": "Webhook - Receive Posts",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "webhook-receive-posts"
    },
    {
      "parameters": {
        "functionCode": "// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ environment variables\nconst config = {\n  maxPostsPerDigest: parseInt(process.env.MAX_POSTS_PER_DIGEST || '20'),\n  minPostLength: parseInt(process.env.MIN_POST_LENGTH || '50'),\n  minViewsThreshold: parseInt(process.env.MIN_VIEWS_THRESHOLD || '100'),\n  collectionHours: parseInt(process.env.COLLECTION_HOURS || '24'),\n  qualityThreshold: parseFloat(process.env.QUALITY_THRESHOLD || '0.7'),\n  enableAI: process.env.ENABLE_AI_PROCESSING === 'true',\n  debugMode: process.env.DEBUG_MODE === 'true'\n};\n\n// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\nconst data = $input.all();\nconst payload = data[0].body;\nconst stats = payload.collection_stats || {};\nconst posts = payload.posts || [];\n\nif (config.debugMode) {\n  console.log('üîß Configuration loaded:', JSON.stringify(config, null, 2));\n  console.log('üì• Received data from userbot:', JSON.stringify(data, null, 2));\n}\n\nconsole.log(`üìä Statistics: ${stats.total_posts} posts from ${stats.successful_channels} channels`);\nconsole.log(`‚öôÔ∏è Config: max_posts=${config.maxPostsPerDigest}, min_length=${config.minPostLength}`);\n\nreturn {\n  timestamp: payload.timestamp,\n  stats: stats,\n  posts: posts,\n  total_posts: posts.length,\n  config: config\n};"
      },
      "name": "Load Config & Process Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300],
      "id": "load-config-process"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.total_posts}}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "name": "Has Posts?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300],
      "id": "has-posts-check"
    },
    {
      "parameters": {
        "functionCode": "// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤\nconst posts = $json.posts || [];\nconst config = $json.config;\n\nconsole.log('üîç Applying basic filters...');\n\n// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–∑–æ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\nconst filteredPosts = posts.filter(post => {\n  const textLength = (post.text || '').length;\n  const views = post.views || 0;\n  \n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞\n  if (textLength < config.minPostLength) {\n    return false;\n  }\n  \n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n  if (views < config.minViewsThreshold) {\n    return false;\n  }\n  \n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n  const postDate = new Date(post.date);\n  const hoursAgo = (Date.now() - postDate.getTime()) / (1000 * 60 * 60);\n  if (hoursAgo > config.collectionHours) {\n    return false;\n  }\n  \n  return true;\n});\n\nconsole.log(`üìä Basic filtering: ${posts.length} ‚Üí ${filteredPosts.length} posts`);\n\nreturn {\n  timestamp: $json.timestamp,\n  stats: $json.stats,\n  posts: filteredPosts,\n  total_posts: filteredPosts.length,\n  config: config,\n  filtering_stats: {\n    original: posts.length,\n    after_basic_filter: filteredPosts.length\n  }\n};"
      },
      "name": "Basic Filtering",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 200],
      "id": "basic-filtering"
    },
    {
      "parameters": {
        "functionCode": "// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–∞–Ω–∞–ª–∞–º —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫\nconst posts = $json.posts || [];\nconst config = $json.config;\n\nconst groupedByChannel = {};\n\nposts.forEach(post => {\n  const channelKey = post.channel_username || post.channel_id;\n  \n  if (!groupedByChannel[channelKey]) {\n    groupedByChannel[channelKey] = {\n      channel_title: post.channel_title,\n      channel_username: post.channel_username,\n      posts: [],\n      // –ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ API (Stage 3)\n      settings: {\n        priority: 'medium',\n        max_posts: Math.ceil(config.maxPostsPerDigest / 3) // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n      }\n    };\n  }\n  \n  groupedByChannel[channelKey].posts.push({\n    id: post.id,\n    text: post.text,\n    date: post.date,\n    url: post.url,\n    views: post.views,\n    media_type: post.media_type,\n    categories: post.categories || [] // –î–ª—è Stage 3\n  });\n});\n\n// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–º –∫–∞–Ω–∞–ª–µ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º\nObject.keys(groupedByChannel).forEach(channelKey => {\n  const channelData = groupedByChannel[channelKey];\n  channelData.posts.sort((a, b) => (b.views || 0) - (a.views || 0));\n  \n  console.log(`üìã ${channelData.channel_title}: ${channelData.posts.length} posts`);\n});\n\nreturn {\n  timestamp: $json.timestamp,\n  stats: $json.stats,\n  grouped_posts: groupedByChannel,\n  total_channels: Object.keys(groupedByChannel).length,\n  config: config,\n  filtering_stats: $json.filtering_stats\n};"
      },
      "name": "Group & Sort by Channels",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 200],
      "id": "group-sort-channels"
    },
    {
      "parameters": {
        "functionCode": "// –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\nconst groupedPosts = $json.grouped_posts || {};\nconst config = $json.config;\n\nconsole.log('ü§ñ Smart processing with configuration...');\n\nconst processedChannels = {};\nlet totalProcessedPosts = 0;\n\nObject.keys(groupedPosts).forEach(channelKey => {\n  const channelData = groupedPosts[channelKey];\n  const maxPostsForChannel = channelData.settings.max_posts;\n  \n  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤\n  const smartFiltered = channelData.posts.filter(post => {\n    const textLength = (post.text || '').length;\n    \n    // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ—Å—Ç—ã\n    if (textLength < config.minPostLength) return false;\n    \n    // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å—Ç—ã —Ç–æ–ª—å–∫–æ —Å –º–µ–¥–∏–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞\n    if (post.media_type !== 'text' && textLength < 20) return false;\n    \n    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç AI –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞\n    return true;\n  });\n  \n  // –ë–µ—Ä–µ–º —Ç–æ–ø –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞\n  const selectedPosts = smartFiltered.slice(0, maxPostsForChannel);\n  \n  processedChannels[channelKey] = {\n    ...channelData,\n    posts: selectedPosts,\n    filtered_count: selectedPosts.length,\n    original_count: channelData.posts.length\n  };\n  \n  totalProcessedPosts += selectedPosts.length;\n  \n  console.log(`  ${channelData.channel_title}: ${channelData.posts.length} ‚Üí ${selectedPosts.length} posts`);\n});\n\n// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤\nif (totalProcessedPosts > config.maxPostsPerDigest) {\n  console.log(`‚ö†Ô∏è Total posts (${totalProcessedPosts}) exceeds limit (${config.maxPostsPerDigest})`);\n  \n  // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–∞–Ω–∞–ª–∞–º\n  const reductionRatio = config.maxPostsPerDigest / totalProcessedPosts;\n  \n  Object.keys(processedChannels).forEach(channelKey => {\n    const channelData = processedChannels[channelKey];\n    const newLimit = Math.max(1, Math.floor(channelData.posts.length * reductionRatio));\n    channelData.posts = channelData.posts.slice(0, newLimit);\n    channelData.filtered_count = channelData.posts.length;\n  });\n  \n  totalProcessedPosts = Object.values(processedChannels)\n    .reduce((sum, channel) => sum + channel.posts.length, 0);\n    \n  console.log(`‚úÇÔ∏è Reduced to ${totalProcessedPosts} posts total`);\n}\n\nreturn {\n  timestamp: $json.timestamp,\n  processed_at: new Date().toISOString(),\n  stats: $json.stats,\n  processed_channels: processedChannels,\n  total_channels: Object.keys(processedChannels).length,\n  total_selected_posts: totalProcessedPosts,\n  config: config,\n  filtering_stats: {\n    ...$json.filtering_stats,\n    after_smart_filter: totalProcessedPosts\n  }\n};"
      },
      "name": "Smart Processing",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 200],
      "id": "smart-processing"
    },
    {
      "parameters": {
        "functionCode": "// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\nconst processedChannels = $json.processed_channels || {};\nconst config = $json.config;\n\nconsole.log('üìÑ Preparing configurable digest...');\n\nconst digest = {\n  id: `digest_${Date.now()}`,\n  created_at: $json.timestamp,\n  processed_at: $json.processed_at,\n  channels: [],\n  total_posts: $json.total_selected_posts,\n  configuration: {\n    max_posts_limit: config.maxPostsPerDigest,\n    min_post_length: config.minPostLength,\n    min_views_threshold: config.minViewsThreshold,\n    processing_mode: config.enableAI ? 'ai' : 'basic'\n  },\n  summary: {\n    channels_processed: Object.keys(processedChannels).length,\n    original_posts: $json.stats.total_posts,\n    filtered_posts: $json.total_selected_posts,\n    filtering_stages: $json.filtering_stats\n  }\n};\n\nObject.keys(processedChannels).forEach(channelKey => {\n  const channelData = processedChannels[channelKey];\n  \n  digest.channels.push({\n    title: channelData.channel_title,\n    username: channelData.channel_username,\n    posts_count: channelData.posts.length,\n    posts: channelData.posts.map(post => {\n      const preview = (post.text || '').substring(0, 100);\n      return {\n        title: preview + (preview.length === 100 ? '...' : ''),\n        url: post.url,\n        views: post.views,\n        date: post.date,\n        media_type: post.media_type\n      };\n    })\n  });\n});\n\nconsole.log(`‚úÖ Configurable digest ready:`);\nconsole.log(`   Posts: ${digest.total_posts}/${config.maxPostsPerDigest} (limit)`);\nconsole.log(`   Channels: ${digest.channels.length}`);\nconsole.log(`   Processing: ${digest.configuration.processing_mode}`);\n\nreturn digest;"
      },
      "name": "Prepare Configurable Digest",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 200],
      "id": "prepare-configurable-digest"
    },
    {
      "parameters": {
        "functionCode": "// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Backend API\nconst digest = $json;\nconst backendUrl = process.env.BACKEND_API_URL || 'http://localhost:8000';\nconst saveEnabled = process.env.ENABLE_BACKEND_SAVE === 'true';\n\nconsole.log('üíæ Configurable save to backend...');\nconsole.log('Backend URL:', backendUrl);\nconsole.log('Save enabled:', saveEnabled);\nconsole.log('Digest ID:', digest.id);\nconsole.log('Total posts:', digest.total_posts);\n\nif (saveEnabled) {\n  // TODO: –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Backend API\n  console.log('üöÄ Would save to:', `${backendUrl}/api/digests`);\n  console.log('üì¶ Payload size:', JSON.stringify(digest).length, 'bytes');\n} else {\n  console.log('‚è∏Ô∏è Backend save disabled, logging only');\n}\n\nreturn {\n  success: true,\n  digest_id: digest.id,\n  message: `Digest ${saveEnabled ? 'saved' : 'prepared'} with ${digest.total_posts} posts from ${digest.channels.length} channels`,\n  timestamp: new Date().toISOString(),\n  configuration: digest.configuration,\n  backend_url: backendUrl,\n  save_enabled: saveEnabled\n};"
      },
      "name": "Save to Backend (Configurable)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1780, 200],
      "id": "save-configurable"
    },
    {
      "parameters": {
        "functionCode": "// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤\nconst config = $json.config || {};\n\nconsole.log('‚ö†Ô∏è No posts received from userbot');\nconsole.log('üîß Active configuration:', JSON.stringify(config, null, 2));\n\nreturn {\n  success: false,\n  message: 'No posts to process',\n  timestamp: new Date().toISOString(),\n  configuration: config\n};"
      },
      "name": "No Posts Handler (Configurable)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 400],
      "id": "no-posts-configurable"
    }
  ],
  "connections": {
    "Webhook - Receive Posts": {
      "main": [
        [
          {
            "node": "Load Config & Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Config & Process Data": {
      "main": [
        [
          {
            "node": "Has Posts?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Posts?": {
      "main": [
        [
          {
            "node": "Basic Filtering",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Posts Handler (Configurable)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic Filtering": {
      "main": [
        [
          {
            "node": "Group & Sort by Channels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Group & Sort by Channels": {
      "main": [
        [
          {
            "node": "Smart Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Smart Processing": {
      "main": [
        [
          {
            "node": "Prepare Configurable Digest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Configurable Digest": {
      "main": [
        [
          {
            "node": "Save to Backend (Configurable)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "2"
} 