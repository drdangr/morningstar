#!/usr/bin/env python3
# -*- coding: utf-8 -*-

print("üîç –ó–∞–ø—É—Å–∫ bot_v3_debug.py...")

import asyncio
import logging
import json
from datetime import datetime

print("üì¶ –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

try:
    import aiohttp
    print("‚úÖ aiohttp –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ aiohttp: {e}")
    exit(1)

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
    from telegram.constants import ParseMode
    print("‚úÖ telegram –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram: {e}")
    exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8124620179:AAHNt4-7ZFg-zz0Cr6mJX483jDuNeARpIdE"
BOT_ID = 4
BACKEND_URL = "http://127.0.0.1:8000"

print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: BOT_ID={BOT_ID}, BACKEND_URL={BACKEND_URL}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

print("üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

# =============================================================================
# BACKEND API –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
# =============================================================================

async def api_request(method, endpoint, data=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Backend API"""
    url = f"{BACKEND_URL}{endpoint}"
    
    try:
        async with aiohttp.ClientSession() as session:
            if method.upper() == "GET":
                async with session.get(url, params=data) as response:
                    if response.status in [200, 201]:
                        return await response.json()
                    else:
                        logger.error(f"API Error {response.status}: {await response.text()}")
                        return None
            elif method.upper() == "POST":
                async with session.post(url, json=data) as response:
                    if response.status in [200, 201]:
                        return await response.json()
                    else:
                        logger.error(f"API Error {response.status}: {await response.text()}")
                        return None
            else:
                return None
                
    except Exception as e:
        logger.error(f"API request failed: {e}")
        return None

async def get_bot_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞"""
    return await api_request("GET", f"/api/public-bots/{BOT_ID}")

async def test_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å...")
    
    # –¢–µ—Å—Ç 1: Backend API
    try:
        bot_data = await get_bot_data()
        if bot_data:
            print(f"‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç. –ë–æ—Ç: {bot_data.get('name')}")
        else:
            print("‚ùå Backend API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Backend API: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: Telegram Bot API
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        bot_info = await application.bot.get_me()
        print(f"‚úÖ Telegram Bot API —Ä–∞–±–æ—Ç–∞–µ—Ç. Username: @{bot_info.username}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram Bot API: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    if not await test_basic_functionality():
        print("‚ùå –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
        return
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
    print("üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    await setup_bot_commands(application)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("categories", categories_command))
    application.add_handler(CommandHandler("channels", channels_command))
    application.add_handler(CommandHandler("digest", digest_command))
    application.add_handler(CommandHandler("subscriptions", subscriptions_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def unknown_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "ü§î –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /help",
            reply_markup=get_main_menu_keyboard()
        )
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_handler))
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

# =============================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–ù–û–¶–ï–ù–ù–û–ì–û –ë–û–¢–ê
# =============================================================================

async def get_bot_categories():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞"""
    return await api_request("GET", f"/api/public-bots/{BOT_ID}/categories")

async def get_bot_channels():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞"""
    return await api_request("GET", f"/api/public-bots/{BOT_ID}/channels")

async def get_user_category_subscriptions(telegram_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return await api_request("GET", f"/api/public-bots/{BOT_ID}/users/{telegram_id}/subscriptions")

async def get_user_channel_subscriptions(telegram_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    return await api_request("GET", f"/api/public-bots/{BOT_ID}/users/{telegram_id}/channel-subscriptions")

async def update_user_category_subscriptions(telegram_id, category_ids):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return await api_request("POST", f"/api/public-bots/{BOT_ID}/users/{telegram_id}/subscriptions", 
                           {"category_ids": category_ids})

async def update_user_channel_subscriptions(telegram_id, channel_ids):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    return await api_request("POST", f"/api/public-bots/{BOT_ID}/users/{telegram_id}/channel-subscriptions", 
                           {"channel_ids": channel_ids})

async def get_filtered_posts(subscribed_channel_ids, subscribed_categories, max_posts):
    """üéØ –î–í–û–ô–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –∫–∞–Ω–∞–ª—ã ‚à© –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        params = {
            "bot_id": BOT_ID,
            "limit": max_posts * 3,
            "ai_status": "processed",
            "sort_by": "collected_at",
            "sort_order": "desc"
        }
        
        response = await api_request("GET", "/api/posts/cache-with-ai", params)
        if not response:
            return []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if isinstance(response, dict):
            posts_data = None
            for key in ['posts', 'data', 'results', 'items']:
                if key in response:
                    posts_data = response[key]
                    break
            if posts_data is None:
                return []
        else:
            posts_data = response

        filtered_posts = []
        
        for post in posts_data:
            if isinstance(post, str):
                try:
                    post = json.loads(post)
                except:
                    continue
            
            # –§–ò–õ–¨–¢–† 1: –ö–∞–Ω–∞–ª
            channel_telegram_id = post.get('channel_telegram_id')
            if not channel_telegram_id or channel_telegram_id not in subscribed_channel_ids:
                continue
            
            # –§–ò–õ–¨–¢–† 2: –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            ai_categories = post.get('ai_categories')
            if ai_categories:
                if isinstance(ai_categories, str):
                    try:
                        ai_categories = json.loads(ai_categories)
                    except:
                        continue
                
                post_category = None
                if isinstance(ai_categories, dict):
                    post_category = ai_categories.get('category') or ai_categories.get('categories')
                
                if post_category and post_category in subscribed_categories:
                    ai_summaries = post.get('ai_summaries', {})
                    if isinstance(ai_summaries, str):
                        try:
                            ai_summaries = json.loads(ai_summaries)
                        except:
                            ai_summaries = {}
                    
                    summary = ai_summaries.get('summary', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
                    message_id = post.get('telegram_message_id')
                    post_url = f"https://t.me/c/{abs(channel_telegram_id)}/{message_id}" if message_id else "#"
                    
                    filtered_posts.append({
                        'title': (post.get('title') or '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50],
                        'ai_summary': summary,
                        'ai_category': post_category,
                        'post_url': post_url,
                        'channel_telegram_id': channel_telegram_id,
                        'post_date': post.get('post_date')
                    })
                    
                    if len(filtered_posts) >= max_posts:
                        break
        
        return filtered_posts
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return []

async def ensure_auto_subscription(telegram_id):
    """–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã"""
    try:
        bot_categories = await get_bot_categories()
        bot_channels = await get_bot_channels()
        
        if not bot_categories or not bot_channels:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        user_category_subs = await get_user_category_subscriptions(telegram_id)
        user_channel_subs = await get_user_channel_subscriptions(telegram_id)
        
        # ID –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö
        subscribed_category_ids = []
        if user_category_subs and 'subscribed_categories' in user_category_subs:
            subscribed_category_ids = [cat['id'] for cat in user_category_subs['subscribed_categories']]
        
        subscribed_channel_ids = []
        if user_channel_subs and 'subscribed_channels' in user_channel_subs:
            subscribed_channel_ids = [ch['id'] for ch in user_channel_subs['subscribed_channels']]
        
        # ID –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        all_category_ids = [cat['id'] for cat in bot_categories]
        all_channel_ids = [ch['id'] for ch in bot_channels]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if set(subscribed_category_ids) != set(all_category_ids):
            await update_user_category_subscriptions(telegram_id, all_category_ids)
        
        if set(subscribed_channel_ids) != set(all_channel_ids):
            await update_user_channel_subscriptions(telegram_id, all_channel_ids)
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# =============================================================================
# UI –ö–û–ú–ü–û–ù–ï–ù–¢–´
# =============================================================================

def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
            InlineKeyboardButton("üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="channels")
        ],
        [
            InlineKeyboardButton("üéØ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions"),
            InlineKeyboardButton("üì∞ –î–∞–π–¥–∂–µ—Å—Ç", callback_data="digest")
        ],
        [
            InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help"),
            InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def get_categories_keyboard(telegram_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    categories = await get_bot_categories()
    user_subs = await get_user_category_subscriptions(telegram_id)
    
    if not categories:
        return None
    
    subscribed_ids = []
    if user_subs and 'subscribed_categories' in user_subs:
        subscribed_ids = [cat['id'] for cat in user_subs['subscribed_categories']]
    
    keyboard = []
    for cat in categories:
        status = "‚úÖ" if cat['id'] in subscribed_ids else "‚≠ï"
        text = f"{status} {cat['name']}"
        callback_data = f"toggle_category_{cat['id']}"
        keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_menu")])
    return InlineKeyboardMarkup(keyboard)

async def get_channels_keyboard(telegram_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    channels = await get_bot_channels()
    user_subs = await get_user_channel_subscriptions(telegram_id)
    
    if not channels:
        return None
    
    subscribed_ids = []
    if user_subs and 'subscribed_channels' in user_subs:
        subscribed_ids = [ch['id'] for ch in user_subs['subscribed_channels']]
    
    keyboard = []
    for ch in channels:
        status = "‚úÖ" if ch['id'] in subscribed_ids else "‚≠ï"
        title = ch.get('title', ch.get('channel_name', '–ö–∞–Ω–∞–ª'))
        text = f"{status} {title}"
        callback_data = f"toggle_channel_{ch['id']}"
        keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_menu")])
    return InlineKeyboardMarkup(keyboard)

# =============================================================================
# –ö–û–ú–ê–ù–î–´
# =============================================================================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    await ensure_auto_subscription(user.id)
    
    welcome_text = f"""
ü§ñ **–ü—Ä–∏–≤–µ—Ç, {user.first_name}!**

–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã —Å —É–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π.

**üéØ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–≤–æ–π–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:**
1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ **–∫–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏**
2Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ **–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º**
3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ—Ç–µ –ø–æ—Å—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º

**üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:**
/categories - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º
/channels - –∫–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏
/digest - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
"""
    
    await update.message.reply_text(
        welcome_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_menu_keyboard()
    )

async def digest_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /digest"""
    user_id = update.effective_user.id
    
    loading_msg = await update.effective_message.reply_text("üîç –§–æ—Ä–º–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç...")
    
    try:
        bot_data = await get_bot_data()
        max_posts = bot_data.get('max_posts_per_digest', 10) if bot_data else 10
        
        category_subs = await get_user_category_subscriptions(user_id)
        channel_subs = await get_user_channel_subscriptions(user_id)
        
        if not category_subs or not channel_subs:
            await loading_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=get_main_menu_keyboard())
            return
        
        subscribed_categories = [cat['name'] for cat in category_subs.get('subscribed_categories', [])]
        subscribed_channel_ids = [ch['telegram_id'] for ch in channel_subs.get('subscribed_channels', [])]
        
        if not subscribed_categories or not subscribed_channel_ids:
            await loading_msg.edit_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.", reply_markup=get_main_menu_keyboard())
            return
        
        posts = await get_filtered_posts(subscribed_channel_ids, subscribed_categories, max_posts)
        
        if not posts:
            await loading_msg.edit_text("üì≠ **–î–∞–π–¥–∂–µ—Å—Ç –ø—É—Å—Ç**", parse_mode=ParseMode.MARKDOWN, reply_markup=get_main_menu_keyboard())
            return
        
        digest_text = f"üì∞ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢**\n"
        digest_text += f"üéØ {len(subscribed_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Ä¢ {len(subscribed_channel_ids)} –∫–∞–Ω–∞–ª–æ–≤\n"
        digest_text += f"üìä –ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤\n\n"
        
        posts_by_category = {}
        for post in posts:
            category = post['ai_category']
            if category not in posts_by_category:
                posts_by_category[category] = []
            posts_by_category[category].append(post)
        
        for category, category_posts in posts_by_category.items():
            digest_text += f"**üìÅ {category.upper()}**\n"
            for i, post in enumerate(category_posts, 1):
                digest_text += f"{i}. {post['ai_summary']} <a href='{post['post_url']}'>üîó</a>\n"
            digest_text += "\n"
        
        digest_text += f"‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        await loading_msg.edit_text(digest_text, parse_mode=ParseMode.HTML, reply_markup=get_main_menu_keyboard(), disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await loading_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞.", reply_markup=get_main_menu_keyboard())

async def categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /categories"""
    user_id = update.effective_user.id
    keyboard = await get_categories_keyboard(user_id)
    
    if not keyboard:
        await update.effective_message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=get_main_menu_keyboard())
        return
    
    await update.effective_message.reply_text(
        "üìÅ **–ö–ê–¢–ï–ì–û–†–ò–ò –¢–ï–ú**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω ‚Ä¢ ‚≠ï - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

async def channels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /channels"""
    user_id = update.effective_user.id
    keyboard = await get_channels_keyboard(user_id)
    
    if not keyboard:
        await update.effective_message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã.", reply_markup=get_main_menu_keyboard())
        return
    
    await update.effective_message.reply_text(
        "üì∫ **–ö–ê–ù–ê–õ–´-–ò–°–¢–û–ß–ù–ò–ö–ò**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã:\n‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω ‚Ä¢ ‚≠ï - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

async def subscriptions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /subscriptions"""
    user_id = update.effective_user.id
    
    try:
        category_subs = await get_user_category_subscriptions(user_id)
        channel_subs = await get_user_channel_subscriptions(user_id)
        
        subscribed_categories = []
        if category_subs and 'subscribed_categories' in category_subs:
            subscribed_categories = [cat['name'] for cat in category_subs['subscribed_categories']]
        
        subscribed_channels = []
        if channel_subs and 'subscribed_channels' in channel_subs:
            subscribed_channels = [ch.get('title', ch.get('channel_name', '–ö–∞–Ω–∞–ª')) for ch in channel_subs['subscribed_channels']]
        
        subs_text = f"üéØ **–í–ê–®–ò –ü–û–î–ü–ò–°–ö–ò**\n\n"
        subs_text += f"üìÅ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(subscribed_categories)}):**\n"
        for cat in subscribed_categories:
            subs_text += f"‚úÖ {cat}\n"
        
        subs_text += f"\nüì∫ **–ö–∞–Ω–∞–ª—ã ({len(subscribed_channels)}):**\n"
        for ch in subscribed_channels:
            subs_text += f"‚úÖ {ch}\n"
        
        subs_text += f"\nüí° **–õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:**\n"
        subs_text += f"–î–∞–π–¥–∂–µ—Å—Ç = –ø–æ—Å—Ç—ã –∏–∑ {len(subscribed_channels)} –∫–∞–Ω–∞–ª–æ–≤ –ø–æ {len(subscribed_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
        
        await update.effective_message.reply_text(subs_text, parse_mode=ParseMode.MARKDOWN, reply_markup=get_main_menu_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫.", reply_markup=get_main_menu_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üìñ **–°–ü–†–ê–í–ö–ê**

**üéØ –õ–æ–≥–∏–∫–∞ –¥–≤–æ–π–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:**
–î–∞–π–¥–∂–µ—Å—Ç = (–ø–æ—Å—Ç—ã –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤) ‚à© (–ø–æ—Å—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)

**üì± –ö–æ–º–∞–Ω–¥—ã:**
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/categories - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
/digest - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç
/subscriptions - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–æ–∫
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
"""
    
    await update.effective_message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN, reply_markup=get_main_menu_keyboard())

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
# =============================================================================

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    try:
        if data == "back_menu":
            await query.edit_message_text("üè† **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ**", parse_mode=ParseMode.MARKDOWN, reply_markup=get_main_menu_keyboard())
        
        elif data == "categories":
            keyboard = await get_categories_keyboard(user_id)
            if keyboard:
                await query.edit_message_text("üìÅ **–ö–ê–¢–ï–ì–û–†–ò–ò –¢–ï–ú**", parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)
        
        elif data == "channels":
            keyboard = await get_channels_keyboard(user_id)
            if keyboard:
                await query.edit_message_text("üì∫ **–ö–ê–ù–ê–õ–´-–ò–°–¢–û–ß–ù–ò–ö–ò**", parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)
        
        elif data == "digest":
            temp_update = Update(update_id=0, message=query.message)
            temp_update.effective_message = query.message
            temp_update.effective_user = query.from_user
            await digest_command(temp_update, None)
        
        elif data == "subscriptions":
            temp_update = Update(update_id=0, message=query.message)
            temp_update.effective_message = query.message
            temp_update.effective_user = query.from_user
            await subscriptions_command(temp_update, None)
        
        elif data == "help":
            temp_update = Update(update_id=0, message=query.message)
            temp_update.effective_message = query.message
            temp_update.effective_user = query.from_user
            await help_command(temp_update, None)
        
        elif data == "settings":
            await query.edit_message_text("üîß **–ù–ê–°–¢–†–û–ô–ö–ò**\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_menu")]]))
        
        elif data.startswith("toggle_category_"):
            category_id = int(data.split("_")[-1])
            await toggle_category(query, user_id, category_id)
            
        elif data.startswith("toggle_channel_"):
            channel_id = int(data.split("_")[-1])
            await toggle_channel(query, user_id, channel_id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_keyboard())

async def toggle_category(query, user_id, category_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    try:
        current_subs = await get_user_category_subscriptions(user_id)
        subscribed_ids = []
        
        if current_subs and 'subscribed_categories' in current_subs:
            subscribed_ids = [cat['id'] for cat in current_subs['subscribed_categories']]
        
        if category_id in subscribed_ids:
            subscribed_ids.remove(category_id)
        else:
            subscribed_ids.append(category_id)
        
        result = await update_user_category_subscriptions(user_id, subscribed_ids)
        
        if result:
            keyboard = await get_categories_keyboard(user_id)
            await query.edit_message_reply_markup(reply_markup=keyboard)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_category: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def toggle_channel(query, user_id, channel_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        current_subs = await get_user_channel_subscriptions(user_id)
        subscribed_ids = []
        
        if current_subs and 'subscribed_channels' in current_subs:
            subscribed_ids = [ch['id'] for ch in current_subs['subscribed_channels']]
        
        if channel_id in subscribed_ids:
            subscribed_ids.remove(channel_id)
        else:
            subscribed_ids.append(channel_id)
        
        result = await update_user_channel_subscriptions(user_id, subscribed_ids)
        
        if result:
            keyboard = await get_channels_keyboard(user_id)
            await query.edit_message_reply_markup(reply_markup=keyboard)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_channel: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def setup_bot_commands(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é Telegram"""
    commands = [
        BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("categories", "üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º"),
        BotCommand("channels", "üì∫ –ö–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏"),
        BotCommand("digest", "üì∞ –ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç"),
        BotCommand("subscriptions", "üéØ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
        BotCommand("help", "‚ùì –°–ø—Ä–∞–≤–∫–∞"),
    ]
    
    await application.bot.set_my_commands(commands)
    print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    logger.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

if __name__ == "__main__":
    import platform
    
    print(f"üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É event loop –¥–ª—è Windows  
    if platform.system() == "Windows":
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        print("üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ WindowsProactorEventLoopPolicy")
    
    try:
        print("üîÑ –ó–∞–ø—É—Å–∫ asyncio.run(main())...")
        asyncio.run(main())
        print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except KeyboardInterrupt:
        print("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc() 