#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üöÄ TELEGRAM BOT v3.0 - –ü–û–õ–ù–ê–Ø –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
- –î–≤–æ–π–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ò –∫–∞–Ω–∞–ª—ã  
- Backend API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–±–µ–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è)
- –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–∫–∞–Ω–∞–ª—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
- –£—á–µ—Ç max_posts_per_digest –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
- Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É–¥–æ–±–Ω—ã–º UI
"""

import asyncio
import logging
import aiohttp
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê
# =============================================================================
BOT_TOKEN = "8124620179:AAHNt4-7ZFg-zz0Cr6mJX483jDuNeARpIdE"
BOT_ID = 4  # ID –±–æ—Ç–∞ –≤ Backend API
BACKEND_URL = "http://127.0.0.1:8000"

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# =============================================================================
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# =============================================================================
# BACKEND API –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
# =============================================================================

async def api_request(method, endpoint, data=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Backend API"""
    url = f"{BACKEND_URL}{endpoint}"
    
    try:
        async with aiohttp.ClientSession() as session:
            if method.upper() == "GET":
                async with session.get(url, params=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"API Error {response.status}: {await response.text()}")
                        return None
            
            elif method.upper() == "POST":
                async with session.post(url, json=data) as response:
                    if response.status in [200, 201]:
                        return await response.json()
                    else:
                        logger.error(f"API Error {response.status}: {await response.text()}")
                        return None
            
            elif method.upper() == "DELETE":
                async with session.delete(url) as response:
                    if response.status in [200, 204]:
                        return {"success": True}
                    else:
                        logger.error(f"API Error {response.status}: {await response.text()}")
                        return None
                        
    except Exception as e:
        logger.error(f"API request failed: {e}")
        return None

async def get_bot_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏–∑ Backend API"""
    return await api_request("GET", f"/api/public-bots/{BOT_ID}")

async def get_bot_categories():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞"""
    return await api_request("GET", f"/api/public-bots/{BOT_ID}/categories")

async def get_bot_channels():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞"""
    return await api_request("GET", f"/api/public-bots/{BOT_ID}/channels")

async def get_user_category_subscriptions(telegram_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return await api_request("GET", f"/api/public-bots/{BOT_ID}/users/{telegram_id}/subscriptions")

async def get_user_channel_subscriptions(telegram_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    return await api_request("GET", f"/api/public-bots/{BOT_ID}/users/{telegram_id}/channel-subscriptions")

async def update_user_category_subscriptions(telegram_id, category_ids):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return await api_request("POST", f"/api/public-bots/{BOT_ID}/users/{telegram_id}/subscriptions", 
                           {"category_ids": category_ids})

async def update_user_channel_subscriptions(telegram_id, channel_ids):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    return await api_request("POST", f"/api/public-bots/{BOT_ID}/users/{telegram_id}/channel-subscriptions", 
                           {"channel_ids": channel_ids})

async def get_ai_posts_filtered(subscribed_channel_ids, subscribed_categories, max_posts):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã —Å –¥–≤–æ–π–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π:
    1. –¢–æ–ª—å–∫–æ –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤  
    2. –¢–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            "bot_id": BOT_ID,
            "limit": max_posts * 3,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            "ai_status": "processed",
            "sort_by": "collected_at",
            "sort_order": "desc"
        }
        
        response = await api_request("GET", "/api/posts/cache-with-ai", params)
        
        if not response:
            return []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if isinstance(response, dict):
            posts_data = None
            for key in ['posts', 'data', 'results', 'items']:
                if key in response:
                    posts_data = response[key]
                    break
            
            if posts_data is None:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Å –ø–æ—Å—Ç–∞–º–∏ –≤ –æ—Ç–≤–µ—Ç–µ API. –ö–ª—é—á–∏: {response.keys()}")
                return []
        else:
            posts_data = response

        if not isinstance(posts_data, list):
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {type(posts_data)}")
            return []

        filtered_posts = []
        
        for post in posts_data:
            # –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç –µ—Å–ª–∏ –æ–Ω –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
            if isinstance(post, str):
                try:
                    post = json.loads(post)
                except:
                    continue
            
            if not isinstance(post, dict):
                continue
            
            # 1. –§–ò–õ–¨–¢–† –ü–û –ö–ê–ù–ê–õ–ê–ú: –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            channel_telegram_id = post.get('channel_telegram_id')
            if not channel_telegram_id or channel_telegram_id not in subscribed_channel_ids:
                continue
            
            # 2. –§–ò–õ–¨–¢–† –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú: –ø–æ–ª—É—á–∞–µ–º AI –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å—Ç–∞
            ai_categories = post.get('ai_categories')
            if ai_categories:
                # –ü–∞—Ä—Å–∏–º JSON –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if isinstance(ai_categories, str):
                    try:
                        ai_categories = json.loads(ai_categories)
                    except:
                        continue
                
                # –ò—â–µ–º category –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                post_category = None
                if isinstance(ai_categories, dict):
                    post_category = ai_categories.get('category') or ai_categories.get('categories')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Å—Ç–∞ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if post_category and post_category in subscribed_categories:
                    # –ü–æ–ª—É—á–∞–µ–º AI summary
                    ai_summaries = post.get('ai_summaries', {})
                    if isinstance(ai_summaries, str):
                        try:
                            ai_summaries = json.loads(ai_summaries)
                        except:
                            ai_summaries = {}
                    
                    summary = ai_summaries.get('summary', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
                    channel_username = None
                    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å username –∫–∞–Ω–∞–ª–∞, –Ω–æ –ø–æ–∫–∞ —É–ø—Ä–æ—Å—Ç–∏–º
                    message_id = post.get('telegram_message_id')
                    post_url = f"https://t.me/c/{abs(channel_telegram_id)}/{message_id}" if message_id else "#"
                    
                    filtered_posts.append({
                        'title': (post.get('title') or '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50],
                        'ai_summary': summary,
                        'ai_category': post_category,
                        'post_url': post_url,
                        'channel_telegram_id': channel_telegram_id,
                        'post_date': post.get('post_date')
                    })
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
                    if len(filtered_posts) >= max_posts:
                        break
        
        return filtered_posts
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
        return []

async def ensure_user_subscriptions(telegram_id):
    """
    –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
    (–∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
        bot_categories = await get_bot_categories()
        bot_channels = await get_bot_channels()
        
        if not bot_categories or not bot_channels:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_category_subs = await get_user_category_subscriptions(telegram_id)
        user_channel_subs = await get_user_channel_subscriptions(telegram_id)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫–∞–Ω–∞–ª–æ–≤
        subscribed_category_ids = []
        if user_category_subs and 'subscribed_categories' in user_category_subs:
            subscribed_category_ids = [cat['id'] for cat in user_category_subs['subscribed_categories']]
        
        subscribed_channel_ids = []
        if user_channel_subs and 'subscribed_channels' in user_channel_subs:
            subscribed_channel_ids = [ch['id'] for ch in user_channel_subs['subscribed_channels']]
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫–∞–Ω–∞–ª–æ–≤
        all_category_ids = [cat['id'] for cat in bot_categories]
        all_channel_ids = [ch['id'] for ch in bot_channels]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        needs_category_update = set(subscribed_category_ids) != set(all_category_ids)
        needs_channel_update = set(subscribed_channel_ids) != set(all_channel_ids)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if needs_category_update:
            logger.info(f"–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            await update_user_category_subscriptions(telegram_id, all_category_ids)
        
        if needs_channel_update:
            logger.info(f"–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            await update_user_channel_subscriptions(telegram_id, all_channel_ids)
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        return False

# =============================================================================
# UI –ö–û–ú–ü–û–ù–ï–ù–¢–´
# =============================================================================

def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
            InlineKeyboardButton("üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="channels")
        ],
        [
            InlineKeyboardButton("üéØ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions"),
            InlineKeyboardButton("üì∞ –î–∞–π–¥–∂–µ—Å—Ç", callback_data="digest")
        ],
        [
            InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help"),
            InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def get_categories_keyboard(telegram_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–ø–∏—Å–∫–∏"""
    categories = await get_bot_categories()
    user_subs = await get_user_category_subscriptions(telegram_id)
    
    if not categories:
        return None
    
    subscribed_ids = []
    if user_subs and 'subscribed_categories' in user_subs:
        subscribed_ids = [cat['id'] for cat in user_subs['subscribed_categories']]
    
    keyboard = []
    for cat in categories:
        status = "‚úÖ" if cat['id'] in subscribed_ids else "‚≠ï"
        text = f"{status} {cat['name']}"
        callback_data = f"toggle_category_{cat['id']}"
        keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(keyboard)

async def get_channels_keyboard(telegram_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–ø–∏—Å–∫–∏"""
    channels = await get_bot_channels()
    user_subs = await get_user_channel_subscriptions(telegram_id)
    
    if not channels:
        return None
    
    subscribed_ids = []
    if user_subs and 'subscribed_channels' in user_subs:
        subscribed_ids = [ch['id'] for ch in user_subs['subscribed_channels']]
    
    keyboard = []
    for ch in channels:
        status = "‚úÖ" if ch['id'] in subscribed_ids else "‚≠ï"
        text = f"{status} {ch.get('title', ch.get('channel_name', '–ö–∞–Ω–∞–ª'))}"
        callback_data = f"toggle_channel_{ch['id']}"
        keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(keyboard)

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# =============================================================================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    # –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã
    await ensure_user_subscriptions(user.id)
    
    welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!**

–≠—Ç–æ —É–º–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏.

**üéØ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ **–∫–∞—Ç–µ–≥–æ—Ä–∏–∏** –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ **–∫–∞–Ω–∞–ª—ã** –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤  
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ —Å –ø–æ—Å—Ç–∞–º–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º

**üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
/categories - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏  
/digest - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç
/help - —Å–ø—Ä–∞–≤–∫–∞
"""
    
    await update.message.reply_text(
        welcome_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_menu_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üìñ **–°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£**

**üéØ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞:**
–î–∞–π–¥–∂–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –¥–≤–æ–π–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:
1Ô∏è‚É£ –ë–µ—Ä—É—Ç—Å—è –ø–æ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ –≤–∞—à–∏—Ö **–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤**
2Ô∏è‚É£ –ò–∑ –Ω–∏—Ö –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –ø–æ **–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º**

**üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –∑–∞–ø—É—Å–∫ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/categories - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
/digest - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
/subscriptions - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**üí° –°–æ–≤–µ—Ç:**
–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!
"""
    
    await update.effective_message.reply_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_menu_keyboard()
    )

async def categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /categories"""
    user_id = update.effective_user.id
    keyboard = await get_categories_keyboard(user_id)
    
    if not keyboard:
        await update.effective_message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    await update.effective_message.reply_text(
        "üìÅ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:\n"
        "‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω\n"
        "‚≠ï - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

async def channels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /channels"""
    user_id = update.effective_user.id
    keyboard = await get_channels_keyboard(user_id)
    
    if not keyboard:
        await update.effective_message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    await update.effective_message.reply_text(
        "üì∫ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê–ú–ò**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:\n"
        "‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω\n"
        "‚≠ï - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

async def digest_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /digest"""
    user_id = update.effective_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await update.effective_message.reply_text("üîç –§–æ—Ä–º–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        bot_data = await get_bot_data()
        max_posts = bot_data.get('max_posts_per_digest', 10) if bot_data else 10
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category_subs = await get_user_category_subscriptions(user_id)
        channel_subs = await get_user_channel_subscriptions(user_id)
        
        if not category_subs or not channel_subs:
            await loading_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã
        subscribed_categories = [cat['name'] for cat in category_subs.get('subscribed_categories', [])]
        subscribed_channel_ids = [ch['telegram_id'] for ch in channel_subs.get('subscribed_channels', [])]
        
        if not subscribed_categories or not subscribed_channel_ids:
            await loading_msg.edit_text(
                "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n"
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        posts = await get_ai_posts_filtered(subscribed_channel_ids, subscribed_categories, max_posts)
        
        if not posts:
            await loading_msg.edit_text(
                "üì≠ **–î–∞–π–¥–∂–µ—Å—Ç –ø—É—Å—Ç**\n\n"
                f"–ü–æ –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º ({len(subscribed_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {len(subscribed_channel_ids)} –∫–∞–Ω–∞–ª–æ–≤) "
                "–Ω–æ–≤—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
                "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–∞–Ω–∞–ª–æ–≤\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        digest_text = f"üì∞ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢**\n"
        digest_text += f"üéØ {len(subscribed_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {len(subscribed_channel_ids)} –∫–∞–Ω–∞–ª–æ–≤\n"
        digest_text += f"üìä –ù–∞–π–¥–µ–Ω–æ {len(posts)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        posts_by_category = {}
        for post in posts:
            category = post['ai_category']
            if category not in posts_by_category:
                posts_by_category[category] = []
            posts_by_category[category].append(post)
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, category_posts in posts_by_category.items():
            digest_text += f"**üìÅ {category.upper()}**\n"
            for i, post in enumerate(category_posts, 1):
                digest_text += f"{i}. {post['ai_summary']} <a href='{post['post_url']}'>üîó</a>\n"
            digest_text += "\n"
        
        digest_text += f"‚è∞ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        await loading_msg.edit_text(
            digest_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu_keyboard(),
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await loading_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )

async def subscriptions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /subscriptions"""
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        category_subs = await get_user_category_subscriptions(user_id)
        channel_subs = await get_user_channel_subscriptions(user_id)
        
        text = "üéØ **–ú–û–ò –ü–û–î–ü–ò–°–ö–ò**\n\n"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_subs and category_subs.get('subscribed_categories'):
            text += "üìÅ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
            for cat in category_subs['subscribed_categories']:
                text += f"‚Ä¢ {cat['name']}\n"
        else:
            text += "üìÅ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:** –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫\n"
        
        text += "\n"
        
        # –ö–∞–Ω–∞–ª—ã
        if channel_subs and channel_subs.get('subscribed_channels'):
            text += "üì∫ **–ö–∞–Ω–∞–ª—ã:**\n"
            for ch in channel_subs['subscribed_channels']:
                title = ch.get('title', ch.get('channel_name', '–ö–∞–Ω–∞–ª'))
                text += f"‚Ä¢ {title}\n"
        else:
            text += "üì∫ **–ö–∞–Ω–∞–ª—ã:** –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫\n"
        
        await update.effective_message.reply_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await update.effective_message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK –ó–ê–ü–†–û–°–û–í (–ö–ù–û–ü–ö–ò)
# =============================================================================

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    try:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "back_to_menu":
            await query.edit_message_text(
                "üè† **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_main_menu_keyboard()
            )
        
        elif data == "categories":
            await categories_command_callback(query)
            
        elif data == "channels":
            await channels_command_callback(query)
            
        elif data == "my_subscriptions":
            await subscriptions_command_callback(query)
            
        elif data == "digest":
            await digest_command_callback(query)
            
        elif data == "help":
            await help_command_callback(query)
            
        elif data == "settings":
            await query.edit_message_text(
                "üîß **–ù–ê–°–¢–†–û–ô–ö–ò**\n\n"
                "–í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.\n"
                "–°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
            )
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        elif data.startswith("toggle_category_"):
            category_id = int(data.split("_")[-1])
            await toggle_category_subscription(query, user_id, category_id)
            
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤  
        elif data.startswith("toggle_channel_"):
            channel_id = int(data.split("_")[-1])
            await toggle_channel_subscription(query, user_id, channel_id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )

# Callback-–≤–µ—Ä—Å–∏–∏ –∫–æ–º–∞–Ω–¥
async def categories_command_callback(query):
    """Callback-–≤–µ—Ä—Å–∏—è –∫–æ–º–∞–Ω–¥—ã categories"""
    keyboard = await get_categories_keyboard(query.from_user.id)
    if not keyboard:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    await query.edit_message_text(
        "üìÅ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:\n"
        "‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω\n"
        "‚≠ï - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

async def channels_command_callback(query):
    """Callback-–≤–µ—Ä—Å–∏—è –∫–æ–º–∞–Ω–¥—ã channels"""
    keyboard = await get_channels_keyboard(query.from_user.id)
    if not keyboard:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    await query.edit_message_text(
        "üì∫ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê–ú–ò**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:\n"
        "‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω\n"
        "‚≠ï - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

async def subscriptions_command_callback(query):
    """Callback-–≤–µ—Ä—Å–∏—è –∫–æ–º–∞–Ω–¥—ã subscriptions"""
    user_id = query.from_user.id
    
    try:
        category_subs = await get_user_category_subscriptions(user_id)
        channel_subs = await get_user_channel_subscriptions(user_id)
        
        text = "üéØ **–ú–û–ò –ü–û–î–ü–ò–°–ö–ò**\n\n"
        
        if category_subs and category_subs.get('subscribed_categories'):
            text += "üìÅ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
            for cat in category_subs['subscribed_categories']:
                text += f"‚Ä¢ {cat['name']}\n"
        else:
            text += "üìÅ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:** –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫\n"
        
        text += "\n"
        
        if channel_subs and channel_subs.get('subscribed_channels'):
            text += "üì∫ **–ö–∞–Ω–∞–ª—ã:**\n"
            for ch in channel_subs['subscribed_channels']:
                title = ch.get('title', ch.get('channel_name', '–ö–∞–Ω–∞–ª'))
                text += f"‚Ä¢ {title}\n"
        else:
            text += "üì∫ **–ö–∞–Ω–∞–ª—ã:** –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫\n"
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=get_main_menu_keyboard()
        )

async def digest_command_callback(query):
    """Callback-–≤–µ—Ä—Å–∏—è –∫–æ–º–∞–Ω–¥—ã digest"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Update –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    temp_update = Update(
        update_id=0,
        message=query.message,
        callback_query=query
    )
    temp_update.effective_message = query.message
    temp_update.effective_user = query.from_user
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await digest_command(temp_update, None)

async def help_command_callback(query):
    """Callback-–≤–µ—Ä—Å–∏—è –∫–æ–º–∞–Ω–¥—ã help"""
    help_text = """
üìñ **–°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£**

**üéØ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞:**
–î–∞–π–¥–∂–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –¥–≤–æ–π–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:
1Ô∏è‚É£ –ë–µ—Ä—É—Ç—Å—è –ø–æ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ –≤–∞—à–∏—Ö **–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤**
2Ô∏è‚É£ –ò–∑ –Ω–∏—Ö –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –ø–æ **–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º**

**üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –∑–∞–ø—É—Å–∫ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/categories - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏  
/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
/digest - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
/subscriptions - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**üí° –°–æ–≤–µ—Ç:**
–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!
"""
    
    await query.edit_message_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
    )

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –ü–û–î–ü–ò–°–û–ö
# =============================================================================

async def toggle_category_subscription(query, user_id, category_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        current_subs = await get_user_category_subscriptions(user_id)
        subscribed_ids = []
        
        if current_subs and 'subscribed_categories' in current_subs:
            subscribed_ids = [cat['id'] for cat in current_subs['subscribed_categories']]
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if category_id in subscribed_ids:
            subscribed_ids.remove(category_id)
        else:
            subscribed_ids.append(category_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        result = await update_user_category_subscriptions(user_id, subscribed_ids)
        
        if result:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = await get_categories_keyboard(user_id)
            await query.edit_message_reply_markup(reply_markup=keyboard)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def toggle_channel_subscription(query, user_id, channel_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        current_subs = await get_user_channel_subscriptions(user_id)
        subscribed_ids = []
        
        if current_subs and 'subscribed_channels' in current_subs:
            subscribed_ids = [ch['id'] for ch in current_subs['subscribed_channels']]
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if channel_id in subscribed_ids:
            subscribed_ids.remove(channel_id)
        else:
            subscribed_ids.append(channel_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        result = await update_user_channel_subscriptions(user_id, subscribed_ids)
        
        if result:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = await get_channels_keyboard(user_id)
            await query.edit_message_reply_markup(reply_markup=keyboard)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ê–ù–î –ë–û–¢–ê
# =============================================================================

async def setup_bot_commands(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é"""
    commands = [
        BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("categories", "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"),
        BotCommand("channels", "üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"),
        BotCommand("digest", "üì∞ –ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç"),
        BotCommand("subscriptions", "üéØ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
        BotCommand("help", "‚ùì –°–ø—Ä–∞–≤–∫–∞"),
    ]
    
    await application.bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

# =============================================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =============================================================================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Bot v3.0 - –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Backend API
    bot_data = await get_bot_data()
    if not bot_data:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Backend API")
        return
    
    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Backend API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç: {bot_data.get('name')}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    await setup_bot_commands(application)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("categories", categories_command))
    application.add_handler(CommandHandler("channels", channels_command))
    application.add_handler(CommandHandler("digest", digest_command))
    application.add_handler(CommandHandler("subscriptions", subscriptions_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def unknown_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏–ª–∏ /help",
            reply_markup=get_main_menu_keyboard()
        )
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    asyncio.run(main()) 