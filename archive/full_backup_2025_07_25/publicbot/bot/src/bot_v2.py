#!/usr/bin/env python3
"""
MorningStar Bot v2 - –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å AI –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç endpoint /api/posts/cache-with-ai –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
"""

import os
import logging
import aiohttp
import asyncio
import json
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PUBLIC_BOT_TOKEN = os.getenv('PUBLIC_BOT_TOKEN')
PUBLIC_BOT_ID = int(os.getenv('PUBLIC_BOT_ID', '4'))  # üöÄ ID –±–æ—Ç–∞ –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç–∏
ADMIN_ID = int(os.getenv('ADMIN_TELEGRAM_ID') or os.getenv('ADMIN_CHAT_ID', '0'))
BACKEND_URL = os.getenv('BACKEND_URL', 'http://127.0.0.1:8000')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
if not PUBLIC_BOT_TOKEN:
    logger.error("PUBLIC_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

if not PUBLIC_BOT_ID:
    logger.error("PUBLIC_BOT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–ª—è bot_id={PUBLIC_BOT_ID}")


async def check_backend_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Backend API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/health", timeout=5) as response:
                if response.status == 200:
                    return "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"
                else:
                    return "üü° –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Backend: {e}")
        return "üî¥ –û—à–∏–±–∫–∞"


async def get_system_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/stats", timeout=5) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None


async def create_or_update_user(telegram_user):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Backend API"""
    try:
        user_data = {
            "telegram_id": telegram_user.id,
            "username": telegram_user.username,
            "first_name": telegram_user.first_name,
            "last_name": telegram_user.last_name,
            "language_code": telegram_user.language_code or "ru",
            "is_active": True
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{BACKEND_URL}/api/users", json=user_data, timeout=5) as response:
                if response.status in [200, 201]:
                    return await response.json()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None


async def get_user_subscriptions(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        # üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º bot_id –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        url = f"{BACKEND_URL}/api/users/{telegram_id}/subscriptions?bot_id={PUBLIC_BOT_ID}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=5) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 404:
                    return []  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        return None


async def update_user_subscriptions(telegram_id, category_ids):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        # üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º bot_id –≤ payload –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        subscription_data = {
            "category_ids": category_ids,
            "bot_id": PUBLIC_BOT_ID
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{BACKEND_URL}/api/users/{telegram_id}/subscriptions", 
                json=subscription_data, 
                timeout=5
            ) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        return None


async def get_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/categories?active_only=true", timeout=5) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return None


async def get_bot_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/public-bots/{PUBLIC_BOT_ID}/categories", timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                    categories = []
                    for cat in data:
                        if cat.get('is_active', True) and cat.get('category_name'):
                            categories.append({
                                'id': cat.get('category_id', cat.get('id')),
                                'name': cat.get('category_name'),
                                'description': cat.get('description', ''),
                                'emoji': 'üìù'  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π emoji
                            })
                    return categories
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–æ—Ç–∞: {e}")
        return None


async def get_bot_posts_with_ai(limit=50):
    """
    üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–π endpoint /api/posts/cache-with-ai
    """
    try:
        params = {
            'bot_id': PUBLIC_BOT_ID,  # üöÄ –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            'ai_status': 'processed',  # –¢–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ AI –ø–æ—Å—Ç–æ–≤
            'limit': limit,
            'sort_by': 'post_date',
            'sort_order': 'desc'
        }
        
        query_string = '&'.join([f"{k}={v}" for k, v in params.items()])
        url = f"{BACKEND_URL}/api/posts/cache-with-ai?{query_string}"
        
        logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º AI –ø–æ—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}: {url}")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    posts = data.get('posts', [])
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}")
                    return posts
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –ø–æ—Å—Ç–æ–≤: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API AI –ø–æ—Å—Ç–æ–≤: {e}")
        return None


async def filter_posts_by_subscriptions(posts, subscribed_categories):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        posts: –°–ø–∏—Å–æ–∫ AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ /api/posts/cache-with-ai
        subscribed_categories: –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    """
    if not posts or not subscribed_categories:
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    subscribed_names = {cat.get('name', '').lower() for cat in subscribed_categories}
    
    if not subscribed_names:
        return None
    
    filtered_posts = []
    
    logger.info(f"üéØ –§–∏–ª—å—Ç—Ä—É–µ–º {len(posts)} –ø–æ—Å—Ç–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º: {subscribed_names}")
    
    for post in posts:
        # üöÄ –ù–û–í–û–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º ai_category –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–ª–µ–π
        ai_category = post.get('ai_category', '')
        
        if not ai_category or ai_category.lower() in ['null', 'none', '', '–Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ']:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        ai_category_lower = str(ai_category).lower()
        matched = False
        
        for subscribed_name in subscribed_names:
            if subscribed_name in ai_category_lower or ai_category_lower in subscribed_name:
                matched = True
                break
        
        if matched:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
            enhanced_post = {
                'id': post.get('id'),
                'title': post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
                'content': post.get('content', ''),
                'date': post.get('post_date'),
                'url': f"https://t.me/c/{abs(post.get('channel_telegram_id', 0))}/{post.get('telegram_message_id', 0)}",
                'views': post.get('views', 0),
                
                # üöÄ –ù–û–í–´–ï AI –ø–æ–ª—è (–º–∞–ø–ø–∏–Ω–≥ —Å–æ —Å—Ç–∞—Ä—ã—Ö –Ω–∞ –Ω–æ–≤—ã–µ)
                'summary': post.get('ai_summary', ''),
                'ai_summary': post.get('ai_summary', ''),
                'category': ai_category,
                'ai_category': ai_category,
                'importance': post.get('ai_importance', 0),
                'ai_importance': post.get('ai_importance', 0),
                'urgency': post.get('ai_urgency', 0),
                'ai_urgency': post.get('ai_urgency', 0),
                'significance': post.get('ai_significance', 0),
                'ai_significance': post.get('ai_significance', 0),
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
                'channel_telegram_id': post.get('channel_telegram_id'),
                'telegram_message_id': post.get('telegram_message_id'),
                'collected_at': post.get('collected_at'),
                'ai_processed_at': post.get('ai_processed_at'),
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                'filtering_method': 'multitenant_ai_categorization_v2',
                'bot_id': PUBLIC_BOT_ID
            }
            
            filtered_posts.append(enhanced_post)
    
    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_posts)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
    
    if filtered_posts:
        return {
            'posts': filtered_posts,
            'total_posts': len(posts),
            'filtered_posts': len(filtered_posts),
            'filtering_version': 'v2_multitenant',
            'bot_id': PUBLIC_BOT_ID
        }
    
    return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    await create_or_update_user(user)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"–Ø MorningStar Bot (v2) - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç Telegram –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        f"üöÄ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n"
        f"‚Ä¢ ü§ñ AI-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤\n"
        f"‚Ä¢ üéØ –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å (bot_id: {PUBLIC_BOT_ID})\n"
        f"‚Ä¢ üìä –£–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–≤–∞–∂–Ω–æ—Å—Ç—å, —Å—Ä–æ—á–Ω–æ—Å—Ç—å, –∑–Ω–∞—á–∏–º–æ—Å—Ç—å)\n"
        f"‚Ä¢ üì¨ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/categories - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "/subscribe - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n"
        "/digest - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç\n"
        "/test - –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è AI –ø–æ—Å—Ç–æ–≤\n"
        "/debug - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
    )


async def categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /categories - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    loading_message = await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    categories_data = await get_bot_categories()
    
    if not categories_data:
        await loading_message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    if not categories_data:
        await loading_message.edit_text(
            f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID} –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories_text = f"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞ {PUBLIC_BOT_ID}:\n\n"
    
    for i, category in enumerate(categories_data, 1):
        emoji = category.get('emoji', 'üìù')
        name = category.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        description = category.get('description', '')
        
        categories_text += f"{emoji} <b>{name}</b>\n"
        if description:
            categories_text += f"   <i>{description}</i>\n"
        categories_text += "\n"
    
    categories_text += "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</i>"
    
    await loading_message.edit_text(categories_text, parse_mode='HTML')


async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /subscribe - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    user = update.effective_user
    
    await create_or_update_user(user)
    
    loading_message = await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞ –∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    categories_data, user_subscriptions = await asyncio.gather(
        get_bot_categories(),
        get_user_subscriptions(user.id)
    )
    
    if not categories_data:
        await loading_message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    subscribed_ids = {sub.get('id') for sub in (user_subscriptions or [])}
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = []
    for category in categories_data:
        category_id = category.get('id')
        emoji = category.get('emoji', 'üìù')
        name = category.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        # –î–æ–±–∞–≤–ª—è–µ–º ‚úÖ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
        if category_id in subscribed_ids:
            button_text = f"‚úÖ {emoji} {name}"
        else:
            button_text = f"‚ùå {emoji} {name}"
        
        keyboard.append([InlineKeyboardButton(
            button_text, 
            callback_data=f"toggle_category_{category_id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
    keyboard.append([InlineKeyboardButton(
        "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", 
        callback_data="save_subscriptions"
    )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    subscribed_count = len(user_subscriptions or [])
    message_text = (
        f"üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (Bot {PUBLIC_BOT_ID})\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        f"‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω, ‚ùå - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω\n\n"
        f"–¢–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {subscribed_count}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞—Ç–µ–º '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'"
    )
    
    await loading_message.edit_text(message_text, reply_markup=reply_markup)


async def subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    query = update.callback_query
    user = query.from_user
    data = query.data
    
    await query.answer()  # –£–±–∏—Ä–∞–µ–º "loading" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    
    if data.startswith("toggle_category_"):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_id = int(data.split("_")[-1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ user_data (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        if 'selected_categories' not in context.user_data:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_subscriptions = await get_user_subscriptions(user.id)
            context.user_data['selected_categories'] = {
                sub.get('id') for sub in (user_subscriptions or [])
            }
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_id in context.user_data['selected_categories']:
            context.user_data['selected_categories'].remove(category_id)
        else:
            context.user_data['selected_categories'].add(category_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        categories_data = await get_bot_categories()
        if not categories_data:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            return
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        keyboard = []
        selected_ids = context.user_data['selected_categories']
        
        for category in categories_data:
            cat_id = category.get('id')
            emoji = category.get('emoji', 'üìù')
            name = category.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            if cat_id in selected_ids:
                button_text = f"‚úÖ {emoji} {name}"
            else:
                button_text = f"‚ùå {emoji} {name}"
            
            keyboard.append([InlineKeyboardButton(
                button_text, 
                callback_data=f"toggle_category_{cat_id}"
            )])
        
        keyboard.append([InlineKeyboardButton(
            "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", 
            callback_data="save_subscriptions"
        )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        selected_count = len(selected_ids)
        message_text = (
            f"üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (Bot {PUBLIC_BOT_ID})\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
            f"‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω, ‚ùå - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω\n\n"
            f"–í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {selected_count}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞—Ç–µ–º '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'"
        )
        
        await query.edit_message_text(message_text, reply_markup=reply_markup)
    
    elif data == "save_subscriptions":
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
        selected_categories = context.user_data.get('selected_categories', set())
        category_ids = list(selected_categories)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Backend API
        result = await update_user_subscriptions(user.id, category_ids)
        
        if result:
            success_text = (
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                f"{result.get('message', '')}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
            )
            await query.edit_message_text(success_text)
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('selected_categories', None)


async def digest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /digest - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç"""
    user = update.effective_user
    
    await create_or_update_user(user)
    
    loading_message = await update.message.reply_text(
        f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}..."
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_subscriptions = await get_user_subscriptions(user.id)
    
    if not user_subscriptions:
        await loading_message.edit_text(
            f"üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, "
            "–∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–∞–π–¥–∂–µ—Å—Ç–∞."
        )
        return
    
    # üöÄ –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    bot_posts = await get_bot_posts_with_ai(limit=100)
    
    if not bot_posts:
        await loading_message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å—Ç—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        )
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    filtered_data = await filter_posts_by_subscriptions(bot_posts, user_subscriptions)
    
    if not filtered_data:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∂–¥–∞—Ç—å
        subscribed_names = [sub.get('name') for sub in user_subscriptions]
        categories_text = ", ".join([f"üìù {name}" for name in subscribed_names])
        
        await loading_message.edit_text(
            f"üì≠ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
            f"ü§ñ –ë–æ—Ç: {PUBLIC_BOT_ID}\n"
            f"üéØ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {categories_text}\n"
            f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(bot_posts)}\n\n"
            f"–í –ø–æ—Å–ª–µ–¥–Ω–∏—Ö AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –≤–∞—à–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. "
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ /subscribe."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
    filtered_posts = filtered_data.get('posts', [])
    total_posts = filtered_data.get('total_posts', 0)
    
    digest_text = f"üì∞ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç (Bot {PUBLIC_BOT_ID})\n\n"
    digest_text += f"üìä –ù–∞–π–¥–µ–Ω–æ {len(filtered_posts)} –∏–∑ {total_posts} –ø–æ—Å—Ç–æ–≤\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_posts = {}
    for post in filtered_posts:
        category = post.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        if category not in category_posts:
            category_posts[category] = []
        category_posts[category].append(post)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å—Ç–æ–≤
    sorted_categories = sorted(category_posts.items(), 
                              key=lambda x: len(x[1]), 
                              reverse=True)
    
    posts_added = 0
    max_posts_total = 15
    
    for category_name, posts in sorted_categories:
        if posts_added >= max_posts_total:
            break
            
        digest_text += f"\nüìù <b>{category_name.upper()}</b>\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ
        posts.sort(key=lambda p: (
            p.get('importance', 0) * 3 + 
            p.get('urgency', 0) * 2 + 
            p.get('significance', 0) * 2
        ), reverse=True)
        
        posts_in_category = 0
        max_posts_per_category = 6
        
        for post in posts:
            if posts_added >= max_posts_total or posts_in_category >= max_posts_per_category:
                break
            
            title = post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            summary = post.get('summary', '')
            importance = post.get('importance', 0)
            urgency = post.get('urgency', 0)
            significance = post.get('significance', 0)
            url = post.get('url', '')
            views = post.get('views', 0)
            date = post.get('date', '')
            
            # –î–∞—Ç–∞
            if date:
                try:
                    date_formatted = date.split('T')[0] if 'T' in date else date
                    digest_text += f"üìÖ {date_formatted}\n"
                except:
                    pass
            
            # –†–µ–∑—é–º–µ
            if summary:
                digest_text += f"üí¨ {summary}\n"
            
            # –°—Å—ã–ª–∫–∞ + —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            if url:
                short_title = title[:60] + "..." if len(title) > 60 else title
                digest_text += f"üîó {url}\n<i>{short_title}</i>\n"
            
            # AI –ú–µ—Ç—Ä–∏–∫–∏ + –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
            metrics_parts = []
            if importance > 0:
                metrics_parts.append(f"‚ö° {importance}")
            if urgency > 0:
                metrics_parts.append(f"üö® {urgency}")
            if significance > 0:
                metrics_parts.append(f"üéØ {significance}")
            if views > 0:
                metrics_parts.append(f"üëÅ {views:,}")
            
            if metrics_parts:
                digest_text += f"üìä {' ‚Ä¢ '.join(metrics_parts)}\n"
            
            digest_text += "\n"
            
            posts_added += 1
            posts_in_category += 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∏ –±–æ—Ç–µ
    subscribed_names = [f"üìù {sub.get('name')}" for sub in user_subscriptions]
    digest_text += f"ü§ñ –ë–æ—Ç: {PUBLIC_BOT_ID}\n"
    digest_text += f"üéØ –ü–æ–¥–ø–∏—Å–∫–∏: {', '.join(subscribed_names)}\n\n"
    digest_text += "üí° /subscribe –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(digest_text) > 4000:
        digest_text = digest_text[:3900] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)\n\nüí° /subscribe –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"
    
    await loading_message.edit_text(digest_text, parse_mode='HTML')


async def test_ai_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /test - —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è AI –ø–æ—Å—Ç–æ–≤"""
    loading_message = await update.message.reply_text(
        f"üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–ª—É—á–µ–Ω–∏–µ AI –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}..."
    )
    
    # –ü–æ–ª—É—á–∞–µ–º AI –ø–æ—Å—Ç—ã
    ai_posts = await get_bot_posts_with_ai(limit=10)
    
    if not ai_posts:
        await loading_message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI –ø–æ—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å—Ç—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    test_text = f"ü§ñ –¢–µ—Å—Ç AI –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}\n\n"
    test_text += f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(ai_posts)} –ø–æ—Å—Ç–æ–≤\n\n"
    
    for i, post in enumerate(ai_posts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        ai_category = post.get('ai_category', 'N/A')
        ai_importance = post.get('ai_importance', 0)
        ai_urgency = post.get('ai_urgency', 0)
        ai_significance = post.get('ai_significance', 0)
        channel_id = post.get('channel_telegram_id', 'N/A')
        
        test_text += f"{i}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ai_category}\n"
        test_text += f"   –í–∞–∂–Ω–æ—Å—Ç—å: {ai_importance}, –°—Ä–æ—á–Ω–æ—Å—Ç—å: {ai_urgency}, –ó–Ω–∞—á–∏–º–æ—Å—Ç—å: {ai_significance}\n"
        test_text += f"   –ö–∞–Ω–∞–ª ID: {channel_id}\n\n"
    
    await loading_message.edit_text(test_text)


async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /debug - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    loading_message = await update.message.reply_text("üîç –°–æ–±–∏—Ä–∞—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    categories = await get_bot_categories()
    ai_posts = await get_bot_posts_with_ai(limit=5)
    
    debug_text = f"üîç –û—Ç–ª–∞–¥–∫–∞ –±–æ—Ç–∞ {PUBLIC_BOT_ID}:\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    if categories:
        debug_text += f"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞ ({len(categories)}):\n"
        for cat in categories[:5]:  # –ü–µ—Ä–≤—ã–µ 5
            debug_text += f"   ‚Ä¢ {cat.get('name')} (ID: {cat.get('id')})\n"
        debug_text += "\n"
    else:
        debug_text += "‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±–æ—Ç–∞\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ AI –ø–æ—Å—Ç–∞—Ö
    if ai_posts:
        debug_text += f"ü§ñ AI Posts ({len(ai_posts)}):\n"
        for i, post in enumerate(ai_posts[:3], 1):  # –ü–µ—Ä–≤—ã–µ 3
            debug_text += f"   {i}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post.get('ai_category', 'N/A')}\n"
            debug_text += f"      –í–∞–∂–Ω–æ—Å—Ç—å: {post.get('ai_importance', 0)}\n"
            debug_text += f"      –ö–∞–Ω–∞–ª ID: {post.get('channel_telegram_id', 'N/A')}\n"
        debug_text += "\n"
    else:
        debug_text += "‚ùå –ù–µ—Ç AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    debug_text += f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n"
    debug_text += f"   ‚Ä¢ Bot ID: {PUBLIC_BOT_ID}\n"
    debug_text += f"   ‚Ä¢ Backend: {BACKEND_URL}\n"
    debug_text += f"   ‚Ä¢ Admin ID: {ADMIN_ID}\n"
    
    await loading_message.edit_text(debug_text)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MorningStar Bot v2 –¥–ª—è bot_id={PUBLIC_BOT_ID}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(PUBLIC_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("categories", categories))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("digest", digest))
    application.add_handler(CommandHandler("test", test_ai_posts))
    application.add_handler(CommandHandler("debug", debug))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
    application.add_handler(CallbackQueryHandler(subscription_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è bot_id={PUBLIC_BOT_ID}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main() 