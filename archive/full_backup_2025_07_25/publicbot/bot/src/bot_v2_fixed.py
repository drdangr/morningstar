#!/usr/bin/env python3
"""
ü§ñ MorningStar Bot v2 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–º–∏ endpoints

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ endpoints:
  * GET /api/public-bots/{bot_id}/users/{user_id}/subscriptions
  * POST /api/public-bots/{bot_id}/users/{user_id}/subscriptions
- –ü–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ bot_id
- –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Backend API
"""
import asyncio
import json
import logging
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "http://127.0.0.1:8000"
PUBLIC_BOT_ID = 4
BOT_TOKEN = "8124620179:AAHNt4-7ZFg-zz0Cr6mJX483jDuNeARpIdE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def create_or_update_user(telegram_id, username, first_name, last_name=None):
    """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{BACKEND_URL}/api/users"
            payload = {
                "telegram_id": telegram_id,
                "username": username,
                "first_name": first_name,
                "last_name": last_name,
                "language_code": "ru",
                "is_active": True
            }
            async with session.post(url, json=payload, timeout=10) as response:
                if response.status in [200, 201]:
                    data = await response.json()
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω")
                    return data
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

async def get_user_subscriptions(telegram_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ—Ç–∞ (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ)"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{BACKEND_URL}/api/public-bots/{PUBLIC_BOT_ID}/users/{telegram_id}/subscriptions"
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {len(data)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                    return data
                elif response.status == 404:
                    logger.info(f"üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}")
                    return []
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        return []

async def update_user_subscriptions(telegram_id, category_ids):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ—Ç–∞ (–º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ)"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{BACKEND_URL}/api/public-bots/{PUBLIC_BOT_ID}/users/{telegram_id}/subscriptions"
            payload = {"category_ids": category_ids}
            async with session.post(url, json=payload, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(category_ids)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                    return data
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {response.status}")
                    text = await response.text()
                    logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {text}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        return None

async def get_bot_categories():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{BACKEND_URL}/api/public-bots/{PUBLIC_BOT_ID}/categories"
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∏–º–µ–Ω–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    categories = []
                    for cat in data:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º category_name –µ—Å–ª–∏ name –ø—É—Å—Ç–æ–µ
                        name = cat.get('name') or cat.get('category_name', f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat.get('id')}")
                        categories.append({
                            'id': cat.get('id'),
                            'name': name,
                            'description': cat.get('description', ''),
                            'is_active': cat.get('is_active', True)
                        })
                    return categories
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return []

async def get_ai_posts(limit=10):
    """–ü–æ–ª—É—á–∏—Ç—å AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{BACKEND_URL}/api/posts/cache-with-ai?bot_id={PUBLIC_BOT_ID}&ai_status=processed&limit={limit}"
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API
                    if isinstance(data, dict) and 'posts' in data:
                        posts = data['posts']
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(posts)} AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
                        return posts
                    else:
                        logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ API –æ—Ç–≤–µ—Ç–∞: {data}")
                        return []
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –ø–æ—Å—Ç–æ–≤: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ AI –ø–æ—Å—Ç–æ–≤: {e}")
        return []

async def get_bot_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{BACKEND_URL}/api/public-bots/{PUBLIC_BOT_ID}"
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞: {e}")
        return None

def filter_posts_by_subscriptions(posts, subscribed_categories):
    """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º"""
    if not subscribed_categories:
        return []
    
    filtered_posts = []
    for post in posts:
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ None –∑–Ω–∞—á–µ–Ω–∏–π
        ai_category = str(post.get('ai_category') or '').strip()
        if ai_category:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ AI –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–¥–Ω—É –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            for sub_cat in subscribed_categories:
                cat_name = str(sub_cat.get('name') or '').strip()
                if cat_name and cat_name.lower() in ai_category.lower():
                    filtered_posts.append(post)
                    break
    
    return filtered_posts

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await create_or_update_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"–Ø MorningStar Bot (v2) - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç Telegram –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        f"üöÄ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n"
        f"‚Ä¢ ü§ñ AI-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤\n"
        f"‚Ä¢ üéØ –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å (bot_id: {PUBLIC_BOT_ID})\n"
        f"‚Ä¢ üìä –£–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–≤–∞–∂–Ω–æ—Å—Ç—å, —Å—Ä–æ—á–Ω–æ—Å—Ç—å, –∑–Ω–∞—á–∏–º–æ—Å—Ç—å)\n"
        f"‚Ä¢ üé™ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º\n\n"
        f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ <b>MorningStar Bot v2 - –ö–æ–º–∞–Ω–¥—ã:</b>

üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/categories - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
/subscribe - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
/digest - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç

üîß <b>–û—Ç–ª–∞–¥–∫–∞:</b>
/test - –ü–æ–∫–∞–∑–∞—Ç—å 10 AI –ø–æ—Å—Ç–æ–≤
/debug - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

‚úÖ <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è v2:</b>
‚Ä¢ –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ endpoints Backend API
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î (user_category_subscriptions)
‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫ bot_id –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Backend API
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
"""
    await update.message.reply_text(help_text, parse_mode='HTML')

async def categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = await get_bot_categories()
    
    if not categories:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    text = f"üìÅ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}:</b>\n\n"
    for cat in categories:
        status = "‚úÖ" if cat['is_active'] else "‚ùå"
        text += f"{status} <b>{cat['name']}</b> (ID: {cat['id']})\n"
        if cat['description']:
            text += f"   üìù {cat['description']}\n"
        text += "\n"
    
    text += f"üí° –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}"
    await update.message.reply_text(text, parse_mode='HTML')

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    user_id = update.effective_user.id
    categories = await get_bot_categories()
    
    if not categories:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return
    
    current_subscriptions = await get_user_subscriptions(user_id)
    current_subscription_ids = [sub.get('id') for sub in current_subscriptions]
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    for cat in categories:
        if cat['is_active']:
            is_subscribed = cat['id'] in current_subscription_ids
            emoji = "‚úÖ" if is_subscribed else "‚¨ú"
            text = f"{emoji} {cat['name']}"
            callback_data = f"toggle_{cat['id']}"
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_subscriptions")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}</b>\n\n"
    text += f"üìä –¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {len(current_subscriptions)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:"
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
temp_subscription_changes = {}

async def update_subscription_keyboard(query, user_id):
    """–û–±–Ω–æ–≤–∏—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    categories = await get_bot_categories()
    
    if not categories:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
    if user_id in temp_subscription_changes:
        current_subscription_ids = temp_subscription_changes[user_id]
    else:
        current_subscriptions = await get_user_subscriptions(user_id)
        current_subscription_ids = [sub.get('id') for sub in current_subscriptions]
        temp_subscription_changes[user_id] = current_subscription_ids
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    for cat in categories:
        if cat['is_active']:
            is_subscribed = cat['id'] in current_subscription_ids
            emoji = "‚úÖ" if is_subscribed else "‚¨ú"
            text = f"{emoji} {cat['name']}"
            callback_data = f"toggle_{cat['id']}"
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_subscriptions")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}</b>\n\n"
    text += f"üìä –í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(current_subscription_ids)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:"
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data.startswith("toggle_"):
        category_id = int(data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ë–î
        if user_id not in temp_subscription_changes:
            current_subscriptions = await get_user_subscriptions(user_id)
            temp_subscription_changes[user_id] = [sub.get('id') for sub in current_subscriptions]
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if category_id in temp_subscription_changes[user_id]:
            temp_subscription_changes[user_id].remove(category_id)
        else:
            temp_subscription_changes[user_id].append(category_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await update_subscription_keyboard(query, user_id)
        
    elif data == "save_subscriptions":
        if user_id in temp_subscription_changes:
            category_ids = temp_subscription_changes[user_id]
        else:
            current_subscriptions = await get_user_subscriptions(user_id)
            category_ids = [sub.get('id') for sub in current_subscriptions]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        result = await update_user_subscriptions(user_id, category_ids)
        
        if result:
            await query.edit_message_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_ids)}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
            )
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if user_id in temp_subscription_changes:
                del temp_subscription_changes[user_id]
        else:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫!\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

async def digest_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç"""
    user_id = update.effective_user.id
    subscribed_categories = await get_user_subscriptions(user_id)
    
    if not subscribed_categories:
        await update.message.reply_text(
            f"üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, "
            f"–∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–∞–π–¥–∂–µ—Å—Ç–∞."
        )
        return
    
    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ None –∑–Ω–∞—á–µ–Ω–∏–π
    subscribed_names = [str(cat.get('name') or f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat.get('id')}") for cat in subscribed_categories]
    
    # –ü–æ–ª—É—á–∞–µ–º AI –ø–æ—Å—Ç—ã —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º (—á—Ç–æ–±—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
    posts = await get_ai_posts(limit=50)
    
    if not posts:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
    filtered_posts = filter_posts_by_subscriptions(posts, subscribed_categories)
    
    if not filtered_posts:
        await update.message.reply_text(
            f"üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º.\n\n"
            f"üéØ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {', '.join(subscribed_names)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /subscribe."
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º (–≤–∞–∂–Ω–æ—Å—Ç—å√ó3 + —Å—Ä–æ—á–Ω–æ—Å—Ç—å√ó2 + –∑–Ω–∞—á–∏–º–æ—Å—Ç—å√ó2)
    def calculate_score(post):
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ None –∑–Ω–∞—á–µ–Ω–∏–π
        importance = float(post.get('ai_importance') or 0)
        urgency = float(post.get('ai_urgency') or 0)
        significance = float(post.get('ai_significance') or 0)
        return importance * 3 + urgency * 2 + significance * 2
    
    filtered_posts.sort(key=calculate_score, reverse=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –¥–ª—è –ª–∏–º–∏—Ç–∞ –ø–æ—Å—Ç–æ–≤
    bot_settings = await get_bot_settings()
    max_posts = bot_settings.get('max_posts_per_digest', 10) if bot_settings else 10
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –±–æ—Ç–∞
    filtered_posts = filtered_posts[:max_posts]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    posts_by_category = {}
    for post in filtered_posts:
        category = str(post.get('ai_category') or '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        if category not in posts_by_category:
            posts_by_category[category] = []
        posts_by_category[category].append(post)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
    text = f"üì∞ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç</b>\n"
    text += f"üéØ –ü–æ–¥–ø–∏—Å–∫–∏: {', '.join(subscribed_names)}\n"
    text += f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(filtered_posts)}"
    if max_posts < len(filtered_posts):
        text += f" (–ø–æ–∫–∞–∑–∞–Ω—ã –ª—É—á—à–∏–µ {max_posts})"
    text += f"\n\n"
    
    for category, posts in posts_by_category.items():
        text += f"<b>{category.upper()}</b>\n"
        
        for i, post in enumerate(posts, 1):
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ None –∑–Ω–∞—á–µ–Ω–∏–π
            ai_summary = str(post.get('ai_summary') or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
            media_urls = post.get('media_urls', [])
            if media_urls and isinstance(media_urls, list) and len(media_urls) > 0:
                post_url = media_urls[0]
                text += f"{i}. {ai_summary} <a href='{post_url}'>üîó</a>\n"
            else:
                text += f"{i}. {ai_summary}\n"
        
        text += "\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    posts = await get_ai_posts(limit=10)
    
    if not posts:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã.")
        return
    
    text = f"üß™ <b>–¢–µ—Å—Ç AI –ø–æ—Å—Ç–æ–≤ (bot_id: {PUBLIC_BOT_ID})</b>\n\n"
    text += f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}\n\n"
    
    for i, post in enumerate(posts[:5], 1):
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ None –∑–Ω–∞—á–µ–Ω–∏–π
        ai_category = str(post.get('ai_category') or '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        importance = float(post.get('ai_importance') or 0)
        urgency = float(post.get('ai_urgency') or 0)
        significance = float(post.get('ai_significance') or 0)
        
        text += f"<b>{i}.</b>\n"
        text += f"üè∑Ô∏è {ai_category}\n"
        text += f"üìä {importance:.1f}/{urgency:.1f}/{significance:.1f}\n\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    user_id = update.effective_user.id
    subscriptions = await get_user_subscriptions(user_id)
    bot_settings = await get_bot_settings()
    
    text = f"üîß <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
    text += f"üë§ User ID: {user_id}\n"
    text += f"ü§ñ Bot ID: {PUBLIC_BOT_ID}\n"
    text += f"üîó Backend URL: {BACKEND_URL}\n"
    text += f"üìä –ü–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î: {len(subscriptions)}\n"
    for sub in subscriptions:
        text += f"   - {sub.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {sub.get('id')})\n"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    if bot_settings:
        max_posts = bot_settings.get('max_posts_per_digest', 10)
        text += f"\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n"
        text += f"   - –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ: {max_posts}\n"
        text += f"   - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {bot_settings.get('status', 'unknown')}\n"
        text += f"   - –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {bot_settings.get('channels_count', 0)}\n"
        text += f"   - –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {bot_settings.get('topics_count', 0)}\n"
    
    text += f"\n‚úÖ –†–µ–∂–∏–º: –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ endpoints\n"
    text += f"üéØ Endpoints:\n"
    text += f"   - GET /api/public-bots/{PUBLIC_BOT_ID}/users/{user_id}/subscriptions\n"
    text += f"   - POST /api/public-bots/{PUBLIC_BOT_ID}/users/{user_id}/subscriptions"
    
    await update.message.reply_text(text, parse_mode='HTML')

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("categories", categories_command))
    application.add_handler(CommandHandler("subscribe", subscribe_command))
    application.add_handler(CommandHandler("digest", digest_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("debug", debug_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print(f"üöÄ –ó–∞–ø—É—Å–∫ MorningStar Bot v2 (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    print(f"ü§ñ Bot ID: {PUBLIC_BOT_ID}")
    print(f"üíæ –†–µ–∂–∏–º: –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ endpoints Backend API")
    print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î: user_category_subscriptions")
    
    application.run_polling()

if __name__ == '__main__':
    main() 