#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üöÄ TELEGRAM BOT v3.0 - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø WINDOWS
–î–≤–æ–π–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –∫–∞–Ω–∞–ª—ã ‚à© –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
"""

import logging
import requests
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================
BOT_TOKEN = "8124620179:AAHNt4-7ZFg-zz0Cr6mJX483jDuNeARpIdE"
BOT_ID = 4
BACKEND_URL = "http://127.0.0.1:8000"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# =============================================================================
# –°–ò–ù–•–†–û–ù–ù–´–ï API –§–£–ù–ö–¶–ò–ò (–ë–ï–ó ASYNC)
# =============================================================================

def api_request(method, endpoint, data=None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Backend API"""
    url = f"{BACKEND_URL}{endpoint}"
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, params=data, timeout=10)
        elif method.upper() == "POST":
            response = requests.post(url, json=data, timeout=10)
        else:
            return None
            
        if response.status_code in [200, 201]:
            return response.json()
        else:
            logger.error(f"API Error {response.status_code}: {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"API request failed: {e}")
        return None

def get_bot_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞"""
    return api_request("GET", f"/api/public-bots/{BOT_ID}")

def get_bot_categories():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞"""
    return api_request("GET", f"/api/public-bots/{BOT_ID}/categories")

def get_bot_channels():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞"""
    return api_request("GET", f"/api/public-bots/{BOT_ID}/channels")

def get_user_category_subscriptions(telegram_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return api_request("GET", f"/api/public-bots/{BOT_ID}/users/{telegram_id}/subscriptions")

def get_user_channel_subscriptions(telegram_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    return api_request("GET", f"/api/public-bots/{BOT_ID}/users/{telegram_id}/channel-subscriptions")

def update_user_category_subscriptions(telegram_id, category_ids):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return api_request("POST", f"/api/public-bots/{BOT_ID}/users/{telegram_id}/subscriptions", 
                      {"category_ids": category_ids})

def update_user_channel_subscriptions(telegram_id, channel_ids):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    return api_request("POST", f"/api/public-bots/{BOT_ID}/users/{telegram_id}/channel-subscriptions", 
                      {"channel_ids": channel_ids})

def get_filtered_posts(subscribed_channel_ids, subscribed_categories, max_posts):
    """üéØ –î–í–û–ô–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –∫–∞–Ω–∞–ª—ã ‚à© –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        params = {
            "bot_id": BOT_ID,
            "limit": max_posts * 3,
            "ai_status": "processed",
            "sort_by": "collected_at",
            "sort_order": "desc"
        }
        
        response = api_request("GET", "/api/posts/cache-with-ai", params)
        if not response:
            return []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if isinstance(response, dict):
            posts_data = None
            for key in ['posts', 'data', 'results', 'items']:
                if key in response:
                    posts_data = response[key]
                    break
            if posts_data is None:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Å –ø–æ—Å—Ç–∞–º–∏. –ö–ª—é—á–∏: {response.keys()}")
                return []
        else:
            posts_data = response

        if not isinstance(posts_data, list):
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {type(posts_data)}")
            return []

        filtered_posts = []
        
        for post in posts_data:
            # –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞
            if isinstance(post, str):
                try:
                    post = json.loads(post)
                except:
                    continue
            
            if not isinstance(post, dict):
                continue
            
            # –§–ò–õ–¨–¢–† 1: –ü–æ—Å—Ç –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞?
            channel_telegram_id = post.get('channel_telegram_id')
            if not channel_telegram_id or channel_telegram_id not in subscribed_channel_ids:
                continue
            
            # –§–ò–õ–¨–¢–† 2: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è?
            ai_categories = post.get('ai_categories')
            if ai_categories:
                if isinstance(ai_categories, str):
                    try:
                        ai_categories = json.loads(ai_categories)
                    except:
                        continue
                
                post_category = None
                if isinstance(ai_categories, dict):
                    post_category = ai_categories.get('category') or ai_categories.get('categories')
                
                # –ü–û–°–¢ –ü–†–û–®–ï–õ –û–ë–ê –§–ò–õ–¨–¢–†–ê
                if post_category and post_category in subscribed_categories:
                    ai_summaries = post.get('ai_summaries', {})
                    if isinstance(ai_summaries, str):
                        try:
                            ai_summaries = json.loads(ai_summaries)
                        except:
                            ai_summaries = {}
                    
                    summary = ai_summaries.get('summary', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
                    message_id = post.get('telegram_message_id')
                    post_url = f"https://t.me/c/{abs(channel_telegram_id)}/{message_id}" if message_id else "#"
                    
                    filtered_posts.append({
                        'title': (post.get('title') or '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50],
                        'ai_summary': summary,
                        'ai_category': post_category,
                        'post_url': post_url,
                        'channel_telegram_id': channel_telegram_id,
                        'post_date': post.get('post_date')
                    })
                    
                    if len(filtered_posts) >= max_posts:
                        break
        
        return filtered_posts
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
        return []

def ensure_auto_subscription(telegram_id):
    """–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã"""
    try:
        bot_categories = get_bot_categories()
        bot_channels = get_bot_channels()
        
        if not bot_categories or not bot_channels:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        user_category_subs = get_user_category_subscriptions(telegram_id)
        user_channel_subs = get_user_channel_subscriptions(telegram_id)
        
        # ID –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö
        subscribed_category_ids = []
        if user_category_subs and 'subscribed_categories' in user_category_subs:
            subscribed_category_ids = [cat['id'] for cat in user_category_subs['subscribed_categories']]
        
        subscribed_channel_ids = []
        if user_channel_subs and 'subscribed_channels' in user_channel_subs:
            subscribed_channel_ids = [ch['id'] for ch in user_channel_subs['subscribed_channels']]
        
        # ID –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        all_category_ids = [cat['id'] for cat in bot_categories]
        all_channel_ids = [ch['id'] for ch in bot_channels]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if set(subscribed_category_ids) != set(all_category_ids):
            logger.info(f"–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {telegram_id}")
            update_user_category_subscriptions(telegram_id, all_category_ids)
        
        if set(subscribed_channel_ids) != set(all_channel_ids):
            logger.info(f"–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è {telegram_id}")
            update_user_channel_subscriptions(telegram_id, all_channel_ids)
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# =============================================================================
# UI –ö–û–ú–ü–û–ù–ï–ù–¢–´
# =============================================================================

def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
            InlineKeyboardButton("üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="channels")
        ],
        [
            InlineKeyboardButton("üéØ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions"),
            InlineKeyboardButton("üì∞ –î–∞–π–¥–∂–µ—Å—Ç", callback_data="digest")
        ],
        [
            InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help"),
            InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_categories_keyboard(telegram_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    categories = get_bot_categories()
    user_subs = get_user_category_subscriptions(telegram_id)
    
    if not categories:
        return None
    
    subscribed_ids = []
    if user_subs and 'subscribed_categories' in user_subs:
        subscribed_ids = [cat['id'] for cat in user_subs['subscribed_categories']]
    
    keyboard = []
    for cat in categories:
        status = "‚úÖ" if cat['id'] in subscribed_ids else "‚≠ï"
        text = f"{status} {cat['name']}"
        callback_data = f"toggle_category_{cat['id']}"
        keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_channels_keyboard(telegram_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    channels = get_bot_channels()
    user_subs = get_user_channel_subscriptions(telegram_id)
    
    if not channels:
        return None
    
    subscribed_ids = []
    if user_subs and 'subscribed_channels' in user_subs:
        subscribed_ids = [ch['id'] for ch in user_subs['subscribed_channels']]
    
    keyboard = []
    for ch in channels:
        status = "‚úÖ" if ch['id'] in subscribed_ids else "‚≠ï"
        title = ch.get('title', ch.get('channel_name', '–ö–∞–Ω–∞–ª'))
        text = f"{status} {title}"
        callback_data = f"toggle_channel_{ch['id']}"
        keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_menu")])
    return InlineKeyboardMarkup(keyboard)

# =============================================================================
# –ö–û–ú–ê–ù–î–´
# =============================================================================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    # –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞
    ensure_auto_subscription(user.id)
    
    welcome_text = f"""
ü§ñ **–ü—Ä–∏–≤–µ—Ç, {user.first_name}!**

–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã —Å —É–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π.

**üéØ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–≤–æ–π–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:**
1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ **–∫–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏**
2Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ **–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º**
3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ—Ç–µ –ø–æ—Å—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º

**üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:**
/categories - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º
/channels - –∫–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏
/digest - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
"""
    
    await update.message.reply_text(
        welcome_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_menu_keyboard()
    )

async def digest_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /digest"""
    user_id = update.effective_user.id
    
    loading_msg = await update.effective_message.reply_text("üîç –§–æ—Ä–º–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        bot_data = get_bot_data()
        max_posts = bot_data.get('max_posts_per_digest', 10) if bot_data else 10
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        category_subs = get_user_category_subscriptions(user_id)
        channel_subs = get_user_channel_subscriptions(user_id)
        
        if not category_subs or not channel_subs:
            await loading_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        subscribed_categories = [cat['name'] for cat in category_subs.get('subscribed_categories', [])]
        subscribed_channel_ids = [ch['telegram_id'] for ch in channel_subs.get('subscribed_channels', [])]
        
        if not subscribed_categories or not subscribed_channel_ids:
            await loading_msg.edit_text(
                "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n"
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –î–í–û–ô–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø
        posts = get_filtered_posts(subscribed_channel_ids, subscribed_categories, max_posts)
        
        if not posts:
            await loading_msg.edit_text(
                "üì≠ **–î–∞–π–¥–∂–µ—Å—Ç –ø—É—Å—Ç**\n\n"
                f"–ü–æ –ø–æ–¥–ø–∏—Å–∫–∞–º ({len(subscribed_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {len(subscribed_channel_ids)} –∫–∞–Ω–∞–ª–æ–≤) "
                "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
        digest_text = f"üì∞ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢**\n"
        digest_text += f"üéØ {len(subscribed_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Ä¢ {len(subscribed_channel_ids)} –∫–∞–Ω–∞–ª–æ–≤\n"
        digest_text += f"üìä –ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        posts_by_category = {}
        for post in posts:
            category = post['ai_category']
            if category not in posts_by_category:
                posts_by_category[category] = []
            posts_by_category[category].append(post)
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, category_posts in posts_by_category.items():
            digest_text += f"**üìÅ {category.upper()}**\n"
            for i, post in enumerate(category_posts, 1):
                digest_text += f"{i}. {post['ai_summary']} <a href='{post['post_url']}'>üîó</a>\n"
            digest_text += "\n"
        
        digest_text += f"‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        await loading_msg.edit_text(
            digest_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu_keyboard(),
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await loading_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞.",
            reply_markup=get_main_menu_keyboard()
        )

async def categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /categories"""
    user_id = update.effective_user.id
    keyboard = get_categories_keyboard(user_id)
    
    if not keyboard:
        await update.effective_message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    await update.effective_message.reply_text(
        "üìÅ **–ö–ê–¢–ï–ì–û–†–ò–ò –¢–ï–ú**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:\n"
        "‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω ‚Ä¢ ‚≠ï - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

async def channels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /channels"""
    user_id = update.effective_user.id
    keyboard = get_channels_keyboard(user_id)
    
    if not keyboard:
        await update.effective_message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    await update.effective_message.reply_text(
        "üì∫ **–ö–ê–ù–ê–õ–´-–ò–°–¢–û–ß–ù–ò–ö–ò**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –Ω–æ–≤–æ—Å—Ç–µ–π:\n"
        "‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω ‚Ä¢ ‚≠ï - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üìñ **–°–ü–†–ê–í–ö–ê**

**üéØ –õ–æ–≥–∏–∫–∞ –¥–≤–æ–π–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:**
–î–∞–π–¥–∂–µ—Å—Ç = (–ø–æ—Å—Ç—ã –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤) ‚à© (–ø–æ—Å—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)

1Ô∏è‚É£ **–ö–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏** - –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å –ø–æ—Å—Ç—ã
2Ô∏è‚É£ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º** - –∫–∞–∫–∏–µ —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã
3Ô∏è‚É£ **–†–µ–∑—É–ª—å—Ç–∞—Ç** - –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: –ø–æ—Å—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º

**üì± –ö–æ–º–∞–Ω–¥—ã:**
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/categories - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
/digest - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**üí° –ü—Ä–∏–º–µ—Ä:**
–ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª—ã: CNN, BBC
–ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ù–∞—É–∫–∞
–†–µ–∑—É–ª—å—Ç–∞—Ç: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ –Ω–∞—É—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –∏–∑ CNN –∏ BBC
"""
    
    await update.effective_message.reply_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_menu_keyboard()
    )

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö
# =============================================================================

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    try:
        if data == "back_menu":
            await query.edit_message_text(
                "üè† **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_main_menu_keyboard()
            )
        
        elif data == "categories":
            keyboard = get_categories_keyboard(user_id)
            if keyboard:
                await query.edit_message_text(
                    "üìÅ **–ö–ê–¢–ï–ì–û–†–ò–ò –¢–ï–ú**\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
                    "‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω ‚Ä¢ ‚≠ï - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
        
        elif data == "channels":
            keyboard = get_channels_keyboard(user_id)
            if keyboard:
                await query.edit_message_text(
                    "üì∫ **–ö–ê–ù–ê–õ–´-–ò–°–¢–û–ß–ù–ò–ö–ò**\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã:\n"
                    "‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω ‚Ä¢ ‚≠ï - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
        
        elif data == "digest":
            temp_update = Update(update_id=0, message=query.message)
            temp_update.effective_message = query.message
            temp_update.effective_user = query.from_user
            await digest_command(temp_update, None)
        
        elif data == "help":
            temp_update = Update(update_id=0, message=query.message)
            temp_update.effective_message = query.message
            temp_update.effective_user = query.from_user
            await help_command(temp_update, None)
        
        elif data.startswith("toggle_category_"):
            category_id = int(data.split("_")[-1])
            await toggle_category(query, user_id, category_id)
            
        elif data.startswith("toggle_channel_"):
            channel_id = int(data.split("_")[-1])
            await toggle_channel(query, user_id, channel_id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")

async def toggle_category(query, user_id, category_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    try:
        current_subs = get_user_category_subscriptions(user_id)
        subscribed_ids = []
        
        if current_subs and 'subscribed_categories' in current_subs:
            subscribed_ids = [cat['id'] for cat in current_subs['subscribed_categories']]
        
        if category_id in subscribed_ids:
            subscribed_ids.remove(category_id)
        else:
            subscribed_ids.append(category_id)
        
        result = update_user_category_subscriptions(user_id, subscribed_ids)
        
        if result:
            keyboard = get_categories_keyboard(user_id)
            await query.edit_message_reply_markup(reply_markup=keyboard)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_category: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def toggle_channel(query, user_id, channel_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        current_subs = get_user_channel_subscriptions(user_id)
        subscribed_ids = []
        
        if current_subs and 'subscribed_channels' in current_subs:
            subscribed_ids = [ch['id'] for ch in current_subs['subscribed_channels']]
        
        if channel_id in subscribed_ids:
            subscribed_ids.remove(channel_id)
        else:
            subscribed_ids.append(channel_id)
        
        result = update_user_channel_subscriptions(user_id, subscribed_ids)
        
        if result:
            keyboard = get_channels_keyboard(user_id)
            await query.edit_message_reply_markup(reply_markup=keyboard)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_channel: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# =============================================================================
# –ü–†–û–°–¢–û–ô –ó–ê–ü–£–°–ö
# =============================================================================

def main():
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Bot v3.0 - –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Backend API
    bot_data = get_bot_data()
    if not bot_data:
        logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Backend API")
        return
    
    logger.info(f"‚úÖ Backend API –ø–æ–¥–∫–ª—é—á–µ–Ω. –ë–æ—Ç: {bot_data.get('name')}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("categories", categories_command))
    application.add_handler(CommandHandler("channels", channels_command))
    application.add_handler(CommandHandler("digest", digest_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤!")
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ polling
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc() 