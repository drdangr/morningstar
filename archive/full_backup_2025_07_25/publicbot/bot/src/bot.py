import os
import logging
import aiohttp
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PUBLIC_BOT_TOKEN = os.getenv('PUBLIC_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_TELEGRAM_ID') or os.getenv('ADMIN_CHAT_ID', '0'))
BACKEND_URL = os.getenv('BACKEND_URL', 'http://127.0.0.1:8000')
N8N_URL = os.getenv('N8N_URL', 'http://127.0.0.1:5678')


async def check_backend_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Backend API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/health", timeout=5) as response:
                if response.status == 200:
                    return "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"
                else:
                    return "üü° –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Backend: {e}")
        return "üî¥ –û—à–∏–±–∫–∞"


async def check_n8n_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ N8N"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{N8N_URL}/healthz", timeout=5) as response:
                if response.status == 200:
                    return "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"
                else:
                    return "üü° –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ N8N: {e}")
        return "üî¥ –û—à–∏–±–∫–∞"


async def check_userbot_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Userbot (—á–µ—Ä–µ–∑ Backend API)"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/stats", timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã –≤ –±–∞–∑–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if data.get('total_channels', 0) > 0:
                        return "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"
                    else:
                        return "üü° –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                else:
                    return "üü° –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ Backend: {e}")
        return "üî¥ –û—à–∏–±–∫–∞"


async def get_system_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/stats", timeout=5) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None


async def get_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/categories?active_only=true", timeout=5) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return None


async def create_or_update_user(telegram_user):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Backend API"""
    try:
        user_data = {
            "telegram_id": telegram_user.id,
            "username": telegram_user.username,
            "first_name": telegram_user.first_name,
            "last_name": telegram_user.last_name,
            "language_code": telegram_user.language_code or "ru",
            "is_active": True
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{BACKEND_URL}/api/users", json=user_data, timeout=5) as response:
                if response.status in [200, 201]:
                    return await response.json()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None


async def get_user_subscriptions(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/users/{telegram_id}/subscriptions", timeout=5) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 404:
                    return []  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫
                else:
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        return None


async def update_user_subscriptions(telegram_id, category_ids):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        subscription_data = {"category_ids": category_ids}
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{BACKEND_URL}/api/users/{telegram_id}/subscriptions", 
                json=subscription_data, 
                timeout=5
            ) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        return None


async def get_recent_digests(limit=10):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/digests?limit={limit}", timeout=10) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {e}")
        return None


async def get_digest_data(digest_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_URL}/api/digests/{digest_id}/data", timeout=10) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        return None


async def filter_digest_by_subscriptions(digest_data, subscribed_categories):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ—Å—Ç–æ–≤ v7.3
    
    Args:
        digest_data: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        subscribed_categories: –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    """
    if not digest_data or not subscribed_categories:
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    subscribed_names = {cat.get('name', '').lower() for cat in subscribed_categories}
    
    if not subscribed_names:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤
    if 'channels' not in digest_data or not isinstance(digest_data['channels'], list):
        return None
    
    filtered_posts = []
    relevant_channels_set = set()
    total_posts = 0
    
    # v7.3 –ü–†–û–†–´–í: –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ—Å—Ç–æ–≤, –∞ –Ω–µ –∫–∞–Ω–∞–ª–æ–≤
    for channel in digest_data['channels']:
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
        channel_posts = channel.get('posts', [])
        if isinstance(channel_posts, list):
            total_posts += len(channel_posts)
        
        # v7.3: –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ—Å—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for post in channel_posts:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å—Ç–∞ –æ—Ç AI
            post_category = post.get('post_category', post.get('ai_assigned_category', ''))
            
            # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ AI –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º
            if not post_category or post_category in ['NULL', 'null', '', 'Unknown', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏']:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç - AI –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å—Ç–∞ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            post_category_lower = str(post_category).lower()
            matched_category = None
            
            for subscribed_name in subscribed_names:
                if subscribed_name in post_category_lower or post_category_lower in subscribed_name:
                    matched_category = post_category  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å—Ç–∞
                    break
            
            # –ï—Å–ª–∏ –ø–æ—Å—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –ø–æ —Å–≤–æ–µ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if matched_category:
                relevant_channels_set.add(channel.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∫ –ø–æ—Å—Ç—É
                enhanced_post = post.copy()
                enhanced_post['channel_title'] = channel.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
                enhanced_post['channel_username'] = channel.get('username', '')
                enhanced_post['channel_categories'] = channel.get('categories', [])
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                enhanced_post['importance'] = post.get('ai_importance', 0)
                enhanced_post['urgency'] = post.get('ai_urgency', 0)
                enhanced_post['significance'] = post.get('ai_significance', 0)
                
                # v7.3 –ü–†–û–†–´–í: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–£–Æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å—Ç–∞ –≤–º–µ—Å—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞
                enhanced_post['category'] = matched_category
                enhanced_post['individual_categorization'] = True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
                enhanced_post['original_post_category'] = post_category
                enhanced_post['ai_assigned_category'] = post.get('ai_assigned_category', '')
                enhanced_post['category_is_valid'] = post.get('category_is_valid', False)
                enhanced_post['filtering_method'] = 'strict_ai_categorization_v7.3'  # –ë–µ–∑ fallback
                
                filtered_posts.append(enhanced_post)
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã, —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
    if filtered_posts:
        personal_digest = digest_data.copy()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É summary —Å –ø–æ—Å—Ç–∞–º–∏
        personal_digest['summary'] = {
            'posts': filtered_posts,
            'channels_processed': len(relevant_channels_set),
            'original_posts': total_posts,
            'relevant_posts': len(filtered_posts)
        }
        
        personal_digest['filtered'] = True
        personal_digest['individual_post_categorization'] = True
        personal_digest['original_posts_count'] = total_posts
        personal_digest['filtered_posts_count'] = len(filtered_posts)
        personal_digest['relevant_channels'] = len(relevant_channels_set)
        personal_digest['filtering_version'] = 'v7.3_individual_post_categorization'
        
        return personal_digest
    
    return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    await create_or_update_user(user)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø MorningStar Bot - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç Telegram –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        "–ü–æ–∫–∞ —è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ —Å–∫–æ—Ä–æ —Å–º–æ–≥—É:\n"
        "‚Ä¢ üì∞ –°–æ–±–∏—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ ü§ñ –°–æ–∑–¥–∞–≤–∞—Ç—å —É–º–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ —Å –ø–æ–º–æ—â—å—é AI\n"
        "‚Ä¢ üì¨ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/categories - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "/subscribe - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n"
        "/digest - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç\n"
        "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
    )


async def categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /categories - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Backend API
    categories_data = await get_categories()
    
    if not categories_data:
        await loading_message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    if not categories_data:
        await loading_message.edit_text(
            "üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories_text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
    
    for i, category in enumerate(categories_data, 1):
        emoji = category.get('emoji', 'üìù')
        name = category.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        description = category.get('description', '')
        
        categories_text += f"{emoji} <b>{name}</b>\n"
        if description:
            categories_text += f"   <i>{description}</i>\n"
        categories_text += "\n"
    
    categories_text += "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</i>"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await loading_message.edit_text(categories_text, parse_mode='HTML')


async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /subscribe - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await create_or_update_user(user)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    categories_data, user_subscriptions = await asyncio.gather(
        get_categories(),
        get_user_subscriptions(user.id)
    )
    
    if not categories_data:
        await loading_message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    subscribed_ids = {sub.get('id') for sub in (user_subscriptions or [])}
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = []
    for category in categories_data:
        category_id = category.get('id')
        emoji = category.get('emoji', 'üìù')
        name = category.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        # –î–æ–±–∞–≤–ª—è–µ–º ‚úÖ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
        if category_id in subscribed_ids:
            button_text = f"‚úÖ {emoji} {name}"
        else:
            button_text = f"‚ùå {emoji} {name}"
        
        keyboard.append([InlineKeyboardButton(
            button_text, 
            callback_data=f"toggle_category_{category_id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
    keyboard.append([InlineKeyboardButton(
        "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", 
        callback_data="save_subscriptions"
    )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    subscribed_count = len(user_subscriptions or [])
    message_text = (
        f"üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        f"‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω, ‚ùå - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω\n\n"
        f"–¢–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {subscribed_count}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞—Ç–µ–º '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'"
    )
    
    await loading_message.edit_text(message_text, reply_markup=reply_markup)


async def subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    query = update.callback_query
    user = query.from_user
    data = query.data
    
    await query.answer()  # –£–±–∏—Ä–∞–µ–º "loading" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    
    if data.startswith("toggle_category_"):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_id = int(data.split("_")[-1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ user_data (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        if 'selected_categories' not in context.user_data:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_subscriptions = await get_user_subscriptions(user.id)
            context.user_data['selected_categories'] = {
                sub.get('id') for sub in (user_subscriptions or [])
            }
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_id in context.user_data['selected_categories']:
            context.user_data['selected_categories'].remove(category_id)
        else:
            context.user_data['selected_categories'].add(category_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        categories_data = await get_categories()
        if not categories_data:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            return
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        keyboard = []
        selected_ids = context.user_data['selected_categories']
        
        for category in categories_data:
            cat_id = category.get('id')
            emoji = category.get('emoji', 'üìù')
            name = category.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            if cat_id in selected_ids:
                button_text = f"‚úÖ {emoji} {name}"
            else:
                button_text = f"‚ùå {emoji} {name}"
            
            keyboard.append([InlineKeyboardButton(
                button_text, 
                callback_data=f"toggle_category_{cat_id}"
            )])
        
        keyboard.append([InlineKeyboardButton(
            "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", 
            callback_data="save_subscriptions"
        )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        selected_count = len(selected_ids)
        message_text = (
            f"üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
            f"‚úÖ - –ø–æ–¥–ø–∏—Å–∞–Ω, ‚ùå - –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω\n\n"
            f"–í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {selected_count}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞—Ç–µ–º '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'"
        )
        
        await query.edit_message_text(message_text, reply_markup=reply_markup)
    
    elif data == "save_subscriptions":
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
        selected_categories = context.user_data.get('selected_categories', set())
        category_ids = list(selected_categories)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Backend API
        result = await update_user_subscriptions(user.id, category_ids)
        
        if result:
            success_text = (
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                f"{result.get('message', '')}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
            )
            await query.edit_message_text(success_text)
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('selected_categories', None)


async def digest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /digest - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await create_or_update_user(user)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_subscriptions = await get_user_subscriptions(user.id)
    
    if not user_subscriptions:
        await loading_message.edit_text(
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, "
            "–∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–∞–π–¥–∂–µ—Å—Ç–∞."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã
    recent_digests = await get_recent_digests(5)
    
    if not recent_digests:
        await loading_message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –¥–∞–π–¥–∂–µ—Å—Ç—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        )
        return
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    personal_digest = None
    for digest_summary in recent_digests:
        digest_id = digest_summary.get('digest_id')
        if not digest_id:
            continue
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        digest_data = await get_digest_data(digest_id)
        if not digest_data:
            continue
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        filtered_digest = await filter_digest_by_subscriptions(digest_data, user_subscriptions)
        if filtered_digest:
            personal_digest = filtered_digest
            personal_digest['digest_info'] = digest_summary
            break
    
    if not personal_digest:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∂–¥–∞—Ç—å
        subscribed_names = [sub.get('name') for sub in user_subscriptions]
        categories_text = ", ".join([f"{sub.get('emoji', 'üìù')} {sub.get('name')}" for sub in user_subscriptions])
        
        await loading_message.edit_text(
            f"üì≠ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
            f"–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {categories_text}\n\n"
            f"–í –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. "
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ /subscribe."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
    digest_text = f"üì∞ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–π–¥–∂–µ—Å—Ç–µ
    digest_info = personal_digest.get('digest_info', {})
    created_at = digest_info.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    if 'T' in created_at:
        created_at = created_at.split('T')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
    
    digest_text += f"üóì –°–æ–∑–¥–∞–Ω: {created_at}\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    total_posts = personal_digest.get('original_posts_count', 0)
    filtered_posts = personal_digest.get('filtered_posts_count', 0)
    relevant_channels = personal_digest.get('relevant_channels', 0)
    
    digest_text += f"üìä –ù–∞–π–¥–µ–Ω–æ {filtered_posts} –∏–∑ {total_posts} –ø–æ—Å—Ç–æ–≤ –∏–∑ {relevant_channels} –∫–∞–Ω–∞–ª–æ–≤\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã —Å –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –¢–µ–º–∞ ‚Üí –ö–∞–Ω–∞–ª ‚Üí –ü–æ—Å—Ç—ã
    summary_data = personal_digest.get('summary', {})
    if isinstance(summary_data, dict):
        posts = summary_data.get('posts', [])
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–º–∞–º –∏ –∫–∞–Ω–∞–ª–∞–º
        theme_channel_posts = {}
        for post in posts:
            category = post.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            channel_title = post.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
            
            if category not in theme_channel_posts:
                theme_channel_posts[category] = {}
            if channel_title not in theme_channel_posts[category]:
                theme_channel_posts[category][channel_title] = []
            
            theme_channel_posts[category][channel_title].append(post)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å—Ç–æ–≤
        sorted_themes = sorted(theme_channel_posts.items(), 
                              key=lambda x: sum(len(posts) for posts in x[1].values()), 
                              reverse=True)
        
        posts_added = 0
        max_posts_total = 15
        
        for theme_name, channels in sorted_themes:
            if posts_added >= max_posts_total:
                break
                
            # –ù–∞—Ö–æ–¥–∏–º —ç–º–æ–¥–∑–∏ —Ç–µ–º—ã –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            theme_emoji = "üìù"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            for sub in user_subscriptions:
                if sub.get('name', '').lower() == theme_name.lower():
                    theme_emoji = sub.get('emoji', 'üìù')
                    break
            
            digest_text += f"\n{theme_emoji} <b>{theme_name.upper()}</b>\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å—Ç–æ–≤
            sorted_channels = sorted(channels.items(), 
                                   key=lambda x: len(x[1]), 
                                   reverse=True)
            
            for channel_name, channel_posts in sorted_channels:
                if posts_added >= max_posts_total:
                    break
                    
                digest_text += f"\nüì∫ <b>{channel_name}</b>\n"
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
                channel_posts.sort(key=lambda p: (
                    p.get('importance', 0) * 3 + 
                    p.get('urgency', 0) * 2 + 
                    p.get('significance', 0) * 2
                ), reverse=True)
                
                posts_in_channel = 0
                max_posts_per_channel = 8
                
                for post in channel_posts:
                    if posts_added >= max_posts_total or posts_in_channel >= max_posts_per_channel:
                        break
                    
                    title = post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                    summary = post.get('summary', post.get('ai_summary', ''))
                    importance = post.get('importance', 0)
                    urgency = post.get('urgency', 0)
                    significance = post.get('significance', 0)
                    url = post.get('url', '')
                    views = post.get('views', 0)
                    date = post.get('date', '')
                    
                    # –î–∞—Ç–∞
                    if date:
                        try:
                            date_formatted = date.split('T')[0] if 'T' in date else date
                            digest_text += f"üìÖ {date_formatted}\n"
                        except:
                            pass
                    
                    # –†–µ–∑—é–º–µ
                    if summary:
                        digest_text += f"üí¨ {summary}\n"
                    
                    # –°—Å—ã–ª–∫–∞ + —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                    if url:
                        short_title = title[:80] + "..." if len(title) > 80 else title
                        digest_text += f"üîó {url} <i>{short_title}</i>\n"
                    
                    # –ú–µ—Ç—Ä–∏–∫–∏ + –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
                    metrics_parts = []
                    if importance > 0:
                        metrics_parts.append(f"‚ö° {importance}")
                    if urgency > 0:
                        metrics_parts.append(f"üö® {urgency}")
                    if significance > 0:
                        metrics_parts.append(f"üéØ {significance}")
                    if views > 0:
                        metrics_parts.append(f"üëÅ {views:,}")
                    
                    if metrics_parts:
                        digest_text += f"üìä {' ‚Ä¢ '.join(metrics_parts)}\n"
                    
                    digest_text += "\n"
                    
                    posts_added += 1
                    posts_in_channel += 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    subscribed_names = [f"{sub.get('emoji', 'üìù')} {sub.get('name')}" for sub in user_subscriptions]
    digest_text += f"üéØ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {', '.join(subscribed_names)}\n\n"
    digest_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(digest_text) > 4000:
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–ª–∏–Ω—ã
        digest_text = digest_text[:3900] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"
    
    await loading_message.edit_text(digest_text, parse_mode='HTML')


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    status_message = await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    backend_status, n8n_status, userbot_status = await asyncio.gather(
        check_backend_status(),
        check_n8n_status(),
        check_userbot_status()
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_system_stats()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    status_text = "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n"
    status_text += f"‚Ä¢ Backend API: {backend_status}\n"
    status_text += f"‚Ä¢ N8N Workflow: {n8n_status}\n"
    status_text += f"‚Ä¢ Userbot: {userbot_status}\n\n"
    
    if stats:
        status_text += "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        status_text += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {stats.get('total_channels', 0)}\n"
        status_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats.get('active_channels', 0)}\n"
        status_text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {stats.get('total_categories', 0)}\n"
        status_text += f"‚Ä¢ –î–∞–π–¥–∂–µ—Å—Ç–æ–≤: {stats.get('total_digests', 0)}\n"
    else:
        status_text += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await status_message.edit_text(status_text)


async def debug_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /debug_filter - –æ—Ç–ª–∞–¥–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    user = update.effective_user
    await create_or_update_user(user)
    
    loading_message = await update.message.reply_text("üîç –û—Ç–ª–∞–¥–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–∞–π–¥–∂–µ—Å—Ç
    user_subscriptions = await get_user_subscriptions(user.id)
    recent_digests = await get_recent_digests(1)
    
    if not recent_digests:
        await loading_message.edit_text("‚ùå –ù–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤")
        return
    
    digest_data = await get_digest_data(recent_digests[0].get('digest_id'))
    if not digest_data:
        await loading_message.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–∞")
        return
    
    debug_text = "üîç –û—Ç–ª–∞–¥–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    subscribed_names = {cat.get('name', '').lower() for cat in (user_subscriptions or [])}
    debug_text += f"üéØ –ü–æ–¥–ø–∏—Å–∫–∏: {subscribed_names}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏ –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for channel in digest_data.get('channels', []):
        channel_title = channel.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        channel_categories = channel.get('categories', [])
        
        debug_text += f"üì∫ {channel_title}:\n"
        debug_text += f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {channel_categories}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        channel_relevant = False
        for cat in channel_categories:
            if isinstance(cat, dict):
                cat_name = cat.get('name', '').lower()
            else:
                cat_name = str(cat).lower()
            
            debug_text += f"   üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: '{cat_name}'\n"
            
            for sub_name in subscribed_names:
                match = sub_name in cat_name or cat_name in sub_name
                debug_text += f"      vs '{sub_name}': {'‚úÖ MATCH' if match else '‚ùå NO'}\n"
                if match:
                    channel_relevant = True
        
        debug_text += f"   üèÅ –†–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω: {channel_relevant}\n\n"
    
    await loading_message.edit_text(debug_text)


async def debug_digest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /debug_digest - –æ—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–π–¥–∂–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    loading_message = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
    recent_digests = await get_recent_digests(1)
    
    if not recent_digests:
        await loading_message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤")
        return
    
    digest_summary = recent_digests[0]
    digest_id = digest_summary.get('digest_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    digest_data = await get_digest_data(digest_id)
    
    if not digest_data:
        await loading_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    debug_text = f"üîç –û—Ç–ª–∞–¥–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ {digest_id}\n\n"
    debug_text += f"üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏: {list(digest_data.keys())}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    for key, value in digest_data.items():
        if key in ['id', 'created_at', 'processed_at']:
            debug_text += f"üìù {key}: {value}\n"
        elif key == 'total_posts':
            debug_text += f"üìä {key}: {value}\n"
        elif key == 'channels' and isinstance(value, list):
            debug_text += f"üì∫ {key}: {len(value)} –∫–∞–Ω–∞–ª–æ–≤\n"
            if len(value) > 0:
                first_channel = value[0]
                debug_text += f"   –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {list(first_channel.keys())}\n"
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö
                if 'posts' in first_channel:
                    posts = first_channel['posts']
                    debug_text += f"   üì∞ –ü–æ—Å—Ç–æ–≤ –≤ –ø–µ—Ä–≤–æ–º –∫–∞–Ω–∞–ª–µ: {len(posts) if isinstance(posts, list) else '–Ω–µ —Å–ø–∏—Å–æ–∫'}\n"
        elif key == 'summary' and isinstance(value, dict):
            debug_text += f"üìù {key}: {list(value.keys())}\n"
        else:
            debug_text += f"üîç {key}: {type(value)} - {str(value)[:100]}...\n"
    
    debug_text += "\n"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã —Å –ø–æ—Å—Ç–∞–º–∏, –ø–æ–∫–∞–∂–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Å—Ç–æ–≤
    if 'channels' in digest_data and isinstance(digest_data['channels'], list):
        for i, channel in enumerate(digest_data['channels'][:1]):  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
            if 'posts' in channel and isinstance(channel['posts'], list) and len(channel['posts']) > 0:
                first_post = channel['posts'][0]
                debug_text += f"üì∞ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {i+1}:\n"
                debug_text += f"   –ö–ª—é—á–∏: {list(first_post.keys())}\n"
                
                # –ò—â–µ–º –ø–æ–ª—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                for key, value in first_post.items():
                    if any(cat_word in key.lower() for cat_word in ['category', 'topic', 'theme', 'subject']):
                        debug_text += f"   üè∑ {key}: {value}\n"
                break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if len(debug_text) > 4000:
        debug_text = debug_text[:3900] + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
    
    await loading_message.edit_text(debug_text)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if not PUBLIC_BOT_TOKEN:
        logger.error("PUBLIC_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    application = Application.builder().token(PUBLIC_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("categories", categories))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("digest", digest))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("debug_digest", debug_digest))
    application.add_handler(CommandHandler("debug_filter", debug_filter))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
    application.add_handler(CallbackQueryHandler(subscription_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()