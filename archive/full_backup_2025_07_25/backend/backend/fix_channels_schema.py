#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã channels
"""

from main import engine, SessionLocal
from sqlalchemy import text

def fix_channels_schema():
    """–ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã channels"""
    
    print("üîß –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã channels...")
    
    try:
        db = SessionLocal()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        result = db.execute(text("""
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'channels' 
            ORDER BY ordinal_position
        """))
        
        current_columns = {row[0]: row for row in result}
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(current_columns)}")
        for col_name in current_columns.keys():
            print(f"  - {col_name}")
        
        # –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –º–æ–¥–µ–ª–∏ SQLAlchemy
        required_columns = {
            'id': 'INTEGER NOT NULL',
            'telegram_id': 'BIGINT NOT NULL',
            'username': 'VARCHAR',
            'title': 'VARCHAR NOT NULL',  # –≠—Ç–æ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!
            'description': 'TEXT',
            'is_active': 'BOOLEAN DEFAULT TRUE',
            'last_parsed': 'TIMESTAMP',
            'error_count': 'INTEGER DEFAULT 0',
            'created_at': 'TIMESTAMP DEFAULT NOW()',
            'updated_at': 'TIMESTAMP DEFAULT NOW()'
        }
        
        print(f"\nüéØ –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–ª–æ–Ω–æ–∫: {len(required_columns)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        migrations = []
        
        if 'title' not in current_columns:
            migrations.append("ADD COLUMN title VARCHAR NOT NULL DEFAULT 'Unknown Channel'")
            
        if 'description' not in current_columns:
            migrations.append("ADD COLUMN description TEXT")
            
        if 'last_parsed' not in current_columns:
            migrations.append("ADD COLUMN last_parsed TIMESTAMP")
            
        if 'error_count' not in current_columns:
            migrations.append("ADD COLUMN error_count INTEGER DEFAULT 0")
        
        # –ï—Å–ª–∏ channel_name —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –≤ title
        if 'channel_name' in current_columns and 'title' not in current_columns:
            migrations.append("RENAME COLUMN channel_name TO title")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        if migrations:
            print(f"\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º {len(migrations)} –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
            
            for i, migration in enumerate(migrations, 1):
                print(f"  {i}. {migration}")
                try:
                    db.execute(text(f"ALTER TABLE channels {migration}"))
                    db.commit()
                    print(f"     ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
                except Exception as e:
                    print(f"     ‚ùå –û—à–∏–±–∫–∞: {e}")
                    db.rollback()
        else:
            print("\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        result = db.execute(text("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'channels' 
            ORDER BY ordinal_position
        """))
        
        print(f"\nüìã –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã 'channels':")
        for row in result:
            column_name, data_type, is_nullable, default = row
            nullable_str = '(nullable)' if is_nullable == 'YES' else '(not null)'
            default_str = f' DEFAULT {default}' if default else ''
            print(f"  - {column_name}: {data_type} {nullable_str}{default_str}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        result = db.execute(text("SELECT COUNT(*) FROM channels"))
        count = result.scalar()
        print(f"\nüìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {count}")
        
        if count > 0:
            result = db.execute(text("SELECT id, telegram_id, title, username FROM channels LIMIT 3"))
            print("üìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
            for row in result:
                print(f"  - ID: {row[0]}, Telegram: {row[1]}, Title: {row[2]}, Username: {row[3]}")
        
        db.close()
        
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    fix_channels_schema() 