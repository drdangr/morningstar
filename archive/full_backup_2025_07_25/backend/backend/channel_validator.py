"""
–ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
"""
import asyncio
import re
from telethon import TelegramClient
from telethon.errors import UsernameNotOccupiedError, UsernameInvalidError
import os
from dotenv import load_dotenv

load_dotenv()

# Telegram API –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
API_ID = int(os.getenv('API_ID', 0))
API_HASH = os.getenv('API_HASH', '')
PHONE = os.getenv('PHONE', '')

class ChannelValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.client = None
    
    async def __aenter__(self):
        """Async context manager entry"""
        self.client = TelegramClient('../userbot/session/morningstar', API_ID, API_HASH)
        await self.client.start()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.client:
            await self.client.disconnect()
    
    def parse_channel_input(self, user_input: str) -> dict:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        - @username
        - username  
        - https://t.me/username
        - t.me/username
        - 1001234567890 (telegram_id)
        """
        user_input = user_input.strip()
        result = {
            'input_type': 'unknown',
            'identifier': None,
            'username': None,
            'telegram_id': None
        }
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º telegram_id (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–∞ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ 10 —Å–∏–º–≤–æ–ª–æ–≤)
        if user_input.isdigit() and len(user_input) >= 10:
            result['input_type'] = 'telegram_id'
            result['telegram_id'] = int(user_input)
            result['identifier'] = int(user_input)  # –î–ª—è ID –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º @
            return result
        
        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        tme_patterns = [
            r'https?://t\.me/([a-zA-Z0-9_]+)',
            r't\.me/([a-zA-Z0-9_]+)',
            r'@([a-zA-Z0-9_]+)',
            r'^([a-zA-Z0-9_]+)$'
        ]
        
        for pattern in tme_patterns:
            match = re.match(pattern, user_input)
            if match:
                username = match.group(1)
                result['input_type'] = 'username'
                result['username'] = f"@{username}"
                result['identifier'] = f"@{username}"  # –î–ª—è username –¥–æ–±–∞–≤–ª—è–µ–º @
                break
        
        return result
    
    async def suggest_channel_data(self, user_input: str) -> dict:
        """
        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –∫–∞–Ω–∞–ª–∞
        
        Returns:
        {
            'suggestions': {
                'title': str,
                'username': str,
                'telegram_id': int,
                'description': str,
                'is_active': bool
            },
            'validation': {
                'valid': bool,
                'warnings': [str],
                'info': [str]
            }
        }
        """
        result = {
            'suggestions': {},
            'validation': {
                'valid': False,
                'warnings': [],
                'info': []
            }
        }
        
        try:
            parsed = self.parse_channel_input(user_input)
            
            if not parsed['identifier']:
                result['validation']['warnings'].append('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
                return result
            
            entity = await self.client.get_entity(parsed['identifier'])
            
            if not hasattr(entity, 'broadcast') or not entity.broadcast:
                result['validation']['warnings'].append('–£–∫–∞–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º')
                return result
            
            result['suggestions'] = {
                'title': entity.title,
                'username': f"@{entity.username}" if entity.username else None,
                'telegram_id': entity.id,
                'description': getattr(entity, 'about', None) or f"–ö–∞–Ω–∞–ª {entity.title}",
                'is_active': True
            }
            
            result['validation']['valid'] = True
            result['validation']['info'].append(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {entity.title}")
            result['validation']['info'].append(f"üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {getattr(entity, 'participants_count', 0):,}")
            
            if getattr(entity, 'verified', False):
                result['validation']['info'].append("‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª")
            
            if not entity.username:
                result['validation']['warnings'].append("‚ö†Ô∏è –£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ username")
                
        except UsernameNotOccupiedError:
            result['validation']['warnings'].append('–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω')
        except Exception as e:
            result['validation']['warnings'].append(f'–û—à–∏–±–∫–∞: {str(e)}')
        
        return result


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ FastAPI endpoints
async def validate_channel_for_api(user_input: str) -> dict:
    """–§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ FastAPI"""
    async with ChannelValidator() as validator:
        return await validator.suggest_channel_data(user_input) 