#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
env_path = os.path.join(os.path.dirname(__file__), '..', '.env')
load_dotenv(env_path)
print(f"üìÅ –ß–∏—Ç–∞–µ–º .env –∏–∑: {os.path.abspath(env_path)}")

print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
print("=" * 50)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ DB –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db_vars = [
    "DB_HOST",
    "DB_PORT", 
    "DB_NAME",
    "DB_USER",
    "DB_PASSWORD",
    "DATABASE_URL"
]

print("üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
for var in db_vars:
    value = os.getenv(var, "–ù–ï –ù–ê–ô–î–ï–ù–ê")
    # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if "PASSWORD" in var and value != "–ù–ï –ù–ê–ô–î–ï–ù–ê":
        masked_value = "*" * len(value)
        print(f"  {var}: {masked_value}")
    else:
        print(f"  {var}: {value}")

print("\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL:")

try:
    import psycopg2
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    host = os.getenv("DB_HOST", "localhost")
    port = os.getenv("DB_PORT", "5432")
    database = os.getenv("DB_NAME", "digest_bot")
    user = os.getenv("DB_USER", "digest_bot")
    password = os.getenv("DB_PASSWORD", "SecurePassword123!")
    
    print(f"  –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫: {host}:{port}/{database} –∫–∞–∫ {user}")
    
    conn = psycopg2.connect(
        host=host,
        port=port,
        database=database,
        user=user,
        password=password
    )
    
    cursor = conn.cursor()
    cursor.execute("SELECT version();")
    version = cursor.fetchone()[0]
    
    print(f"  ‚úÖ –£–°–ü–ï–•! PostgreSQL –≤–µ—Ä—Å–∏—è: {version[:50]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—à–∏—Ö —Ç–∞–±–ª–∏—Ü
    cursor.execute("""
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name IN ('public_bots', 'posts_cache', 'processed_data')
        ORDER BY table_name;
    """)
    
    tables = cursor.fetchall()
    print(f"  üìã –ù–∞–π–¥–µ–Ω–æ multi-tenant —Ç–∞–±–ª–∏—Ü: {len(tables)}")
    for table in tables:
        print(f"    ‚úÖ {table[0]}")
    
    cursor.close()
    conn.close()
    
except Exception as e:
    print(f"  ‚ùå –û–®–ò–ë–ö–ê: {e}")

print("\n" + "=" * 50)
print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

host = os.getenv("DB_HOST", "–ù–ï –ù–ê–ô–î–ï–ù–ê")
if host == "postgres":
    print("  ‚ö†Ô∏è  DB_HOST=postgres (–¥–ª—è Docker)")
    print("  üîß –ù—É–∂–Ω–æ: DB_HOST=localhost (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ PostgreSQL)")
elif host == "localhost":
    print("  ‚úÖ DB_HOST=localhost (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ PostgreSQL)")
else:
    print(f"  ‚ùì DB_HOST={host} (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)") 