#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è AI Orchestrator v5.0 - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ù–µ–∑–∞–≤–∏—Å–∏–º—É—é —Ä–∞–±–æ—Ç—É categorization_worker –∏ summarization_worker
2. –§–ª–∞–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—É –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
3. –û–±—Ä–∞–±–æ—Ç–∫—É 19 –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –ø–æ—Å—Ç–æ–≤ (is_categorized=true, is_summarized=false)
4. –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

import asyncio
import aiohttp
import json
import logging
from datetime import datetime
from orchestrator_v5_parallel import AIOrchestrator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger('TestParallelOrchestrator')

class ParallelOrchestratorTester:
    def __init__(self, backend_url: str = "http://localhost:8000"):
        self.backend_url = backend_url
        self.orchestrator = AIOrchestrator(backend_url=backend_url)
        
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Orchestrator v5.0 - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
        
        tests = [
            ("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã", self.test_system_status),
            ("üè∑Ô∏è –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏", self.test_categorization_check),
            ("üìù –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏", self.test_summarization_check),
            ("‚öôÔ∏è –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤", self.test_ai_services_initialization),
            ("üîÑ –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –±–∞—Ç—á–∞ (legacy mode)", self.test_single_batch),
            ("üöÄ –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö worker —Ü–∏–∫–ª–æ–≤", self.test_parallel_workers_short),
        ]
        
        results = {}
        
        for test_name, test_func in tests:
            logger.info(f"\n{'='*60}")
            logger.info(f"üß™ {test_name}")
            logger.info(f"{'='*60}")
            
            try:
                result = await test_func()
                results[test_name] = {"status": "‚úÖ PASSED", "result": result}
                logger.info(f"‚úÖ {test_name}: PASSED")
            except Exception as e:
                results[test_name] = {"status": "‚ùå FAILED", "error": str(e)}
                logger.error(f"‚ùå {test_name}: FAILED - {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info(f"\n{'='*60}")
        logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info(f"{'='*60}")
        
        passed = 0
        failed = 0
        
        for test_name, result in results.items():
            status = result["status"]
            logger.info(f"{status} {test_name}")
            if "PASSED" in status:
                passed += 1
            else:
                failed += 1
                if "error" in result:
                    logger.info(f"   –û—à–∏–±–∫–∞: {result['error']}")
        
        logger.info(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏, {failed} –Ω–µ –ø—Ä–æ—à–ª–∏")
        
        if failed == 0:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        else:
            logger.warning(f"‚ö†Ô∏è {failed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        return results

    async def test_system_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∏ API"""
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Backend API
            async with session.get(f"{self.backend_url}/api/ai/status") as response:
                if response.status != 200:
                    raise Exception(f"Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                
                data = await response.json()
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {data}")
                
                flags_stats = data.get("flags_stats", {})
                logger.info(f"üè∑Ô∏è Uncategorized: {flags_stats.get('uncategorized', 0)}")
                logger.info(f"üìù Unsummarized: {flags_stats.get('unsummarized', 0)}")
                
                return data

    async def test_categorization_check(self):
        """–¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–µ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        has_uncategorized = await self.orchestrator.has_uncategorized_posts()
        logger.info(f"üè∑Ô∏è –ï—Å—Ç—å –Ω–µ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: {has_uncategorized}")
        return has_uncategorized

    async def test_summarization_check(self):
        """–¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        has_unsummarized = await self.orchestrator.has_unsummarized_posts()
        logger.info(f"üìù –ï—Å—Ç—å –Ω–µ—Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: {has_unsummarized}")
        return has_unsummarized

    async def test_ai_services_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        success = await self.orchestrator.initialize_ai_services()
        if not success:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å AI —Å–µ—Ä–≤–∏—Å—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã
        if self.orchestrator.categorization_service is None:
            raise Exception("CategorizationService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        if self.orchestrator.summarization_service is None:
            raise Exception("SummarizationService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        logger.info("‚úÖ AI —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return True

    async def test_single_batch(self):
        """–¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –±–∞—Ç—á–∞ (legacy mode –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        start_time = datetime.now()
        
        success = await self.orchestrator.run_single_batch()
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –±–∞—Ç—á–∞: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        if not success:
            raise Exception("–û–¥–∏–Ω–æ—á–Ω—ã–π –±–∞—Ç—á –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É—Å–ø–µ—à–Ω–æ")
        
        return {"success": success, "duration": duration}

    async def test_parallel_workers_short(self):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö worker —Ü–∏–∫–ª–æ–≤ (–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç - 2 –º–∏–Ω—É—Ç—ã)"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ workers –Ω–∞ 2 –º–∏–Ω—É—Ç—ã...")
        
        start_time = datetime.now()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º workers —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            await asyncio.wait_for(
                self.orchestrator.run_parallel_workers(),
                timeout=120  # 2 –º–∏–Ω—É—Ç—ã
            )
        except asyncio.TimeoutError:
            logger.info("‚è∞ –¢–∞–π–º–∞—É—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º workers")
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö workers: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤
        async with self.orchestrator.workers_lock:
            cat_running = self.orchestrator.categorization_is_running
            sum_running = self.orchestrator.summarization_is_running
        
        logger.info(f"üè∑Ô∏è Categorization worker –∞–∫—Ç–∏–≤–µ–Ω: {cat_running}")
        logger.info(f"üìù Summarization worker –∞–∫—Ç–∏–≤–µ–Ω: {sum_running}")
        
        return {
            "duration": duration,
            "categorization_running": cat_running,
            "summarization_running": sum_running
        }

    async def test_flags_independence(self):
        """–¢–µ—Å—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ–ª–∞–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ñ–ª–∞–≥–æ–≤
        async with self.orchestrator.workers_lock:
            self.orchestrator.categorization_is_running = True
            self.orchestrator.summarization_is_running = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–∂–¥—ã–π worker –≤–∏–¥–∏—Ç —Å–≤–æ–π —Ñ–ª–∞–≥
        cat_has_work = await self.orchestrator.has_uncategorized_posts()
        sum_has_work = await self.orchestrator.has_unsummarized_posts()
        
        logger.info(f"üè∑Ô∏è Categorization: —Ä–∞–±–æ—Ç–∞ –µ—Å—Ç—å={cat_has_work}, —Ñ–ª–∞–≥={self.orchestrator.categorization_is_running}")
        logger.info(f"üìù Summarization: —Ä–∞–±–æ—Ç–∞ –µ—Å—Ç—å={sum_has_work}, —Ñ–ª–∞–≥={self.orchestrator.summarization_is_running}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
        async with self.orchestrator.workers_lock:
            self.orchestrator.categorization_is_running = False
            self.orchestrator.summarization_is_running = False
        
        return {
            "categorization_work": cat_has_work,
            "summarization_work": sum_has_work
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Orchestrator v5.0 - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞')
    parser.add_argument('--backend-url', default='http://localhost:8000',
                       help='URL Backend API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8000)')
    parser.add_argument('--test', choices=['all', 'status', 'single', 'parallel'], default='all',
                       help='–ö–∞–∫–æ–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å')
    
    args = parser.parse_args()
    
    tester = ParallelOrchestratorTester(backend_url=args.backend_url)
    
    try:
        if args.test == 'all':
            await tester.run_all_tests()
        elif args.test == 'status':
            await tester.test_system_status()
        elif args.test == 'single':
            await tester.test_single_batch()
        elif args.test == 'parallel':
            await tester.test_parallel_workers_short()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    import sys
    sys.exit(asyncio.run(main())) 