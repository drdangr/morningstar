#!/usr/bin/env python3
"""
–¢–µ—Å—Ç AI Services –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º OpenAI –∫–ª—é—á–æ–º
"""

import sys
import os
import asyncio
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('/app')
sys.path.append('/app/services')
sys.path.append('/app/utils')

async def test_ai_services():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º AI Services –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
    
    print("üöÄ –¢–µ—Å—Ç AI Services –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
        from services.categorization import CategorizationService
        from utils.settings_manager import SettingsManager
        
        print("‚úÖ –ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º SettingsManager
        settings = SettingsManager()
        openai_key = await settings.get_openai_key()
        
        if openai_key:
            masked_key = f"{openai_key[:8]}...{openai_key[-4:]}" if len(openai_key) > 12 else "***"
            print(f"üîë OpenAI –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω: {masked_key}")
        else:
            print("‚ùå OpenAI –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ SettingsManager")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º CategorizationService
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º CategorizationService...")
        service = CategorizationService(openai_key, backend_url="http://backend:8000")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        from models.post import Post
        
        test_post = Post(
            id=999,
            content="–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—É",
            channel_telegram_id=12345,
            telegram_message_id=67890,
            post_date=datetime.fromisoformat("2025-07-18T10:00:00"),
            collected_at=datetime.fromisoformat("2025-07-18T10:00:00")
        )
        
        test_bot_id = 1  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–æ—Ç "MorningStarPublic"
        
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç: {test_post.content}")
        print(f"ü§ñ Bot ID: {test_bot_id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
        result = await service.process_with_bot_config([test_post], test_bot_id)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏:")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {len(result)}")
        
        if result and len(result) > 0:
            first_result = result[0]
            print(f"   –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {first_result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if 'category' in first_result or 'categories' in first_result:
                print("\n‚úÖ –£–°–ü–ï–•: AI Services —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                return True
            else:
                print("\n‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è")
                return True
        else:
            print("\n‚ùå –û–®–ò–ë–ö–ê: –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_ai_services())
    sys.exit(0 if success else 1) 