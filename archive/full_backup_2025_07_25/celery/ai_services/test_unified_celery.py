#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –µ–¥–∏–Ω–æ–≥–æ AI —Å–µ—Ä–≤–∏—Å–∞ —Å Celery –≤ Docker
"""

import time
import json
from celery import Celery

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
REDIS_URL = 'redis://localhost:6379/0'

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Celery
app = Celery('test_client')
app.conf.update(
    broker_url=REDIS_URL,
    result_backend=REDIS_URL,
    task_serializer='json',
    accept_content=['json'],
    result_serializer='json',
    timezone='UTC',
    enable_utc=True,
)

def test_ping_task():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∑–∞–¥–∞—á–∏ ping"""
    print("üèì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ping_task...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        result = app.send_task('tasks.ping_task', args=['Test message from client'])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = result.get(timeout=30)
        
        print(f"‚úÖ ping_task —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:")
        print(f"   Message: {response.get('message')}")
        print(f"   Task ID: {response.get('task_id')}")
        print(f"   Worker: {response.get('worker')}")
        print(f"   Status: {response.get('status')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ping_task –æ—à–∏–±–∫–∞: {e}")
        return False

def test_test_task():
    """–¢–µ—Å—Ç –∑–∞–¥–∞—á–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ test_task —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 3 —Å–µ–∫—É–Ω–¥—ã
        result = app.send_task('tasks.test_task', args=['Test with delay'], kwargs={'delay': 3})
        
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π...")
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = result.get(timeout=30)
        
        end_time = time.time()
        actual_delay = end_time - start_time
        
        print(f"‚úÖ test_task —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:")
        print(f"   Message: {response.get('message')}")
        print(f"   Expected delay: {response.get('delay')} —Å–µ–∫")
        print(f"   Actual delay: {actual_delay:.2f} —Å–µ–∫")
        print(f"   Status: {response.get('status')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå test_task –æ—à–∏–±–∫–∞: {e}")
        return False

def test_openai_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API"""
    print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        result = app.send_task('tasks.test_openai_connection')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = result.get(timeout=30)
        
        if response.get('status') == 'success':
            print(f"‚úÖ OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω:")
            print(f"   API Key present: {response.get('api_key_present')}")
            print(f"   Test response: {response.get('test_response')}")
        else:
            print(f"‚ö†Ô∏è OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:")
            print(f"   Error: {response.get('error')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå test_openai_connection –æ—à–∏–±–∫–∞: {e}")
        return False

def test_categorize_post():
    """–¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
    print("\nüè∑Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞...")
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        test_post = {
            'id': 1,
            'text': '–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –æ—Ç OpenAI',
            'channel_username': '@test_channel',
            'post_date': '2025-07-11T10:00:00Z'
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        result = app.send_task('tasks.categorize_post', args=[test_post, 1])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = result.get(timeout=60)
        
        if response.get('status') == 'success':
            print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:")
            print(f"   Post ID: {response.get('post_id')}")
            print(f"   Bot ID: {response.get('bot_id')}")
            print(f"   Result: {response.get('result')}")
        else:
            print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π:")
            print(f"   Error: {response.get('error')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå categorize_post –æ—à–∏–±–∫–∞: {e}")
        return False

def test_summarize_posts():
    """–¢–µ—Å—Ç —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
        test_posts = [
            {
                'id': 1,
                'text': '–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –æ—Ç OpenAI –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –º–æ–¥–µ–ª–∏.',
                'channel_username': '@ai_news'
            },
            {
                'id': 2,
                'text': '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.',
                'channel_username': '@ml_research'
            }
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        result = app.send_task('tasks.summarize_posts', args=[test_posts], kwargs={'mode': 'individual'})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = result.get(timeout=120)
        
        if response.get('status') == 'success':
            print(f"‚úÖ –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:")
            print(f"   Posts count: {response.get('posts_count')}")
            print(f"   Results count: {response.get('results_count')}")
            print(f"   Mode: {response.get('mode')}")
            
            for i, result in enumerate(response.get('results', [])[:2]):
                print(f"   Post {i+1} summary: {result.get('summary', 'N/A')[:100]}...")
        else:
            print(f"‚ö†Ô∏è –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π:")
            print(f"   Error: {response.get('error')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå summarize_posts –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ unified AI —Å–µ—Ä–≤–∏—Å–∞ —Å Celery –≤ Docker")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    try:
        app.control.inspect().ping()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis/Celery —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis/Celery: {e}")
        return
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        test_ping_task,
        test_test_task,
        test_openai_connection,
        test_categorize_post,
        test_summarize_posts
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
            failed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"   üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{passed + failed}")
    
    if failed == 0:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Unified AI —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")

if __name__ == "__main__":
    main() 