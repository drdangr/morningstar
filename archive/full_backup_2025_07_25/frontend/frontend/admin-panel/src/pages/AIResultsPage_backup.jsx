import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  Grid,
  Card,
  CardContent,
  Chip,
  Alert,
  CircularProgress,
  Tab,
  Tabs,
  TextField,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Rating,
  Divider,
  List,
  ListItem,
  ListItemText,
  IconButton,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tooltip,
  Stack,
  LinearProgress,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Checkbox,
  FormControlLabel,
  FormGroup,
  Snackbar,
  Collapse
} from '@mui/material';
import {
  SmartToy as SmartToyIcon,
  Preview as PreviewIcon,
  Analytics as AnalyticsIcon,
  Speed as ProcessingIcon,
  ExpandMore as ExpandMoreIcon,
  Visibility as ViewIcon,
  ThumbUp as ThumbUpIcon,
  ThumbDown as ThumbDownIcon,
  Refresh as RefreshIcon,
  PlayArrow as PlayIcon,
  Stop as StopIcon,
  Delete as DeleteIcon,
  Assessment as AssessmentIcon,
  Psychology as PsychologyIcon,
  Schedule as ScheduleIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Pending as PendingIcon,
  RestartAlt as RestartAltIcon,
  Tune as TuneIcon,
  Pause as PauseIcon,
  ExpandLess as ExpandLessIcon,
  ExpandMore as ExpandMoreIconTable,
  Settings as SettingsIcon,
  Build as BuildIcon
} from '@mui/icons-material';

// Mock data –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const mockAIResults = {
  totalProcessed: 51,
  totalPending: 0,
  averageQuality: 8.2,
  processingTime: '2.3s',
  lastUpdated: new Date().toISOString(),
  recentResults: [
    {
      id: 1,
      postTitle: '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –¥—Ä–æ–Ω—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ –Ω–µ—Ñ—Ç–µ–∑–∞–≤–æ–¥ –≤ –¢—É–ª–µ',
      originalContent: '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–∏ –∞—Ç–∞–∫–æ–≤–∞–ª–∏ –Ω–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–≤–æ–¥ –≤ –¢—É–ª–µ...',
      aiSummary: '–ê—Ç–∞–∫–∞ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –Ω–µ—Ñ—Ç–µ–∑–∞–≤–æ–¥ –≤ –¢—É–ª–µ: –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏ –µ–≥–æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è',
      aiCategory: '–í–æ–π–Ω–∞',
      relevanceScore: 0.95,
      importanceScore: 8.5,
      urgencyScore: 9.0,
      qualityRating: null,
      processedAt: new Date(Date.now() - 3600000).toISOString(),
      channel: '@breakingmash'
    },
    {
      id: 2,
      postTitle: '–ü–∞–≤–µ–ª –î—É—Ä–æ–≤ –æ–±—ä—è–≤–∏–ª –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö Telegram',
      originalContent: '–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å Telegram –ü–∞–≤–µ–ª –î—É—Ä–æ–≤ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª —Ä–µ–ª–∏–∑ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...',
      aiSummary: 'Telegram –ø–æ–ª—É—á–∏—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –∞–Ω–æ–Ω—Å –æ—Ç –ü–∞–≤–ª–∞ –î—É—Ä–æ–≤–∞',
      aiCategory: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      relevanceScore: 0.78,
      importanceScore: 6.5,
      urgencyScore: 4.0,
      qualityRating: 4,
      processedAt: new Date(Date.now() - 7200000).toISOString(),
      channel: '@durov'
    }
  ]
};

function TabPanel({ children, value, index, ...other }) {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`ai-results-tabpanel-${index}`}
      aria-labelledby={`ai-results-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ pt: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const AIResultsPage = () => {
  const [loading, setLoading] = useState(true);
  const [aiStatus, setAiStatus] = useState(null);
  const [activeTasks, setActiveTasks] = useState([]);
  const [detailedStatus, setDetailedStatus] = useState(null);
  const [detailedTabValue, setDetailedTabValue] = useState(0);
  const [channels, setChannels] = useState([]);
  const [selectedChannels, setSelectedChannels] = useState([]);
  const [actionLoading, setActionLoading] = useState(false);
  const [alert, setAlert] = useState({ show: false, type: 'info', message: '' });
  const [confirmDialog, setConfirmDialog] = useState({ open: false, action: null, title: '', message: '' });
  const [detailedStats, setDetailedStats] = useState(null);
  const [orchestratorLiveStatus, setOrchestratorLiveStatus] = useState(null);
  
  // üÜï –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø
  const [bots, setBots] = useState([]);
  const [selectedBot, setSelectedBot] = useState('all');
  const [aiResults, setAiResults] = useState([]);
  const [botsWithStats, setBotsWithStats] = useState([]); // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º
  const [expandedBot, setExpandedBot] = useState(null); // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è drill-down
  const [botChannelsStats, setBotChannelsStats] = useState({}); // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –±–æ—Ç–∞–º

  useEffect(() => {
    const fetchAllData = async () => {
      setLoading(true);
      try {
        await Promise.all([
          fetchAIStatus(),
          fetchDetailedStatus(),
          fetchActiveTasks(),
          fetchChannels(),
          fetchOrchestratorLiveStatus(),
          fetchBotsWithMultitenantStats() // üÜï –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        ]);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchAllData();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(async () => {
      try {
        await Promise.all([
          fetchAIStatus(),
          fetchDetailedStatus(),
          fetchActiveTasks(),
          fetchChannels(),
          fetchOrchestratorLiveStatus(),
          fetchBotsWithMultitenantStats() // üÜï –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        ]);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      }
    }, 5000);
    
    return () => clearInterval(interval);
  }, []);

  const fetchAIStatus = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/ai/status');
      if (response.ok) {
        const data = await response.json();
        setAiStatus(data);
      } else {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI:', response.status);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
        setAiStatus({
          posts_stats: { total: 0, pending: 0, processing: 0, completed: 0, failed: 0 },
          ai_results_stats: { total_results: 0, results_per_post: 0 },
          bots_stats: { total_processing_bots: 0, active_bots: 0, development_bots: 0 }
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ AI:', error);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
      setAiStatus({
        posts_stats: { total: 0, pending: 0, processing: 0, completed: 0, failed: 0 },
        ai_results_stats: { total_results: 0, results_per_post: 0 },
        bots_stats: { total_processing_bots: 0, active_bots: 0, development_bots: 0 }
      });
    }
  };

  const fetchDetailedStatus = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/ai/detailed-status');
      if (response.ok) {
        const data = await response.json();
        setDetailedStatus(data);
      } else {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É AI:', response.status);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
        setDetailedStatus({
          total_channels: 0,
          total_active_bots: 0,
          channels_detailed: [],
          bots_detailed: [],
          recent_processed: [],
          last_updated: new Date().toISOString()
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI:', error);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
      setDetailedStatus({
        total_channels: 0,
        total_active_bots: 0,
        channels_detailed: [],
        bots_detailed: [],
        recent_processed: [],
        last_updated: new Date().toISOString()
      });
    }
  };

  const fetchActiveTasks = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/ai/tasks');
      const data = await response.json();
      setActiveTasks(Array.isArray(data) ? data : []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
      setActiveTasks([]);
    }
  };

  const fetchChannels = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/channels');
      const data = await response.json();
      setChannels(Array.isArray(data) ? data : []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:', error);
      setChannels([]);
    }
  };

  const fetchOrchestratorLiveStatus = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/ai/orchestrator-live-status');
      if (response.ok) {
        const data = await response.json();
        setOrchestratorLiveStatus(data);
      } else {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å live —Å—Ç–∞—Ç—É—Å AI Orchestrator:', response.status);
        setOrchestratorLiveStatus({
          orchestrator_active: false,
          status: 'UNAVAILABLE',
          error: `HTTP ${response.status}`
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è live —Å—Ç–∞—Ç—É—Å–∞ AI Orchestrator:', error);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setOrchestratorLiveStatus({
        orchestrator_active: false,
        status: 'ERROR',
        error: error.message
      });
    }
  };

  // üÜï –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–æ—Ç–∞–º
  const fetchBotsWithMultitenantStats = async () => {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤...');
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
      console.log('üìû –ó–∞–ø—Ä–æ—Å –∫ /api/public-bots...');
      const botsResponse = await fetch('http://localhost:8000/api/public-bots');
      if (!botsResponse.ok) throw new Error('Failed to fetch bots');
      const allBots = await botsResponse.json();
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –±–æ—Ç–æ–≤: ${allBots.length}`, allBots);
      
      // 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const botsWithStatsPromises = allBots.map(async (bot) => {
        console.log(`ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ—Ç–∞: ${bot.name} (ID: ${bot.id})`);
        try {
          // AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
          console.log(`   üìû –ó–∞–ø—Ä–æ—Å AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ ${bot.id}...`);
          const resultsResponse = await fetch(`http://localhost:8000/api/ai/results?bot_id=${bot.id}&limit=500`);
          const results = resultsResponse.ok ? await resultsResponse.json() : [];
          console.log(`   ‚úÖ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
          
          // –ö–∞–Ω–∞–ª—ã –±–æ—Ç–∞
          console.log(`   üìû –ó–∞–ø—Ä–æ—Å –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –±–æ—Ç–∞ ${bot.id}...`);
          const channelsResponse = await fetch(`http://localhost:8000/api/public-bots/${bot.id}/channels`);
          const botChannels = channelsResponse.ok ? await channelsResponse.json() : [];
          console.log(`   ‚úÖ –ö–∞–Ω–∞–ª–æ–≤: ${botChannels.length}`);
          
          // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
          console.log(`   üìû –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±–æ—Ç–∞ ${bot.id}...`);
          const categoriesResponse = await fetch(`http://localhost:8000/api/public-bots/${bot.id}/categories`);
          const botCategories = categoriesResponse.ok ? await categoriesResponse.json() : [];
          console.log(`   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${botCategories.length}`);
          
          return {
            ...bot,
            ai_results_count: results.length,
            channels_count: botChannels.length,
            categories_count: botCategories.length,
            posts_stats: { total: 0, pending: 0, processing: 0, completed: 0, failed: 0 },
            channels: botChannels,
            categories: botCategories,
            ai_results: results.slice(0, 5)
          };
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ ${bot.id}:`, error);
          return {
            ...bot,
            ai_results_count: 0,
            channels_count: 0,
            categories_count: 0,
            posts_stats: { total: 0, pending: 0, processing: 0, completed: 0, failed: 0 },
            channels: [],
            categories: [],
            ai_results: []
          };
        }
      });
      
      const botsWithStats = await Promise.all(botsWithStatsPromises);
      console.log('üéâ –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', botsWithStats);
      setBotsWithStats(botsWithStats);
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤:', error);
      setBotsWithStats([]);
      showAlert('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤');
    }
  };

  // üÜï –û–ë–†–ê–ë–û–¢–ß–ò–ö: –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –±–æ—Ç–∞
  const handleBotExpand = (botId) => {
    setExpandedBot(expandedBot === botId ? null : botId);
  };

  const showAlert = (type, message) => {
    setAlert({ show: true, type, message });
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('ru-RU');
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'completed': return 'success';
      case 'processing': return 'warning';
      case 'failed': return 'error';
      case 'pending': return 'default';
      default: return 'default';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed': return <CheckCircleIcon />;
      case 'processing': return <CircularProgress size={16} />;
      case 'failed': return <ErrorIcon />;
      case 'pending': return <PendingIcon />;
      default: return <PendingIcon />;
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
  const handleChannelSelect = (channelId) => {
    setSelectedChannels(prev => 
      prev.includes(channelId) 
        ? prev.filter(id => id !== channelId)
        : [...prev, channelId]
    );
  };

  const handleSelectAllChannels = () => {
    if (selectedChannels.length === channels.length) {
      setSelectedChannels([]);
    } else {
      setSelectedChannels(channels.map(ch => ch.id));
    }
  };

  // –î–µ–π—Å—Ç–≤–∏—è
  const handleReprocessAll = async () => {
    setActionLoading(true);
    try {
      const response = await fetch('http://localhost:8000/api/ai/reprocess-all', { method: 'POST' });
      const data = await response.json();
      
      if (data.success) {
        showAlert('success', `–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω. –°–±—Ä–æ—à–µ–Ω–æ ${data.posts_reset} –ø–æ—Å—Ç–æ–≤, –æ—á–∏—â–µ–Ω–æ ${data.ai_results_cleared} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.`);
        await loadData();
      } else {
        showAlert('error', data.message || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      }
    } catch (error) {
      showAlert('error', '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }
    setActionLoading(false);
    setConfirmDialog({ open: false, action: null, title: '', message: '' });
  };

  const handleReprocessSelectedChannels = async () => {
    if (selectedChannels.length === 0) {
      showAlert('warning', '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
      return;
    }

    setActionLoading(true);
    try {
      // üöÄ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô ENDPOINT –° –ê–í–¢–û–ó–ê–ü–£–°–ö–û–ú
      const response = await fetch('http://localhost:8000/api/ai/reprocess-channels-auto', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ channel_ids: selectedChannels })
      });
      const data = await response.json();
      
      if (data.success) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–µ
        let message = `–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${data.channels_processed} –∫–∞–Ω–∞–ª–æ–≤. –°–±—Ä–æ—à–µ–Ω–æ ${data.total_posts_reset} –ø–æ—Å—Ç–æ–≤, –æ—á–∏—â–µ–Ω–æ ${data.total_ai_results_cleared} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.`;
        
        if (data.ai_auto_start) {
          message += ` üöÄ ${data.ai_message}`;
        } else {
          message += ` ‚ö†Ô∏è ${data.ai_message}`;
        }
        
        showAlert('success', message);
        setSelectedChannels([]);
        await loadData();
      } else {
        showAlert('error', data.message || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤');
      }
    } catch (error) {
      showAlert('error', '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }
    setActionLoading(false);
    setConfirmDialog({ open: false, action: null, title: '', message: '' });
  };

  const handleStopAI = async () => {
    setActionLoading(true);
    try {
      const response = await fetch('http://localhost:8000/api/ai/stop', { method: 'POST' });
      const data = await response.json();
      
      if (data.success) {
        showAlert('success', `AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. ${data.posts_stopped} –ø–æ—Å—Ç–æ–≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å 'pending'.`);
        await loadData();
      } else {
        showAlert('error', data.message || '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      }
    } catch (error) {
      showAlert('error', '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }
    setActionLoading(false);
    setConfirmDialog({ open: false, action: null, title: '', message: '' });
  };

  const handleClearResults = async () => {
    setActionLoading(true);
    try {
      const response = await fetch('http://localhost:8000/api/ai/clear-results?confirm=true', { method: 'DELETE' });
      const data = await response.json();
      
      if (data.success) {
        showAlert('success', `–£–¥–∞–ª–µ–Ω–æ ${data.deleted_results} AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        await loadData();
      } else {
        showAlert('error', data.message || '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      }
    } catch (error) {
      showAlert('error', '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }
    setActionLoading(false);
    setConfirmDialog({ open: false, action: null, title: '', message: '' });
  };

  const openConfirmDialog = (action, title, message) => {
    setConfirmDialog({ open: true, action, title, message });
  };

  const getOrchestratorStatus = () => {
    if (!orchestratorLiveStatus) {
      return { text: '–ù–ï–ò–ó–í–ï–°–¢–ù–û', color: 'default', icon: '‚ùì' };
    }

    if (orchestratorLiveStatus.orchestrator_active) {
      const status = orchestratorLiveStatus.status;
      switch (status) {
        case 'PROCESSING_STARTED':
          return { text: '–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–£–©–ï–ù–ê', color: 'info', icon: 'üöÄ' };
        case 'PROCESSING_COMPLETED':
          return { text: '–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê', color: 'success', icon: '‚úÖ' };
        case 'PROCESSING_FAILED':
          return { text: '–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò', color: 'error', icon: '‚ùå' };
        case 'IDLE':
          return { text: '–û–ñ–ò–î–ê–ù–ò–ï', color: 'warning', icon: '‚è≥' };
        default:
          return { text: '–ê–ö–¢–ò–í–ï–ù', color: 'success', icon: 'üü¢' };
      }
    } else {
      return { text: '–ù–ï –ê–ö–¢–ò–í–ï–ù', color: 'error', icon: 'üî¥' };
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const loadData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        fetchAIStatus(),
        fetchDetailedStatus(),
        fetchActiveTasks(),
        fetchChannels(),
        fetchOrchestratorLiveStatus(),
        fetchBotsWithMultitenantStats() // üÜï –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
      ]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height="50vh">
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>
        <AssessmentIcon sx={{ mr: 2, verticalAlign: 'middle' }} />
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        {/* AI Orchestrator Status */}
        <Box component="span" sx={{ ml: 2 }}>
          {orchestratorLiveStatus ? (
            orchestratorLiveStatus.orchestrator_active ? (
              <Chip 
                label={`AI Orchestrator: ${getOrchestratorStatus().text}`} 
                color={getOrchestratorStatus().color} 
                icon={<span>{getOrchestratorStatus().icon}</span>}
              />
            ) : (
              <Chip label="AI Orchestrator: –ù–ï –ê–ö–¢–ò–í–ï–ù" color="error" />
            )
          ) : (
            <Chip label="AI Orchestrator: –ù–ï –ê–ö–¢–ò–í–ï–ù" color="error" />
          )}
        </Box>
      </Typography>

      <Typography variant="body2" color="text.secondary" gutterBottom>
        –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date().toLocaleString('ru-RU')}
      </Typography>

      {/* Alert */}
      <Snackbar 
        open={alert.show} 
        autoHideDuration={6000} 
        onClose={() => setAlert({ show: false, type: 'info', message: '' })}
      >
        <Alert severity={alert.type} onClose={() => setAlert({ show: false, type: 'info', message: '' })}>
          {alert.message}
        </Alert>
      </Snackbar>

      {/* üéØ –ê–ö–ö–û–†–î–ï–û–ù –° –û–°–ù–û–í–ù–´–ú–ò –†–ê–ó–î–ï–õ–ê–ú–ò */}
      
      {/* ü§ñ –†–ê–ó–î–ï–õ 1: AI –°–ï–†–í–ò–°–´ */}
      <Accordion defaultExpanded sx={{ mb: 2 }}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Box display="flex" alignItems="center" gap={1}>
            <PsychologyIcon color="primary" />
            <Typography variant="h6">AI –°–µ—Ä–≤–∏—Å—ã</Typography>
            <Chip 
              label={orchestratorLiveStatus?.orchestrator_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
              color={orchestratorLiveStatus?.orchestrator_active ? 'success' : 'error'}
              size="small"
            />
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          
          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞–º–∏ */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                <SettingsIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞–º–∏
              </Typography>
              
              <Grid container spacing={2}>
                {/* –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle2" gutterBottom>
                    –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
                  </Typography>
                  <Stack direction="row" spacing={1} flexWrap="wrap" useFlexGap>
                    <Button
                      variant="contained"
                      color="primary"
                      startIcon={<RestartAltIcon />}
                      onClick={() => openConfirmDialog(
                        handleReprocessAll,
                        '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤',
                        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∏—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫—É. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
                      )}
                      disabled={actionLoading}
                    >
                      –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ë
                    </Button>
                    
                    <Button
                      variant="outlined"
                      color="error"
                      startIcon={<StopIcon />}
                      onClick={() => openConfirmDialog(
                        handleStopAI,
                        '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫—É',
                        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
                      )}
                      disabled={actionLoading}
                    >
                      –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AI
                    </Button>
                    
                    <Button
                      variant="outlined"
                      color="warning"
                      startIcon={<DeleteIcon />}
                      onClick={() => openConfirmDialog(
                        handleClearResults,
                        '–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã AI',
                        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –î–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
                      )}
                      disabled={actionLoading}
                    >
                      –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    </Button>
                    
                    <Button
                      variant="outlined"
                      startIcon={<RefreshIcon />}
                      onClick={loadData}
                      disabled={loading}
                    >
                      –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    </Button>
                  </Stack>
                </Grid>

                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI Orchestrator */}
                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle2" gutterBottom>
                    –°—Ç–∞—Ç—É—Å AI Orchestrator:
                  </Typography>
                  <Box display="flex" flexDirection="column" gap={1}>
                    {orchestratorLiveStatus ? (
                      <>
                        <Box display="flex" alignItems="center" gap={1}>
                          <Chip 
                            label={orchestratorLiveStatus.orchestrator_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                            color={orchestratorLiveStatus.orchestrator_active ? 'success' : 'error'}
                            size="small"
                          />
                          <Typography variant="body2">
                            –°—Ç–∞—Ç—É—Å: {getOrchestratorStatus().text}
                          </Typography>
                        </Box>
                        
                        {orchestratorLiveStatus.last_heartbeat && (
                          <Typography variant="caption" color="text.secondary">
                            –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {new Date(orchestratorLiveStatus.last_heartbeat).toLocaleString('ru-RU')}
                          </Typography>
                        )}
                        
                        {orchestratorLiveStatus.current_task && (
                          <Typography variant="caption" color="primary">
                            –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: {orchestratorLiveStatus.current_task}
                          </Typography>
                        )}
                      </>
                    ) : (
                      <Typography variant="body2" color="text.secondary">
                        –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ
                      </Typography>
                    )}
                  </Box>
                </Grid>
              </Grid>
            </CardContent>
          </Card>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã AI —Å–µ—Ä–≤–∏—Å–æ–≤ */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                <AnalyticsIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã AI —Å–µ—Ä–≤–∏—Å–æ–≤
              </Typography>
              
              <Grid container spacing={3}>
                {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                <Grid item xs={12} md={3}>
                  <Paper sx={{ p: 2, textAlign: 'center' }}>
                    <Typography variant="h4" color="primary">
                      {aiStatus?.total_processed || 0}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                    </Typography>
                  </Paper>
                </Grid>
                
                <Grid item xs={12} md={3}>
                  <Paper sx={{ p: 2, textAlign: 'center' }}>
                    <Typography variant="h4" color="warning.main">
                      {aiStatus?.total_pending || 0}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      –í –æ—á–µ—Ä–µ–¥–∏
                    </Typography>
                  </Paper>
                </Grid>
                
                <Grid item xs={12} md={3}>
                  <Paper sx={{ p: 2, textAlign: 'center' }}>
                    <Typography variant="h4" color="success.main">
                      {aiStatus?.success_rate ? `${Math.round(aiStatus.success_rate * 100)}%` : 'N/A'}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      –£—Å–ø–µ—à–Ω–æ—Å—Ç—å
                    </Typography>
                  </Paper>
                </Grid>
                
                <Grid item xs={12} md={3}>
                  <Paper sx={{ p: 2, textAlign: 'center' }}>
                    <Typography variant="h4" color="info.main">
                      {aiStatus?.average_processing_time || 'N/A'}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
                    </Typography>
                  </Paper>
                </Grid>
              </Grid>
            </CardContent>
          </Card>

          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è AI */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                <BuildIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ –∫–∞–Ω–∞–ª–∞–º
              </Typography>
              
              <Grid container spacing={2}>
                {/* –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ */}
                <Grid item xs={12} md={8}>
                  <Typography variant="subtitle2" gutterBottom>
                    –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏:
                  </Typography>
                  
                  <Box display="flex" alignItems="center" gap={2} mb={2}>
                    <FormControlLabel
                      control={
                        <Checkbox
                          checked={selectedChannels.length === channels.length && channels.length > 0}
                          indeterminate={selectedChannels.length > 0 && selectedChannels.length < channels.length}
                          onChange={handleSelectAllChannels}
                        />
                      }
                      label="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã"
                    />
                    <Typography variant="body2" color="text.secondary">
                      ({selectedChannels.length} –∏–∑ {channels.length} –≤—ã–±—Ä–∞–Ω–æ)
                    </Typography>
                  </Box>

                  <FormGroup>
                    <Grid container spacing={1}>
                      {channels.map((channel) => (
                        <Grid item xs={12} sm={6} md={4} key={channel.id}>
                          <FormControlLabel
                            control={
                              <Checkbox
                                checked={selectedChannels.includes(channel.id)}
                                onChange={() => handleChannelSelect(channel.id)}
                                size="small"
                              />
                            }
                            label={
                              <Box>
                                <Typography variant="body2" fontWeight="bold">
                                  {channel.username || channel.channel_name}
                                </Typography>
                                <Typography variant="caption" color="text.secondary">
                                  {channel.telegram_id}
                                </Typography>
                              </Box>
                            }
                          />
                        </Grid>
                      ))}
                    </Grid>
                  </FormGroup>
                </Grid>

                {/* –î–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ */}
                <Grid item xs={12} md={4}>
                  <Typography variant="subtitle2" gutterBottom>
                    –î–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏:
                  </Typography>
                  
                  <Stack spacing={1}>
                    <Button
                      variant="contained"
                      color="primary"
                      startIcon={<RestartAltIcon />}
                      onClick={() => openConfirmDialog(
                        handleReprocessSelectedChannels,
                        '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤',
                        `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∏—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–æ–≤ –∏–∑ ${selectedChannels.length} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –∏—Ö –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫—É. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`
                      )}
                      disabled={actionLoading || selectedChannels.length === 0}
                      fullWidth
                    >
                      –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                    </Button>
                    
                    <Typography variant="caption" color="text.secondary" textAlign="center">
                      {selectedChannels.length === 0 
                        ? '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞' 
                        : `–ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ ${selectedChannels.length} –∫–∞–Ω–∞–ª–æ–≤`
                      }
                    </Typography>
                  </Stack>
                </Grid>
              </Grid>
            </CardContent>
          </Card>

        </AccordionDetails>
      </Accordion>

      {/* ü§ñ –†–ê–ó–î–ï–õ 2: –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–´–ï –î–ê–ù–ù–´–ï –ü–û –ë–û–¢–ê–ú */}
      <Accordion defaultExpanded sx={{ mb: 2 }}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Box display="flex" alignItems="center" gap={1}>
            <SmartToyIcon color="primary" />
            <Typography variant="h6">–ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –±–æ—Ç–∞–º</Typography>
            <Chip 
              label={`${botsWithStats.length} –±–æ—Ç–æ–≤`}
              color="primary"
              size="small"
            />
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          <Typography>–ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ</Typography>
        </AccordionDetails>
      </Accordion>

      {/* Confirm Dialog */}
      <Dialog open={confirmDialog.open} onClose={() => setConfirmDialog({ open: false, action: null, title: '', message: '' })}>
        <DialogTitle>{confirmDialog.title}</DialogTitle>
        <DialogContent>
          <DialogContentText>{confirmDialog.message}</DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setConfirmDialog({ open: false, action: null, title: '', message: '' })}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            onClick={confirmDialog.action} 
            color="primary" 
            disabled={actionLoading}
            startIcon={actionLoading ? <CircularProgress size={16} /> : null}
          >
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default AIResultsPage; 