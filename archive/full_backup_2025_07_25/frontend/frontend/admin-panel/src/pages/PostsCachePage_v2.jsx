import React, { useState, useEffect } from 'react';
import {
  Paper,
  Typography,
  Box,
  Tabs,
  Tab,
  Alert,
  CircularProgress,
  Card,
  CardContent,
  Grid,
  Chip
} from '@mui/material';
import {
  Storage as StorageIcon,
  Psychology as PsychologyIcon
} from '@mui/icons-material';

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç–∞–±–æ–≤
import { RawPostsTab, AIResultsTab } from '../components/Posts';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º API URL –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
const API_BASE_URL = window.location.hostname === 'localhost' 
  ? 'http://localhost:8000' 
  : 'http://localhost:8000';

function PostsCachePage() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–∞–º–∏
  const [currentTab, setCurrentTab] = useState(0);
  
  // –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [stats, setStats] = useState(null);
  const [aiStats, setAiStats] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const loadStats = async () => {
    setLoading(true);
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
      const response = await fetch(`${API_BASE_URL}/api/posts/stats`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', data);
      setStats(data);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
  const loadAIStats = async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
      const response = await fetch(`${API_BASE_URL}/api/ai/multitenant-status`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', data);
      setAiStats(data);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
    }
  };

  // –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏
  const getUsedChannelsCount = () => {
    if (!aiStats?.bots_stats) return 0;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–∞—Ö
    let totalChannelsInActiveBots = 0;
    
    for (const bot of aiStats.bots_stats) {
      if (bot.status === 'active') {
        totalChannelsInActiveBots += bot.channels_count || 0;
      }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–∞—Ö
    // –≠—Ç–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ), –Ω–æ –ª—É—á—à–µ —á–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã —Å–∏—Å—Ç–µ–º—ã
    return totalChannelsInActiveBots;
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadStats();
    loadAIStats();
  }, []);

  const handleTabChange = (event, newValue) => {
    setCurrentTab(newValue);
  };

  return (
    <Box sx={{ p: 3 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <Typography variant="h4" gutterBottom>
        üìö Posts Cache Monitor
      </Typography>
      
      <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –∏–∑ Userbot –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
      </Typography>

      {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {stats && (
        <Grid container spacing={2} sx={{ mb: 3 }}>
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" gutterBottom>
                  –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤
                </Typography>
                <Typography variant="h5">
                  {stats.total_posts?.toLocaleString() || 0}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" gutterBottom>
                  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–≤
                </Typography>
                <Typography variant="h5">
                  {getUsedChannelsCount()}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" gutterBottom>
                  –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                </Typography>
                <Typography variant="h5">
                  {stats.total_size_mb ? `${stats.total_size_mb.toFixed(1)} MB` : 'N/A'}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" gutterBottom>
                  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                </Typography>
                <Typography variant="h6">
                  {stats.last_updated ? new Date(stats.last_updated).toLocaleString('ru-RU') : 'N/A'}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      )}

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError('')}>
          {error}
        </Alert>
      )}

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {loading && (
        <Box display="flex" justifyContent="center" sx={{ mb: 3 }}>
          <CircularProgress />
        </Box>
      )}

      {/* –î–≤—É—Ö—Ç–∞–±–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ */}
      <Paper sx={{ width: '100%' }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–æ–≤ */}
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs 
            value={currentTab} 
            onChange={handleTabChange}
            aria-label="Posts Cache Monitor Tabs"
            variant="fullWidth"
          >
            <Tab 
              icon={<StorageIcon />}
              label={
                <Box display="flex" alignItems="center" gap={1}>
                  <span>RAW POSTS</span>
                  <Chip 
                    label="–ë—ã—Å—Ç—Ä–æ" 
                    size="small" 
                    color="primary" 
                    variant="outlined"
                  />
                </Box>
              }
              iconPosition="start"
              sx={{ minHeight: 64 }}
            />
            <Tab 
              icon={<PsychologyIcon />}
              label={
                <Box display="flex" alignItems="center" gap={1}>
                  <span>AI RESULTS</span>
                  <Chip 
                    label="–ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç" 
                    size="small" 
                    color="secondary" 
                    variant="outlined"
                  />
                </Box>
              }
              iconPosition="start"
              sx={{ minHeight: 64 }}
            />
          </Tabs>
        </Box>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–æ–≤ */}
        <Box sx={{ p: 3 }}>
          {currentTab === 0 && (
            <RawPostsTab 
              stats={stats}
              onStatsUpdate={loadStats}
            />
          )}
          
          {currentTab === 1 && (
            <AIResultsTab 
              stats={stats}
              onStatsUpdate={loadStats}
            />
          )}
        </Box>
      </Paper>
    </Box>
  );
}

export default PostsCachePage; 