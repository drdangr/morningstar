import React, { useState, useEffect } from 'react';
import {
  Paper,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  Box,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Chip,
  Button,
  IconButton,
  Tooltip,
  Alert,
  CircularProgress,
  Card,
  CardContent,
  Grid,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Snackbar,
  Collapse,
  Checkbox
} from '@mui/material';
import {
  Search as SearchIcon,
  Refresh as RefreshIcon,
  Clear as ClearIcon,
  Visibility as ViewIcon,
  Link as LinkIcon,
  Schedule as ScheduleIcon,
  Delete as DeleteIcon,
  Warning as WarningIcon,
  Storage as StorageIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon
} from '@mui/icons-material';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º API URL –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
const API_BASE_URL = window.location.hostname === 'localhost' 
  ? 'http://localhost:8000' 
  : 'http://localhost:8000';

function RawPostsTab({ stats, onStatsUpdate }) {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  const [posts, setPosts] = useState([]);
  const [totalCount, setTotalCount] = useState(0);
  const [dataSize, setDataSize] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –æ—á–∏—Å—Ç–∫–∏
  const [orphanConfirmDialog, setOrphanConfirmDialog] = useState(false);
  const [clearingOrphans, setClearingOrphans] = useState(false);
  const [orphanSuccess, setOrphanSuccess] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è bulk delete —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
  const [selectedPosts, setSelectedPosts] = useState(new Set());
  const [bulkDeleteConfirmDialog, setBulkDeleteConfirmDialog] = useState(false);
  const [bulkDeleting, setBulkDeleting] = useState(false);
  const [bulkDeleteSuccess, setBulkDeleteSuccess] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(25);
  const [search, setSearch] = useState('');
  const [channelFilter, setChannelFilter] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [dateFrom, setDateFrom] = useState(null);
  const [dateTo, setDateTo] = useState(null);
  const [sortBy, setSortBy] = useState('post_date');
  const [sortOrder, setSortOrder] = useState('desc');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
  const [expandedPosts, setExpandedPosts] = useState({});

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  const loadDataSize = async () => {
    try {
      const params = new URLSearchParams();
      if (channelFilter) params.append('channel_telegram_id', channelFilter);
      
      const response = await fetch(`${API_BASE_URL}/api/posts/cache/size?${params}`);
      const data = await response.json();
      setDataSize(data.size_mb);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', err);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ RAW –ø–æ—Å—Ç–æ–≤ (–±–µ–∑ AI –¥–∞–Ω–Ω—ã—Ö)
  const loadRawPosts = async () => {
    setLoading(true);
    setError('');

    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º RAW –ø–æ—Å—Ç—ã...');
      
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      const params = new URLSearchParams({
        skip: page * rowsPerPage,
        limit: rowsPerPage,
        sort_by: sortBy,
        sort_order: sortOrder
      });

      if (search) params.append('search', search);
      if (channelFilter) params.append('channel_telegram_id', channelFilter);
      if (statusFilter) params.append('processing_status', statusFilter);
      if (dateFrom) params.append('date_from', dateFrom.toISOString());
      if (dateTo) params.append('date_to', dateTo.toISOString());

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint /api/posts/cache (–±–µ–∑ AI –¥–∞–Ω–Ω—ã—Ö)
      const [postsResponse, countResponse] = await Promise.all([
        fetch(`${API_BASE_URL}/api/posts/cache?${params}`),
        fetch(`${API_BASE_URL}/api/posts/cache/count?${params}`)
      ]);

      if (!postsResponse.ok) {
        throw new Error(`HTTP ${postsResponse.status}: ${postsResponse.statusText}`);
      }

      const postsData = await postsResponse.json();
      const countData = await countResponse.json();

      console.log('‚úÖ RAW –ø–æ—Å—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', postsData.length);
      setPosts(postsData);
      setTotalCount(countData.total_count);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
      loadDataSize();
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RAW –ø–æ—Å—Ç–æ–≤:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    loadRawPosts();
  }, [page, rowsPerPage, search, channelFilter, statusFilter, dateFrom, dateTo, sortBy, sortOrder]);

  // –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    clearSelectedPosts();
  }, [page, rowsPerPage, search, channelFilter, statusFilter, dateFrom, dateTo, sortBy, sortOrder]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handlePageChange = (event, newPage) => {
    setPage(newPage);
  };

  const handleRowsPerPageChange = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const handleClearFilters = () => {
    setSearch('');
    setChannelFilter('');
    setStatusFilter('');
    setDateFrom(null);
    setDateTo(null);
    setPage(0);
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('ru-RU');
  };

  const formatViews = (views) => {
    if (views >= 1000000) return `${(views / 1000000).toFixed(1)}M`;
    if (views >= 1000) return `${(views / 1000).toFixed(1)}K`;
    return views?.toString() || '0';
  };

  const getChannelInfo = (telegramId) => {
    if (!stats?.channels) return { title: `ID: ${telegramId}`, username: '' };
    
    const channel = stats.channels.find(ch => ch.telegram_id === telegramId);
    if (!channel) return { title: `ID: ${telegramId}`, username: '' };
    
    return {
      title: channel.title || channel.channel_name || `ID: ${telegramId}`,
      username: channel.username || ''
    };
  };

  const truncateText = (text, maxLength = 100) => {
    if (!text) return '';
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  };

  const cleanMarkdownText = (text) => {
    if (!text) return '';
    
    return text
      .replace(/\*\*(.*?)\*\*/g, '$1')
      .replace(/\*(.*?)\*/g, '$1')
      .replace(/__(.*?)__/g, '$1')
      .replace(/_(.*?)_/g, '$1')
      .replace(/`(.*?)`/g, '$1')
      .replace(/\[(.*?)\]\(.*?\)/g, '$1')
      .replace(/#{1,6}\s/g, '')
      .replace(/>\s/g, '')
      .replace(/\n+/g, ' ')
      .trim();
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å checkbox bulk delete
  const handleSelectAllPosts = (event) => {
    if (event.target.checked) {
      // –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const currentPagePostIds = new Set(posts.map(post => post.id));
      setSelectedPosts(currentPagePostIds);
    } else {
      // –°–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
      setSelectedPosts(new Set());
    }
  };

  const handleSelectPost = (postId) => {
    const newSelected = new Set(selectedPosts);
    if (newSelected.has(postId)) {
      newSelected.delete(postId);
    } else {
      newSelected.add(postId);
    }
    setSelectedPosts(newSelected);
  };

  const handleBulkDelete = async () => {
    if (selectedPosts.size === 0) {
      setError('–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –ø–æ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }

    setBulkDeleting(true);
    setError('');

    try {
      const response = await fetch(`${API_BASE_URL}/api/posts/cache/bulk-delete`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          post_ids: Array.from(selectedPosts)
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤');
      }

      const result = await response.json();
      
      // –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
      setBulkDeleteSuccess(`–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${result.deleted_count} –ø–æ—Å—Ç–æ–≤`);
      setSelectedPosts(new Set());
      setBulkDeleteConfirmDialog(false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      loadRawPosts();
      if (onStatsUpdate) onStatsUpdate();
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ bulk delete:', err);
      setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: ' + err.message);
    } finally {
      setBulkDeleting(false);
    }
  };

  const clearSelectedPosts = () => {
    setSelectedPosts(new Set());
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –ø–æ—Å—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const isAllCurrentPageSelected = posts.length > 0 && posts.every(post => selectedPosts.has(post.id));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const isSomeCurrentPageSelected = posts.some(post => selectedPosts.has(post.id));

  // Orphan cleanup functionality (existing)
  const handleCleanupOrphans = async () => {
    setClearingOrphans(true);
    try {
      const response = await fetch(`${API_BASE_URL}/api/posts/orphans?confirm=true`, {
        method: 'DELETE'
      });
      
      if (response.ok) {
        const result = await response.json();
        setOrphanSuccess(`–£–¥–∞–ª–µ–Ω–æ ${result.deleted_count} –ø–æ—Å—Ç–æ–≤-—Å–∏—Ä–æ—Ç`);
        loadRawPosts();
        onStatsUpdate();
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤-—Å–∏—Ä–æ—Ç');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ' + err.message);
    } finally {
      setClearingOrphans(false);
      setOrphanConfirmDialog(false);
    }
  };

  const togglePostExpansion = (postId) => {
    setExpandedPosts((prevExpandedPosts) => ({
      ...prevExpandedPosts,
      [postId]: !prevExpandedPosts[postId]
    }));
  };

  return (
    <Box>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–∞ */}
      <Box display="flex" alignItems="center" gap={2} sx={{ mb: 3 }}>
        <StorageIcon color="primary" />
        <Typography variant="h5">
          RAW POSTS - –î–∞–Ω–Ω—ã–µ Userbot
        </Typography>
        <Chip 
          label={`${totalCount.toLocaleString()} –ø–æ—Å—Ç–æ–≤`} 
          color="primary" 
          variant="outlined" 
        />
      </Box>

      <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
        –ß–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Userbot –±–µ–∑ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º, –¥–∞—Ç–∞–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.
      </Typography>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAW –¥–∞–Ω–Ω—ã—Ö */}
      <Grid container spacing={2} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="text.secondary" gutterBottom>
                –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –ø–æ—Å—Ç–æ–≤
              </Typography>
              <Typography variant="h6">
                {posts.length} –∏–∑ {totalCount.toLocaleString()}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="text.secondary" gutterBottom>
                –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
              </Typography>
              <Typography variant="h6">
                {dataSize ? `${dataSize.toFixed(1)} MB` : '–ó–∞–≥—Ä—É–∑–∫–∞...'}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="text.secondary" gutterBottom>
                –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
              </Typography>
              <Typography variant="h6">
                {[search, channelFilter, statusFilter, dateFrom, dateTo].filter(Boolean).length}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="text.secondary" gutterBottom>
                –°—Ç—Ä–∞–Ω–∏—Ü–∞
              </Typography>
              <Typography variant="h6">
                {page + 1} –∏–∑ {Math.ceil(totalCount / rowsPerPage)}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError('')}>
          {error}
        </Alert>
      )}

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <Paper sx={{ p: 2, mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
        </Typography>
        
        <Box display="flex" gap={2} alignItems="center" flexWrap="wrap">
          <Box sx={{ width: '150px' }}>
            <TextField
              fullWidth
              label="–ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"
              value={search}
              onChange={(e) => setSearch(e.target.value)}
              InputProps={{
                startAdornment: <SearchIcon sx={{ mr: 1, color: 'text.secondary' }} />
              }}
            />
          </Box>
          
          <Box sx={{ width: '180px' }}>
            <FormControl fullWidth>
              <InputLabel>–ö–∞–Ω–∞–ª—ã</InputLabel>
              <Select
                value={channelFilter}
                onChange={(e) => setChannelFilter(e.target.value)}
                label="–ö–∞–Ω–∞–ª—ã"
              >
                <MenuItem value="">–í—Å–µ –∫–∞–Ω–∞–ª—ã</MenuItem>
                {stats?.channels?.map((channel) => (
                  <MenuItem key={channel.telegram_id} value={channel.telegram_id}>
                    {channel.title || channel.channel_name} ({channel.posts_count})
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Box>
          
          <Box sx={{ width: '180px' }}>
            <FormControl fullWidth>
              <InputLabel>–°—Ç–∞—Ç—É—Å—ã</InputLabel>
              <Select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                label="–°—Ç–∞—Ç—É—Å—ã"
              >
                <MenuItem value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</MenuItem>
                <MenuItem value="pending">Pending</MenuItem>
                <MenuItem value="processing">Processing</MenuItem>
                <MenuItem value="completed">Completed</MenuItem>
                <MenuItem value="failed">Failed</MenuItem>
              </Select>
            </FormControl>
          </Box>
          
          <Box sx={{ flex: 1, minWidth: '180px' }}>
            <Box display="flex" gap={1}>
              <Button
                variant="outlined"
                onClick={handleClearFilters}
                startIcon={<ClearIcon />}
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </Button>
              <Button
                variant="contained"
                onClick={loadRawPosts}
                startIcon={<RefreshIcon />}
                disabled={loading}
              >
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
              <Button
                variant="outlined"
                color="error"
                onClick={() => setBulkDeleteConfirmDialog(true)}
                startIcon={<DeleteIcon />}
                disabled={selectedPosts.size === 0}
              >
                –£–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ ({selectedPosts.size})
              </Button>
            </Box>
          </Box>
        </Box>
      </Paper>

      {/* –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å—Ç–æ–≤ */}
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell padding="checkbox">
                <Checkbox
                  checked={isAllCurrentPageSelected}
                  indeterminate={!isAllCurrentPageSelected && isSomeCurrentPageSelected}
                  onChange={handleSelectAllPosts}
                  color="primary"
                />
              </TableCell>
              <TableCell>ID</TableCell>
              <TableCell>–ö–∞–Ω–∞–ª</TableCell>
              <TableCell>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ</TableCell>
              <TableCell>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</TableCell>
              <TableCell>–î–∞—Ç–∞ –ø–æ—Å—Ç–∞</TableCell>
              <TableCell>–°–æ–±—Ä–∞–Ω–æ</TableCell>
              <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {loading ? (
              <TableRow>
                <TableCell colSpan={8} align="center">
                  <CircularProgress />
                </TableCell>
              </TableRow>
            ) : posts.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} align="center">
                  <Typography color="text.secondary">
                    –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                  </Typography>
                </TableCell>
              </TableRow>
            ) : (
              posts.map((post) => {
                const channelInfo = getChannelInfo(post.channel_telegram_id);
                const isExpanded = expandedPosts[post.id];
                
                return (
                  <React.Fragment key={post.id}>
                    <TableRow hover>
                      <TableCell>
                        <Checkbox
                          checked={selectedPosts.has(post.id)}
                          onChange={() => handleSelectPost(post.id)}
                          color="primary"
                        />
                      </TableCell>
                      <TableCell>{post.id}</TableCell>
                      
                      <TableCell>
                        <Box>
                          <Typography variant="body2" fontWeight="bold">
                            {channelInfo.title}
                          </Typography>
                          {channelInfo.username && (
                            <Typography variant="caption" color="text.secondary">
                              @{channelInfo.username}
                            </Typography>
                          )}
                          <Typography variant="caption" display="block" color="text.secondary">
                            ID: {post.channel_telegram_id}
                          </Typography>
                        </Box>
                      </TableCell>
                      
                      <TableCell>
                        <Box sx={{ maxWidth: 600 }}>
                          {post.title && (
                            <Typography variant="body2" fontWeight="bold" gutterBottom>
                              {truncateText(post.title, 25)}
                            </Typography>
                          )}
                          <Typography variant="body2" color="text.secondary">
                            {truncateText(cleanMarkdownText(post.content), 50)}
                          </Typography>
                          {post.media_urls && post.media_urls.length > 0 && (
                            <Chip 
                              label={`üìé ${post.media_urls.length} –º–µ–¥–∏–∞`} 
                              size="small" 
                              sx={{ mt: 1 }} 
                            />
                          )}
                        </Box>
                      </TableCell>
                      
                      <TableCell>
                        <Typography variant="body2">
                          {formatViews(post.views)}
                        </Typography>
                      </TableCell>
                      
                      <TableCell>
                        <Typography variant="body2">
                          {formatDate(post.post_date)}
                        </Typography>
                      </TableCell>
                      
                      <TableCell>
                        <Typography variant="body2">
                          {formatDate(post.collected_at)}
                        </Typography>
                      </TableCell>
                      
                      <TableCell>
                        <Box display="flex" gap={1}>
                          <Tooltip title="–ü—Ä–æ—Å–º–æ—Ç—Ä –≤ Telegram">
                            <IconButton
                              size="small"
                              onClick={() => window.open(`https://t.me/c/${Math.abs(post.channel_telegram_id)}/1${post.telegram_message_id}`, '_blank')}
                            >
                              <LinkIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title={isExpanded ? "–°–≤–µ—Ä–Ω—É—Ç—å" : "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"}>
                            <IconButton size="small" onClick={() => togglePostExpansion(post.id)}>
                              {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                            </IconButton>
                          </Tooltip>
                        </Box>
                      </TableCell>
                    </TableRow>
                    
                    {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ */}
                    <TableRow>
                      <TableCell colSpan={7} sx={{ py: 0 }}>
                        <Collapse in={isExpanded} timeout="auto" unmountOnExit>
                          <Box sx={{ p: 2, bgcolor: 'grey.50' }}>
                            <Grid container spacing={2}>
                              <Grid item xs={12} md={8}>
                                <Typography variant="subtitle2" gutterBottom>
                                  –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:
                                </Typography>
                                {post.title && (
                                  <Typography variant="h6" gutterBottom>
                                    {post.title}
                                  </Typography>
                                )}
                                <Typography variant="body2" sx={{ mb: 2, whiteSpace: 'pre-wrap' }}>
                                  {post.content || '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ'}
                                </Typography>
                                
                                {post.media_urls && post.media_urls.length > 0 && (
                                  <Box>
                                    <Typography variant="subtitle2" gutterBottom>
                                      –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã ({post.media_urls.length}):
                                    </Typography>
                                    {post.media_urls.slice(0, 5).map((url, index) => (
                                      <Chip 
                                        key={index}
                                        label={`üìé –§–∞–π–ª ${index + 1}`} 
                                        size="small" 
                                        sx={{ mr: 1, mb: 1 }}
                                        onClick={() => window.open(url, '_blank')}
                                        clickable
                                      />
                                    ))}
                                    {post.media_urls.length > 5 && (
                                      <Typography variant="caption" color="text.secondary">
                                        –ò –µ—â–µ {post.media_urls.length - 5} —Ñ–∞–π–ª–æ–≤...
                                      </Typography>
                                    )}
                                  </Box>
                                )}
                              </Grid>
                              
                              <Grid item xs={12} md={4}>
                                <Typography variant="subtitle2" gutterBottom>
                                  –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
                                </Typography>
                                
                                <Box display="flex" flexDirection="column" gap={1}>
                                  <Typography variant="body2">
                                    <strong>ID –ø–æ—Å—Ç–∞:</strong> {post.id}
                                  </Typography>
                                  <Typography variant="body2">
                                    <strong>Telegram ID:</strong> {post.telegram_message_id}
                                  </Typography>
                                  <Typography variant="body2">
                                    <strong>–ö–∞–Ω–∞–ª ID:</strong> {post.channel_telegram_id}
                                  </Typography>
                                  <Typography variant="body2">
                                    <strong>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</strong> {formatViews(post.views)}
                                  </Typography>
                                  <Typography variant="body2">
                                    <strong>–î–∞—Ç–∞ –ø–æ—Å—Ç–∞:</strong> {formatDate(post.post_date)}
                                  </Typography>
                                  <Typography variant="body2">
                                    <strong>–°–æ–±—Ä–∞–Ω–æ:</strong> {formatDate(post.collected_at)}
                                  </Typography>
                                </Box>
                                
                                <Box mt={2}>
                                  <Button
                                    variant="outlined"
                                    size="small"
                                    startIcon={<LinkIcon />}
                                    onClick={() => window.open(`https://t.me/c/${Math.abs(post.channel_telegram_id)}/1${post.telegram_message_id}`, '_blank')}
                                    fullWidth
                                  >
                                    –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
                                  </Button>
                                </Box>
                              </Grid>
                            </Grid>
                          </Box>
                        </Collapse>
                      </TableCell>
                    </TableRow>
                  </React.Fragment>
                );
              })
            )}
          </TableBody>
        </Table>
      </TableContainer>

      {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      <TablePagination
        component="div"
        count={totalCount}
        page={page}
        onPageChange={handlePageChange}
        rowsPerPage={rowsPerPage}
        onRowsPerPageChange={handleRowsPerPageChange}
        rowsPerPageOptions={[10, 25, 50, 100]}
        labelRowsPerPage="–°—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:"
        labelDisplayedRows={({ from, to, count }) => 
          `${from}-${to} –∏–∑ ${count !== -1 ? count : `–±–æ–ª–µ–µ ${to}`}`
        }
      />

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ orphan –ø–æ—Å—Ç–æ–≤ */}
      <Dialog open={orphanConfirmDialog} onClose={() => setOrphanConfirmDialog(false)}>
        <DialogTitle>
          <Box display="flex" alignItems="center" gap={1}>
            <WarningIcon color="warning" />
            –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤-—Å–∏—Ä–æ—Ç
          </Box>
        </DialogTitle>
        <DialogContent>
          <DialogContentText>
            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏?
            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOrphanConfirmDialog(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            onClick={handleCleanupOrphans}
            color="warning"
            variant="contained"
            disabled={clearingOrphans}
            startIcon={clearingOrphans ? <CircularProgress size={20} /> : <DeleteIcon />}
          >
            {clearingOrphans ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–£–¥–∞–ª–∏—Ç—å'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è bulk delete */}
      <Dialog open={bulkDeleteConfirmDialog} onClose={() => setBulkDeleteConfirmDialog(false)}>
        <DialogTitle>
          <Box display="flex" alignItems="center" gap={1}>
            <DeleteIcon color="error" />
            –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
          </Box>
        </DialogTitle>
        <DialogContent>
          <DialogContentText>
            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {selectedPosts.size} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤?
            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setBulkDeleteConfirmDialog(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            onClick={handleBulkDelete}
            color="error"
            variant="contained"
            disabled={bulkDeleting}
            startIcon={bulkDeleting ? <CircularProgress size={20} /> : <DeleteIcon />}
          >
            {bulkDeleting ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–£–¥–∞–ª–∏—Ç—å'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π */}
      <Snackbar
        open={!!orphanSuccess}
        autoHideDuration={6000}
        onClose={() => setOrphanSuccess('')}
        message={orphanSuccess}
      />
      
      <Snackbar
        open={!!bulkDeleteSuccess}
        autoHideDuration={6000}
        onClose={() => setBulkDeleteSuccess('')}
        message={bulkDeleteSuccess}
      />
    </Box>
  );
}

export default RawPostsTab; 