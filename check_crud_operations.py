import requests
import json
import time

API_BASE = 'http://localhost:8000'

print("=== –ü–†–û–í–ï–†–ö–ê CRUD –û–ü–ï–†–ê–¶–ò–ô ===")

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Å timestamp
timestamp = int(time.time())

print("\n1. –¢–ï–ö–£–©–ò–ï –ö–ê–ù–ê–õ–´:")
channels = requests.get(f'{API_BASE}/api/channels').json()
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
for ch in channels:
    print(f"- {ch['title']} (ID: {ch['telegram_id']}, categories: {len(ch['categories'])})")

print("\n2. –¢–ï–ö–£–©–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò:")
categories = requests.get(f'{API_BASE}/api/categories').json()
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
for cat in categories:
    print(f"- {cat['category_name']} (ID: {cat['id']}, active: {cat['is_active']})")

print("\n3. –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò:")
try:
    new_category = {
        "category_name": f"–¢–ï–°–¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {timestamp}",  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
        "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π",
        "is_active": True
    }
    response = requests.post(f'{API_BASE}/api/categories', json=new_category)
    if response.status_code == 201:
        created_cat = response.json()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {created_cat['category_name']} (ID: {created_cat['id']})")
        test_category_id = created_cat['id']
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {response.status_code} - {response.text}")
        test_category_id = None
except Exception as e:
    print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
    test_category_id = None

print("\n4. –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ì–û –ö–ê–ù–ê–õ–ê:")
try:
    new_channel = {
        "channel_name": f"–¢–ï–°–¢ –ö–∞–Ω–∞–ª {timestamp}",  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
        "telegram_id": -1001000000000 - timestamp,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        "username": f"test_channel_{timestamp}", 
        "title": f"–¢–ï–°–¢ –ö–∞–Ω–∞–ª {timestamp}",
        "description": "–ö–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π",
        "is_active": True
    }
    response = requests.post(f'{API_BASE}/api/channels', json=new_channel)
    if response.status_code == 201:
        created_ch = response.json()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª: {created_ch['title']} (ID: {created_ch['telegram_id']})")
        test_channel_id = created_ch['id']
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {response.status_code} - {response.text}")
        test_channel_id = None
except Exception as e:
    print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
    test_channel_id = None

print("\n5. –¢–ï–°–¢ –°–í–Ø–ó–ò –ö–ê–ù–ê–õ-–ö–ê–¢–ï–ì–û–†–ò–Ø:")
if test_channel_id and test_category_id:
    try:
        response = requests.post(f'{API_BASE}/api/channels/{test_channel_id}/categories/{test_category_id}')
        if response.status_code == 200:
            print("‚úÖ –°–≤—è–∑—å –∫–∞–Ω–∞–ª-–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤—è–∑—å —Ä–µ–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª–∞—Å—å
            channel_response = requests.get(f'{API_BASE}/api/channels/{test_channel_id}')
            if channel_response.status_code == 200:
                channel_data = channel_response.json()
                print(f"‚úÖ –ö–∞–Ω–∞–ª —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç {len(channel_data['categories'])} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏: {e}")
else:
    print("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

print("\n6. –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –í –ë–î:")
channels_after = requests.get(f'{API_BASE}/api/channels').json()
categories_after = requests.get(f'{API_BASE}/api/categories').json()
print(f"–ö–∞–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ: {len(channels_after)} (–±—ã–ª–æ: {len(channels)})")
print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ: {len(categories_after)} (–±—ã–ª–æ: {len(categories)})")

print("\n7. –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•:")
if test_channel_id:
    try:
        response = requests.delete(f'{API_BASE}/api/channels/{test_channel_id}')
        if response.status_code == 200:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")

if test_category_id:
    try:
        response = requests.delete(f'{API_BASE}/api/categories/{test_category_id}')
        if response.status_code == 200:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
print("\n8. –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•:")
try:
    all_categories = requests.get(f'{API_BASE}/api/categories').json()
    for cat in all_categories:
        if "–¢–ï–°–¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è" in cat['category_name']:
            response = requests.delete(f'{API_BASE}/api/categories/{cat["id"]}')
            if response.status_code == 200:
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat['category_name']}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

print("\n=== –ò–¢–û–ì –ü–†–û–í–ï–†–ö–ò CRUD ===")
success = test_channel_id is not None and test_category_id is not None
print("‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" if success else "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ CRUD –æ–ø–µ—Ä–∞—Ü–∏—è—Ö")

if not success:
    print("\nüîß –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
    print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å backend –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–æ–¥–µ–ª–∏ Channel")
    print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ backend –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–ª–µ channel_name –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è") 