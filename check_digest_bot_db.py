#!/usr/bin/env python3

import psycopg2
import sys
import os
from dotenv import load_dotenv

def check_digest_bot_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É digest_bot"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
    load_dotenv()
    password = os.getenv("DB_PASSWORD")
    
    if not password:
        print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        print("–î–æ–±–∞–≤—å—Ç–µ DB_PASSWORD=–≤–∞—à_–ø–∞—Ä–æ–ª—å –≤ .env —Ñ–∞–π–ª")
        return False
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ digest_bot
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã digest_bot...")
        conn = psycopg2.connect(
            host='localhost',
            database='postgres',
            user='postgres',
            password=password
        )
        cursor = conn.cursor()
        
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = 'digest_bot';")
        digest_db_exists = cursor.fetchone()
        
        if digest_db_exists:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö digest_bot —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        else:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö digest_bot –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            cursor.close()
            conn.close()
            return False
        
        cursor.close()
        conn.close()
        
        # –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ digest_bot
        print("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ digest_bot...")
        conn = psycopg2.connect(
            host='localhost',
            database='digest_bot',
            user='postgres',
            password=password
        )
        cursor = conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ digest_bot —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name;
        """)
        tables = cursor.fetchall()
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü –≤ digest_bot:")
        for table in tables:
            print(f"  {table[0]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        tables_to_check = ['categories', 'channels', 'posts_cache', 'users', 'digests']
        
        has_important_data = False
        
        print("\n=== –î–ê–ù–ù–´–ï –í –¢–ê–ë–õ–ò–¶–ê–• ===")
        for table in tables_to_check:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table};")
                count = cursor.fetchone()[0]
                print(f"üìã –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                
                if count > 0:
                    has_important_data = True
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                    if table == 'categories':
                        cursor.execute(f"SELECT id, category_name, description FROM {table} LIMIT 3;")
                        rows = cursor.fetchall()
                        for row in rows:
                            print(f"   üìù {row[0]}: {row[1]} - {row[2]}")
                    
                    elif table == 'channels':
                        cursor.execute(f"SELECT id, title, username, telegram_id FROM {table} LIMIT 3;")
                        rows = cursor.fetchall()
                        for row in rows:
                            print(f"   üì∫ {row[0]}: {row[1]} (@{row[2]}) - {row[3]}")
                    
                    elif table == 'posts_cache':
                        cursor.execute(f"SELECT COUNT(*), MIN(collected_at), MAX(collected_at) FROM {table};")
                        row = cursor.fetchone()
                        print(f"   üìÆ –ü–æ—Å—Ç—ã –æ—Ç {row[1]} –¥–æ {row[2]}")
                        
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã categories
        print("\n=== –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ CATEGORIES ===")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'categories' 
            ORDER BY ordinal_position;
        """)
        columns = cursor.fetchall()
        
        for col in columns:
            print(f"  {col[0]} - {col[1]} - Nullable: {col[2]} - Default: {col[3]}")
        
        cursor.close()
        conn.close()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        print("\n" + "="*50)
        if has_important_data:
            print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –í –±–∞–∑–µ –µ—Å—Ç—å –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            print("   –ë–µ–∑–æ–ø–∞—Å–Ω–µ–µ –û–ë–ù–û–í–ò–¢–¨ –ö–û–î –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î")
            print("\nüìù –ù—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ backend/main.py:")
            print("   - name ‚Üí category_name –≤ –º–æ–¥–µ–ª–∏ Category")
        else:
            print("üí° –í –±–∞–∑–µ –Ω–µ—Ç –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            print("   –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
        
        return has_important_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    check_digest_bot_database() 