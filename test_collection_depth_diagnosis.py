import asyncio
import aiohttp
import json
from datetime import datetime, timedelta

async def test_backend_api_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ Backend API"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–ë–û–†–ê –ù–û–í–û–°–¢–ï–ô >1 –î–ù–Ø")
    print("=" * 60)
    
    backend_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É COLLECTION_DEPTH_DAYS
    print("\n1. üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É COLLECTION_DEPTH_DAYS...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{backend_url}/api/config/COLLECTION_DEPTH_DAYS") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ COLLECTION_DEPTH_DAYS: {data}")
                    collection_days = data.get('value', 3)
                    print(f"üìä –ó–Ω–∞—á–µ–Ω–∏–µ: {collection_days} –¥–Ω–µ–π")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ —á–∞—Å—ã
                    collection_hours = int(collection_days) * 24
                    print(f"‚è∞ –í —á–∞—Å–∞—Ö: {collection_hours} —á–∞—Å–æ–≤")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                    time_limit = datetime.now() - timedelta(hours=collection_hours)
                    print(f"üìÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞: {time_limit}")
                    print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now()}")
                    print(f"üìä –†–∞–∑–Ω–∏—Ü–∞: {(datetime.now() - time_limit).total_seconds() / 3600:.1f} —á–∞—Å–æ–≤")
                    
                else:
                    print(f"‚ùå Backend API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status}")
                    response_text = await response.text()
                    print(f"üìÑ –û—Ç–≤–µ—Ç: {response_text}")
                    
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Backend API: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    print("\n2. üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{backend_url}/api/settings?category=system") as response:
                if response.status == 200:
                    settings = await response.json()
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã: {len(settings)}")
                    
                    for setting in settings:
                        if setting['key'] in ['COLLECTION_DEPTH_DAYS', 'MAX_POSTS_PER_CHANNEL']:
                            print(f"üîß {setting['key']}: {setting['value']} ({setting['value_type']})")
                            print(f"   üìù {setting.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                else:
                    print(f"‚ùå Backend API settings –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status}")
                    
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Backend API
    print("\n3. üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Backend API...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{backend_url}/api/health") as response:
                if response.status == 200:
                    health = await response.json()
                    print(f"‚úÖ Backend API –∑–¥–æ—Ä–æ–≤: {health}")
                else:
                    print(f"‚ö†Ô∏è Backend API health check: {response.status}")
                    
    except Exception as e:
        print(f"üí• Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # –¢–µ—Å—Ç 4: –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ userbot
    print("\n4. ü§ñ –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ userbot...")
    
    try:
        collection_depth_days = 3  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ API (–∫–∞–∫ –≤ userbot)
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{backend_url}/api/config/COLLECTION_DEPTH_DAYS") as response:
                if response.status == 200:
                    data = await response.json()
                    collection_depth_days = data.get('value', 3)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ –≤ userbot
        collection_hours = int(collection_depth_days) * 24
        time_limit = datetime.now() - timedelta(hours=collection_hours)
        
        print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ userbot:")
        print(f"   üìÖ –î–Ω–∏ —Å–±–æ—Ä–∞: {collection_depth_days}")
        print(f"   ‚è∞ –ß–∞—Å—ã —Å–±–æ—Ä–∞: {collection_hours}")
        print(f"   üìÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞: {time_limit}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        test_scenarios = [
            ("1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥", 1),
            ("2 –¥–Ω—è –Ω–∞–∑–∞–¥", 2), 
            ("3 –¥–Ω—è –Ω–∞–∑–∞–¥", 3),
            ("5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥", 5),
            ("7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥", 7)
        ]
        
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:")
        for scenario_name, days_ago in test_scenarios:
            test_date = datetime.now() - timedelta(days=days_ago)
            would_pass = test_date >= time_limit
            status = "‚úÖ –ü–†–û–ô–î–ï–¢" if would_pass else "‚ùå –û–¢–§–ò–õ–¨–¢–†–£–ï–¢–°–Ø"
            print(f"   {scenario_name}: {test_date.strftime('%Y-%m-%d %H:%M')} ‚Üí {status}")
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
    
    print("\n" + "=" * 60)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Backend API –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ COLLECTION_DEPTH_DAYS —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ userbot –ø—Ä–∏ —Å–±–æ—Ä–µ –ø–æ—Å—Ç–æ–≤")
    print("4. –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ >3 –¥–Ω–µ–π, –ø–æ—Å—Ç—ã —Å—Ç–∞—Ä—à–µ –±—É–¥—É—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã")

async def main():
    await test_backend_api_config()

if __name__ == "__main__":
    asyncio.run(main()) 