#!/usr/bin/env python3
"""
ü§ñ MorningStar Bot v2 - –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–æ–∫

–†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´:
- Backend API –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –ø–∞–º—è—Ç–∏
- –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±–æ—Ç–∞
- –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ endpoints
"""
import asyncio
import json
import logging
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "http://127.0.0.1:8000"
PUBLIC_BOT_ID = 4
BOT_TOKEN = "8124620179:AAHNt4-7ZFg-zz0Cr6mJX483jDuNeARpIdE"

# üîß –õ–û–ö–ê–õ–¨–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï –ü–û–î–ü–ò–°–û–ö (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
user_subscriptions = {}  # {user_id: [category_ids]}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def get_bot_categories():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{BACKEND_URL}/api/public-bots/{PUBLIC_BOT_ID}/categories"
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∏–º–µ–Ω–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    categories = []
                    for cat in data:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º category_name –µ—Å–ª–∏ name –ø—É—Å—Ç–æ–µ
                        name = cat.get('name') or cat.get('category_name', f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat.get('id')}")
                        categories.append({
                            'id': cat.get('id'),
                            'name': name,
                            'description': cat.get('description', ''),
                            'is_active': cat.get('is_active', True)
                        })
                    return categories
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return []

async def get_ai_posts(limit=10):
    """–ü–æ–ª—É—á–∏—Ç—å AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{BACKEND_URL}/api/posts/cache-with-ai?bot_id={PUBLIC_BOT_ID}&ai_status=processed&limit={limit}"
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –ø–æ—Å—Ç–æ–≤: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ AI –ø–æ—Å—Ç–æ–≤: {e}")
        return []

def save_user_subscriptions(user_id, category_ids):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–∫–∞–ª—å–Ω–æ)"""
    user_subscriptions[user_id] = category_ids
    logger.info(f"üíæ –õ–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {category_ids}")

def get_user_subscriptions(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–∫–∞–ª—å–Ω–æ)"""
    return user_subscriptions.get(user_id, [])

def filter_posts_by_subscriptions(posts, subscribed_categories):
    """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º"""
    if not subscribed_categories:
        return []
    
    filtered_posts = []
    for post in posts:
        ai_category = post.get('ai_category', '')
        if ai_category:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ AI –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–¥–Ω—É –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            for sub_cat in subscribed_categories:
                if sub_cat.lower() in ai_category.lower():
                    filtered_posts.append(post)
                    break
    
    return filtered_posts

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"–Ø MorningStar Bot (v2) - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç Telegram –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        f"üöÄ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n"
        f"‚Ä¢ ü§ñ AI-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤\n"
        f"‚Ä¢ üéØ –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å (bot_id: {PUBLIC_BOT_ID})\n"
        f"‚Ä¢ üìä –£–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–≤–∞–∂–Ω–æ—Å—Ç—å, —Å—Ä–æ—á–Ω–æ—Å—Ç—å, –∑–Ω–∞—á–∏–º–æ—Å—Ç—å)\n"
        f"‚Ä¢ üé™ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º\n\n"
        f"‚ö° –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ <b>MorningStar Bot v2 - –ö–æ–º–∞–Ω–¥—ã:</b>

üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/categories - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
/subscribe - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
/digest - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç

üîß <b>–û—Ç–ª–∞–¥–∫–∞:</b>
/test - –ü–æ–∫–∞–∑–∞—Ç—å 10 AI –ø–æ—Å—Ç–æ–≤
/debug - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üí° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ v2:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç endpoint /api/posts/cache-with-ai?bot_id=4
‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ AI –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
"""
    await update.message.reply_text(help_text, parse_mode='HTML')

async def categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = await get_bot_categories()
    
    if not categories:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    text = f"üìÅ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}:</b>\n\n"
    for cat in categories:
        status = "‚úÖ" if cat['is_active'] else "‚ùå"
        text += f"{status} <b>{cat['name']}</b> (ID: {cat['id']})\n"
        if cat['description']:
            text += f"   üìù {cat['description']}\n"
        text += "\n"
    
    text += f"üí° –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}"
    await update.message.reply_text(text, parse_mode='HTML')

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    user_id = update.effective_user.id
    categories = await get_bot_categories()
    
    if not categories:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return
    
    current_subscriptions = get_user_subscriptions(user_id)
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    for cat in categories:
        if cat['is_active']:
            is_subscribed = cat['id'] in current_subscriptions
            emoji = "‚úÖ" if is_subscribed else "‚¨ú"
            text = f"{emoji} {cat['name']}"
            callback_data = f"toggle_{cat['id']}"
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_subscriptions")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}</b>\n\n"
    text += f"üìä –¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {len(current_subscriptions)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:"
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data.startswith("toggle_"):
        category_id = int(data.split("_")[1])
        current_subscriptions = get_user_subscriptions(user_id)
        
        if category_id in current_subscriptions:
            current_subscriptions.remove(category_id)
        else:
            current_subscriptions.append(category_id)
        
        save_user_subscriptions(user_id, current_subscriptions)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await subscribe_command(update, context)
        
    elif data == "save_subscriptions":
        current_subscriptions = get_user_subscriptions(user_id)
        await query.edit_message_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(current_subscriptions)}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
        )

async def digest_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç"""
    user_id = update.effective_user.id
    subscribed_category_ids = get_user_subscriptions(user_id)
    
    if not subscribed_category_ids:
        await update.message.reply_text(
            f"üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, "
            f"–∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–∞–π–¥–∂–µ—Å—Ç–∞."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
    categories = await get_bot_categories()
    category_names = {cat['id']: cat['name'] for cat in categories}
    subscribed_names = [category_names.get(cat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat_id}") for cat_id in subscribed_category_ids]
    
    # –ü–æ–ª—É—á–∞–µ–º AI –ø–æ—Å—Ç—ã
    posts = await get_ai_posts(limit=20)
    
    if not posts:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
    filtered_posts = filter_posts_by_subscriptions(posts, subscribed_names)
    
    if not filtered_posts:
        await update.message.reply_text(
            f"üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º.\n\n"
            f"üéØ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {', '.join(subscribed_names)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /subscribe."
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º (–≤–∞–∂–Ω–æ—Å—Ç—å√ó3 + —Å—Ä–æ—á–Ω–æ—Å—Ç—å√ó2 + –∑–Ω–∞—á–∏–º–æ—Å—Ç—å√ó2)
    def calculate_score(post):
        importance = post.get('ai_importance', 0)
        urgency = post.get('ai_urgency', 0)
        significance = post.get('ai_significance', 0)
        return importance * 3 + urgency * 2 + significance * 2
    
    filtered_posts.sort(key=calculate_score, reverse=True)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
    max_posts = 10
    filtered_posts = filtered_posts[:max_posts]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
    text = f"üì∞ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç</b>\n"
    text += f"üéØ –ü–æ–¥–ø–∏—Å–∫–∏: {', '.join(subscribed_names)}\n"
    text += f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(filtered_posts)}\n\n"
    
    for i, post in enumerate(filtered_posts, 1):
        title = post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]
        ai_summary = post.get('ai_summary', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:100]
        ai_category = post.get('ai_category', '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        importance = post.get('ai_importance', 0)
        urgency = post.get('ai_urgency', 0)
        significance = post.get('ai_significance', 0)
        
        text += f"<b>{i}. {title}</b>\n"
        text += f"üìù {ai_summary}\n"
        text += f"üè∑Ô∏è {ai_category}\n"
        text += f"üìä –í–∞–∂–Ω–æ—Å—Ç—å: {importance:.1f}, –°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency:.1f}, –ó–Ω–∞—á–∏–º–æ—Å—Ç—å: {significance:.1f}\n\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    posts = await get_ai_posts(limit=10)
    
    if not posts:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã.")
        return
    
    text = f"üß™ <b>–¢–µ—Å—Ç AI –ø–æ—Å—Ç–æ–≤ (bot_id: {PUBLIC_BOT_ID})</b>\n\n"
    text += f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}\n\n"
    
    for i, post in enumerate(posts[:5], 1):
        title = post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:30]
        ai_category = post.get('ai_category', '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        importance = post.get('ai_importance', 0)
        urgency = post.get('ai_urgency', 0)
        significance = post.get('ai_significance', 0)
        
        text += f"<b>{i}. {title}</b>\n"
        text += f"üè∑Ô∏è {ai_category}\n"
        text += f"üìä {importance:.1f}/{urgency:.1f}/{significance:.1f}\n\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    user_id = update.effective_user.id
    subscriptions = get_user_subscriptions(user_id)
    
    text = f"üîß <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
    text += f"üë§ User ID: {user_id}\n"
    text += f"ü§ñ Bot ID: {PUBLIC_BOT_ID}\n"
    text += f"üîó Backend URL: {BACKEND_URL}\n"
    text += f"üìä –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {subscriptions}\n"
    text += f"üìù –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: {len(user_subscriptions)}\n\n"
    text += f"‚ö° –†–µ–∂–∏–º: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫\n"
    text += f"üéØ Endpoint: /api/posts/cache-with-ai?bot_id={PUBLIC_BOT_ID}"
    
    await update.message.reply_text(text, parse_mode='HTML')

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("categories", categories_command))
    application.add_handler(CommandHandler("subscribe", subscribe_command))
    application.add_handler(CommandHandler("digest", digest_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("debug", debug_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print(f"üöÄ –ó–∞–ø—É—Å–∫ MorningStar Bot v2 (–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)")
    print(f"ü§ñ Bot ID: {PUBLIC_BOT_ID}")
    print(f"üíæ –†–µ–∂–∏–º: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫")
    
    application.run_polling()

if __name__ == '__main__':
    main() 