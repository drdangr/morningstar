#!/usr/bin/env python3
"""
ü§ñ MorningStar Bot v4 - –î–í–û–ô–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –∫–∞–Ω–∞–ª—ã ‚à© –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
- ‚úÖ –î–≤–æ–π–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –≤—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª—ã –ò –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
- ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: (–ø–æ—Å—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤) ‚à© (–ø–æ—Å—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
- ‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
- ‚úÖ –£–º–Ω–æ–µ –º–µ–Ω—é —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
- ‚úÖ Backend API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

–õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–´:
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏
2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º
3. –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
"""
import asyncio
import json
import logging
import aiohttp
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "http://127.0.0.1:8000"
PUBLIC_BOT_ID = 4
BOT_TOKEN = "8124620179:AAHNt4-7ZFg-zz0Cr6mJX483jDuNeARpIdE"

# üîß –õ–û–ö–ê–õ–¨–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï –ü–û–î–ü–ò–°–û–ö (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Ñ–∞–π–ª)
SUBSCRIPTIONS_FILE = "user_subscriptions.json"

def load_user_subscriptions():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(SUBSCRIPTIONS_FILE):
        try:
            with open(SUBSCRIPTIONS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int (JSON —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª—é—á–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏)
                return {int(k): v for k, v in data.items()}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return {}
    return {}

def save_subscriptions_to_file():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–∞–π–ª"""
    try:
        with open(SUBSCRIPTIONS_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_subscriptions, f, ensure_ascii=False, indent=2)
        logger.info(f"üíæ –ü–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {SUBSCRIPTIONS_FILE}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_subscriptions = load_user_subscriptions()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_subscriptions)} –∏–∑ —Ñ–∞–π–ª–∞: {SUBSCRIPTIONS_FILE}")

def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –¥–≤–æ–π–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="cmd_channels"),
            InlineKeyboardButton("üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="cmd_categories")
        ],
        [
            InlineKeyboardButton("üéØ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="cmd_subscriptions"),
            InlineKeyboardButton("üì∞ –î–∞–π–¥–∂–µ—Å—Ç", callback_data="cmd_digest")
        ],
        [
            InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="cmd_help"),
            InlineKeyboardButton("üß™ –¢–µ—Å—Ç", callback_data="cmd_test")
        ],
        [
            InlineKeyboardButton("üîß –û—Ç–ª–∞–¥–∫–∞", callback_data="cmd_debug")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def get_bot_categories():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{BACKEND_URL}/api/public-bots/{PUBLIC_BOT_ID}/categories"
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∏–º–µ–Ω–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    categories = []
                    for cat in data:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º category_name –µ—Å–ª–∏ name –ø—É—Å—Ç–æ–µ
                        name = cat.get('name') or cat.get('category_name', f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat.get('id')}")
                        categories.append({
                            'id': cat.get('id'),
                            'name': name,
                            'description': cat.get('description', ''),
                            'is_active': cat.get('is_active', True)
                        })
                    return categories
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return []

async def get_bot_channels():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{BACKEND_URL}/api/public-bots/{PUBLIC_BOT_ID}/channels"
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∏–º–µ–Ω–∞–º–∏ –∫–∞–Ω–∞–ª–æ–≤
                    channels = []
                    for ch in data:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º title –∏–ª–∏ channel_name
                        name = ch.get('title') or ch.get('channel_name', f"–ö–∞–Ω–∞–ª {ch.get('id')}")
                        channels.append({
                            'id': ch.get('id'),
                            'name': name,
                            'telegram_id': ch.get('telegram_id'),
                            'username': ch.get('username', ''),
                            'is_active': ch.get('is_active', True)
                        })
                    return channels
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return []

async def get_ai_posts(limit=10):
    """–ü–æ–ª—É—á–∏—Ç—å AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{BACKEND_URL}/api/posts/cache-with-ai?bot_id={PUBLIC_BOT_ID}&ai_status=processed&limit={limit}"
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
                    logger.info(f"üìä API Response - –¢–∏–ø: {type(data)}, –î–ª–∏–Ω–∞: {len(data) if isinstance(data, (list, dict)) else '–Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ'}")
                    
                    # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Å–ª–æ–≤–∞—Ä—å, –∏—â–µ–º –º–∞—Å—Å–∏–≤ –ø–æ—Å—Ç–æ–≤
                    if isinstance(data, dict):
                        logger.info(f"üîç –ö–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è: {list(data.keys())}")
                        
                        # –ò—â–µ–º –ø–æ–ª–µ —Å –ø–æ—Å—Ç–∞–º–∏ (–≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
                        posts_data = None
                        for key in ['posts', 'data', 'results', 'items']:
                            if key in data:
                                posts_data = data[key]
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Å—Ç—ã –≤ –ø–æ–ª–µ '{key}', —Ç–∏–ø: {type(posts_data)}")
                                break
                        
                        if posts_data is None:
                            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Å –ø–æ—Å—Ç–∞–º–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {data}")
                            return []
                        
                        # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
                        if isinstance(posts_data, list):
                            if len(posts_data) > 0:
                                logger.info(f"üîç –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç - –¢–∏–ø: {type(posts_data[0])}")
                                if isinstance(posts_data[0], str):
                                    # –ü–∞—Ä—Å–∏–º JSON —Å—Ç—Ä–æ–∫–∏
                                    try:
                                        parsed_posts = []
                                        for item in posts_data:
                                            if isinstance(item, str):
                                                parsed_item = json.loads(item)
                                                parsed_posts.append(parsed_item)
                                            else:
                                                parsed_posts.append(item)
                                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ {len(parsed_posts)} –ø–æ—Å—Ç–æ–≤")
                                        return parsed_posts
                                    except json.JSONDecodeError as e:
                                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                                        return []
                                else:
                                    logger.info(f"‚úÖ –ü–æ—Å—Ç—ã —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
                                    return posts_data
                            else:
                                logger.info("üì≠ –ú–∞—Å—Å–∏–≤ –ø–æ—Å—Ç–æ–≤ –ø—É—Å—Ç–æ–π")
                                return []
                        else:
                            logger.error(f"‚ùå –ü–æ–ª–µ —Å –ø–æ—Å—Ç–∞–º–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º: {type(posts_data)}")
                            return []
                    
                    # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é
                    elif isinstance(data, list):
                        if len(data) > 0:
                            logger.info(f"üîç –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –¢–∏–ø: {type(data[0])}")
                            if isinstance(data[0], str):
                                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON —Å—Ç—Ä–æ–∫–∏
                                try:
                                    parsed_data = []
                                    for item in data:
                                        if isinstance(item, str):
                                            parsed_item = json.loads(item)
                                            parsed_data.append(parsed_item)
                                        else:
                                            parsed_data.append(item)
                                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ {len(parsed_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                                    return parsed_data
                                except json.JSONDecodeError as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                                    return []
                            else:
                                logger.info(f"‚úÖ –ú–∞—Å—Å–∏–≤ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
                        return data
                    
                    else:
                        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(data)}")
                        return []
                        
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –ø–æ—Å—Ç–æ–≤: {response.status}")
                    text = await response.text()
                    logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {text[:200]}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ AI –ø–æ—Å—Ç–æ–≤: {e}")
        return []

def save_user_subscriptions(user_id, category_ids=None, channel_ids=None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏/–∏–ª–∏ –∫–∞–Ω–∞–ª—ã)"""
    if user_id not in user_subscriptions:
        user_subscriptions[user_id] = {
            'categories': [],
            'channels': []
        }
    
    if category_ids is not None:
        user_subscriptions[user_id]['categories'] = category_ids
    
    if channel_ids is not None:
        user_subscriptions[user_id]['channels'] = channel_ids
        
    save_subscriptions_to_file()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏={user_subscriptions[user_id]['categories']}, –∫–∞–Ω–∞–ª—ã={user_subscriptions[user_id]['channels']}")

def get_user_subscriptions(user_id, subscription_type='categories'):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∫–∞–Ω–∞–ª—ã)"""
    user_data = user_subscriptions.get(user_id, {'categories': [], 'channels': []})
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–º–∞—Å—Å–∏–≤ category_ids)
    if isinstance(user_data, list):
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
        user_subscriptions[user_id] = {
            'categories': user_data,
            'channels': []
        }
        save_subscriptions_to_file()
        return user_data if subscription_type == 'categories' else []
    
    return user_data.get(subscription_type, [])

def filter_posts_by_subscriptions(posts, subscribed_categories, subscribed_channel_ids):
    """–î–í–û–ô–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ø–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º –ò –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    if not subscribed_categories and not subscribed_channel_ids:
        return []
    
    filtered_posts = []
    for post in posts:
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ post —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if not isinstance(post, dict):
            logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {type(post)}")
            continue
        
        # –§–ò–õ–¨–¢–† 1: –ü–æ –∫–∞–Ω–∞–ª–∞–º (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∫–∞–Ω–∞–ª—ã)
        if subscribed_channel_ids:
            channel_telegram_id = post.get('channel_telegram_id')
            if not channel_telegram_id or channel_telegram_id not in subscribed_channel_ids:
                continue  # –ü–æ—Å—Ç –Ω–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        
        # –§–ò–õ–¨–¢–† 2: –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        if subscribed_categories:
            ai_category = post.get('ai_category', '')
            if not ai_category:
                continue  # –£ –ø–æ—Å—Ç–∞ –Ω–µ—Ç AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ AI –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–¥–Ω—É –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_matches = False
            for sub_cat in subscribed_categories:
                if sub_cat.lower() in ai_category.lower():
                    category_matches = True
                    break
            
            if not category_matches:
                continue  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
        
        # –ü–û–°–¢ –ü–†–û–®–ï–õ –í–°–ï –§–ò–õ–¨–¢–†–´
        filtered_posts.append(post)
    
    return filtered_posts

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    keyboard = get_main_menu_keyboard()
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"–Ø MorningStar Bot v4 - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å –¥–≤–æ–π–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π.\n\n"
        f"üéØ <b>–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:</b>\n"
        f"‚Ä¢ üì∫ –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        f"‚Ä¢ üìÅ –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ–º –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        f"‚Ä¢ üîç –î–≤–æ–π–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –∫–∞–Ω–∞–ª—ã ‚à© –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        f"‚Ä¢ üíæ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫\n\n"
        f"üöÄ <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
        f"‚Ä¢ ü§ñ AI-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤\n"
        f"‚Ä¢ üìä –£–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–≤–∞–∂–Ω–æ—Å—Ç—å, —Å—Ä–æ—á–Ω–æ—Å—Ç—å, –∑–Ω–∞—á–∏–º–æ—Å—Ç—å)\n"
        f"‚Ä¢ üé™ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –ø–æ –∫–∞–Ω–∞–ª–∞–º\n"
        f"‚Ä¢ üîß M—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å (bot_id: {PUBLIC_BOT_ID})\n\n"
        f"üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        f"1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã\n"
        f"2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        f"3. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = f"""
ü§ñ <b>MorningStar Bot v4 - –î–í–û–ô–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø</b>

üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/channels - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
/categories - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
/subscribe - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
/digest - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

üîß <b>–û—Ç–ª–∞–¥–∫–∞:</b>
/test - –ü–æ–∫–∞–∑–∞—Ç—å 10 AI –ø–æ—Å—Ç–æ–≤
/debug - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üéØ <b>–î–≤–æ–π–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:</b>
‚Ä¢ üì∫ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏
‚Ä¢ üìÅ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º
‚Ä¢ üîç –ü–æ–ª—É—á–∞–µ—Ç–µ –ø–æ—Å—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º

üí° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ v4:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç endpoint /api/posts/cache-with-ai?bot_id={PUBLIC_BOT_ID}
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª user_subscriptions.json
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º –ò –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –ø–æ –∫–∞–Ω–∞–ª–∞–º
‚Ä¢ –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ AI –º–µ—Ç—Ä–∏–∫–∞–º
"""
    keyboard = get_main_menu_keyboard()
    await update.message.reply_text(help_text, reply_markup=keyboard, parse_mode='HTML')

async def categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = await get_bot_categories()
    
    if not categories:
        keyboard = get_main_menu_keyboard()
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard
        )
        return
    
    text = f"üìÅ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}:</b>\n\n"
    for cat in categories:
        status = "‚úÖ" if cat['is_active'] else "‚ùå"
        text += f"{status} <b>{cat['name']}</b> (ID: {cat['id']})\n"
        if cat['description']:
            text += f"   üìù {cat['description']}\n"
        text += "\n"
    
    text += f"üí° –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}"
    keyboard = get_main_menu_keyboard()
    await update.message.reply_text(text, reply_markup=keyboard, parse_mode='HTML')

async def channels_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
    channels = await get_bot_channels()
    
    if not channels:
        keyboard = get_main_menu_keyboard()
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard
        )
        return
    
    text = f"üì∫ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}:</b>\n\n"
    for ch in channels:
        status = "‚úÖ" if ch['is_active'] else "‚ùå"
        username = f"@{ch['username']}" if ch['username'] else "–ë–µ–∑ username"
        text += f"{status} <b>{ch['name']}</b> (ID: {ch['id']})\n"
        text += f"   üì± {username}\n"
        text += f"   üÜî Telegram ID: {ch['telegram_id']}\n"
        text += "\n"
    
    text += f"üí° –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}"
    keyboard = get_main_menu_keyboard()
    await update.message.reply_text(text, reply_markup=keyboard, parse_mode='HTML')

async def subscriptions_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    category_subscriptions = get_user_subscriptions(user_id, 'categories')
    channel_subscriptions = get_user_subscriptions(user_id, 'channels')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    categories = await get_bot_categories()
    channels = await get_bot_channels()
    
    if not categories and not channels:
        keyboard = get_main_menu_keyboard()
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    text = f"üéØ <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}</b>\n\n"
    
    # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
    text += f"üì∫ <b>–ö–∞–Ω–∞–ª—ã ({len(channel_subscriptions)} –∏–∑ {len(channels)}):</b>\n"
    if channel_subscriptions:
        for ch in channels:
            if ch['id'] in channel_subscriptions:
                text += f"  ‚úÖ {ch['name']}\n"
    else:
        text += "  üì≠ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã\n"
    
    text += "\n"
    
    # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    text += f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(category_subscriptions)} –∏–∑ {len(categories)}):</b>\n"
    if category_subscriptions:
        for cat in categories:
            if cat['id'] in category_subscriptions:
                text += f"  ‚úÖ {cat['name']}\n"
    else:
        text += "  üì≠ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton("üì∫ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª—ã", callback_data="manage_channels"),
            InlineKeyboardButton("üìÅ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="manage_categories")
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="cmd_subscriptions"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def digest_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å –¥–≤–æ–π–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscribed_category_ids = get_user_subscriptions(user_id, 'categories')
    subscribed_channel_ids = get_user_subscriptions(user_id, 'channels')
    
    if not subscribed_category_ids and not subscribed_channel_ids:
        keyboard = get_main_menu_keyboard()
        await update.message.reply_text(
            f"üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}.\n\n"
            f"üéØ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω—É–∂–Ω–æ:\n"
            f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π)\n"
            f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–µ–º—ã –Ω–æ–≤–æ—Å—Ç–µ–π)\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üéØ –ü–æ–¥–ø–∏—Å–∫–∏' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=keyboard
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await update.message.reply_text("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å –¥–≤–æ–π–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
    categories = await get_bot_categories()
    channels = await get_bot_channels()
    
    category_names = {cat['id']: cat['name'] for cat in categories}
    channel_names = {ch['id']: ch['name'] for ch in channels}
    
    subscribed_category_names = [category_names.get(cat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat_id}") for cat_id in subscribed_category_ids]
    subscribed_channel_names = [channel_names.get(ch_id, f"–ö–∞–Ω–∞–ª {ch_id}") for ch_id in subscribed_channel_ids]
    
    # –ü–æ–ª—É—á–∞–µ–º Telegram ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    subscribed_channel_telegram_ids = []
    for ch in channels:
        if ch['id'] in subscribed_channel_ids:
            subscribed_channel_telegram_ids.append(ch['telegram_id'])
    
    # –ü–æ–ª—É—á–∞–µ–º AI –ø–æ—Å—Ç—ã
    posts = await get_ai_posts(limit=30)
    
    if not posts:
        keyboard = get_main_menu_keyboard()
        await loading_msg.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard
        )
        return
    
    # –î–í–û–ô–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –∫–∞–Ω–∞–ª—ã ‚à© –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    filtered_posts = filter_posts_by_subscriptions(posts, subscribed_category_names, subscribed_channel_telegram_ids)
    
    if not filtered_posts:
        keyboard = get_main_menu_keyboard()
        filter_info = ""
        if subscribed_channel_names:
            filter_info += f"üì∫ –ö–∞–Ω–∞–ª—ã: {', '.join(subscribed_channel_names)}\n"
        if subscribed_category_names:
            filter_info += f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(subscribed_category_names)}\n"
            
        await loading_msg.edit_text(
            f"üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.\n\n"
            f"üéØ <b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n{filter_info}\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
    def calculate_score(post):
        importance = post.get('ai_importance', 0)
        urgency = post.get('ai_urgency', 0)
        significance = post.get('ai_significance', 0)
        return importance * 3 + urgency * 2 + significance * 2
    
    filtered_posts.sort(key=calculate_score, reverse=True)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
    max_posts = 10
    filtered_posts = filtered_posts[:max_posts]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º
    posts_by_channel = {}
    for post in filtered_posts:
        channel_id = post.get('channel_telegram_id')
        channel_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        for ch in channels:
            if ch['telegram_id'] == channel_id:
                channel_name = ch['name']
                break
        
        if channel_name not in posts_by_channel:
            posts_by_channel[channel_name] = []
        posts_by_channel[channel_name].append(post)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
    text = f"üì∞ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç v4</b>\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    text += f"üéØ <b>–§–∏–ª—å—Ç—Ä—ã:</b>\n"
    if subscribed_channel_names:
        text += f"üì∫ –ö–∞–Ω–∞–ª—ã: {', '.join(subscribed_channel_names)}\n"
    if subscribed_category_names:
        text += f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(subscribed_category_names)}\n"
    
    text += f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(filtered_posts)}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º
    for channel_name, posts in posts_by_channel.items():
        text += f"üì∫ <b>{channel_name.upper()}</b>\n"
        
        for i, post in enumerate(posts, 1):
            ai_summary = post.get('ai_summary') or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
            ai_category = post.get('ai_category') or '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
            media_urls = post.get('media_urls', [])
            if media_urls and isinstance(media_urls, list) and len(media_urls) > 0:
                post_url = media_urls[0]
                text += f"{i}. {ai_summary} <a href='{post_url}'>üîó</a>\n"
            else:
                text += f"{i}. {ai_summary}\n"
            
            text += f"   üè∑Ô∏è {ai_category}\n"
        
        text += "\n"
    
    keyboard = get_main_menu_keyboard()
    await loading_msg.edit_text(text, reply_markup=keyboard, parse_mode='HTML')

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    loading_msg = await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã...")
    
    posts = await get_ai_posts(limit=10)
    
    if not posts:
        keyboard = get_main_menu_keyboard()
        await loading_msg.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã.",
            reply_markup=keyboard
        )
        return
    
    text = f"üß™ <b>–¢–µ—Å—Ç AI –ø–æ—Å—Ç–æ–≤ (bot_id: {PUBLIC_BOT_ID})</b>\n\n"
    text += f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}\n\n"
    
    for i, post in enumerate(posts[:5], 1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ post —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if not isinstance(post, dict):
            text += f"<b>{i}. –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞</b>\n"
            text += f"–¢–∏–ø: {type(post)}\n\n"
            continue
            
        title = (post.get('title') or '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:30]
        ai_category = post.get('ai_category') or '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        importance = post.get('ai_importance', 0)
        urgency = post.get('ai_urgency', 0)
        significance = post.get('ai_significance', 0)
        
        text += f"<b>{i}. {title}</b>\n"
        text += f"üè∑Ô∏è {ai_category}\n"
        text += f"üìä {importance:.1f}/{urgency:.1f}/{significance:.1f}\n\n"
    
    keyboard = get_main_menu_keyboard()
    await loading_msg.edit_text(text, reply_markup=keyboard, parse_mode='HTML')

async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    user_id = update.effective_user.id
    category_subscriptions = get_user_subscriptions(user_id, 'categories')
    channel_subscriptions = get_user_subscriptions(user_id, 'channels')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    posts = await get_ai_posts(limit=3)
    
    text = f"üîß <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è v4</b>\n\n"
    text += f"üë§ User ID: {user_id}\n"
    text += f"ü§ñ Bot ID: {PUBLIC_BOT_ID}\n"
    text += f"üîó Backend URL: {BACKEND_URL}\n\n"
    
    text += f"üìä <b>–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
    text += f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_subscriptions}\n"
    text += f"üì∫ –ö–∞–Ω–∞–ª—ã: {channel_subscriptions}\n"
    text += f"üìù –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: {len(user_subscriptions)}\n\n"
    
    text += f"üíæ <b>–°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è:</b>\n"
    text += f"üìÇ –§–∞–π–ª: {SUBSCRIPTIONS_FILE}\n"
    text += f"üîÑ –†–µ–∂–∏–º: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –¥–≤–æ–π–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π\n"
    text += f"üéØ Endpoint: /api/posts/cache-with-ai?bot_id={PUBLIC_BOT_ID}\n\n"
    
    # –û—Ç–ª–∞–¥–∫–∞ API –¥–∞–Ω–Ω—ã—Ö
    text += f"üîç <b>API Debug:</b>\n"
    text += f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts) if isinstance(posts, list) else '–Ω–µ —Å–ø–∏—Å–æ–∫'}\n"
    
    if posts and isinstance(posts, list):
        for i, post in enumerate(posts[:2], 1):
            text += f"\nüìù –ü–æ—Å—Ç {i}:\n"
            text += f"  –¢–∏–ø: {type(post)}\n"
            if isinstance(post, dict):
                text += f"  –ö–ª—é—á–∏: {list(post.keys())[:5]}\n"
                text += f"  ai_category: {post.get('ai_category', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
                text += f"  channel_telegram_id: {post.get('channel_telegram_id', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
                text += f"  title: {(post.get('title') or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')[:30]}\n"
            else:
                text += f"  –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {str(post)[:50]}\n"
    
    keyboard = get_main_menu_keyboard()
    await update.message.reply_text(text, reply_markup=keyboard, parse_mode='HTML')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    if data == "cmd_categories":
        await categories_command_callback(query, context)
    elif data == "cmd_channels":
        await channels_command_callback(query, context)
    elif data == "cmd_subscriptions":
        await subscriptions_command_callback(query, context)
    elif data == "cmd_digest":
        await digest_command_callback(query, context)
    elif data == "cmd_help":
        await help_command_callback(query, context)
    elif data == "cmd_test":
        await test_command_callback(query, context)
    elif data == "cmd_debug":
        await debug_command_callback(query, context)
    elif data == "main_menu":
        await main_menu_callback(query, context)
    elif data == "manage_channels":
        await manage_channels_callback(query, context)
    elif data == "manage_categories":
        await manage_categories_callback(query, context)
    elif data.startswith("toggle_channel_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ toggle –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã
        channel_id = int(data.split("_")[2])
        current_subscriptions = get_user_subscriptions(user_id, 'channels')
        
        if channel_id in current_subscriptions:
            current_subscriptions.remove(channel_id)
        else:
            current_subscriptions.append(channel_id)
        
        save_user_subscriptions(user_id, channel_ids=current_subscriptions)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await manage_channels_callback(query, context)
        
    elif data.startswith("toggle_category_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ toggle –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = int(data.split("_")[2])
        current_subscriptions = get_user_subscriptions(user_id, 'categories')
        
        if category_id in current_subscriptions:
            current_subscriptions.remove(category_id)
        else:
            current_subscriptions.append(category_id)
        
        save_user_subscriptions(user_id, category_ids=current_subscriptions)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await manage_categories_callback(query, context)
        
    elif data == "save_subscriptions":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        keyboard = get_main_menu_keyboard()
        await query.edit_message_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            f"üéØ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º:\n"
            f"‚Ä¢ üì∫ –ö–∞–Ω–∞–ª—ã - –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            f"‚Ä¢ üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Ç–µ–º—ã –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /digest –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.",
            reply_markup=keyboard
        )

# Callback –≤–µ—Ä—Å–∏–∏ –∫–æ–º–∞–Ω–¥
async def main_menu_callback(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = query.from_user
    keyboard = get_main_menu_keyboard()
    
    await query.edit_message_text(
        f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - MorningStar Bot v2</b>\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"ü§ñ Bot ID: {PUBLIC_BOT_ID}\n"
        f"‚ö° –†–µ–∂–∏–º: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

async def categories_command_callback(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ callback"""
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    
    categories = await get_bot_categories()
    
    if not categories:
        keyboard = get_main_menu_keyboard()
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard
        )
        return
    
    text = f"üìÅ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}:</b>\n\n"
    for cat in categories:
        status = "‚úÖ" if cat['is_active'] else "‚ùå"
        text += f"{status} <b>{cat['name']}</b> (ID: {cat['id']})\n"
        if cat['description']:
            text += f"   üìù {cat['description']}\n"
        text += "\n"
    
    text += f"üí° –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}"
    keyboard = get_main_menu_keyboard()
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='HTML')

async def channels_command_callback(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ callback"""
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã...")
    
    channels = await get_bot_channels()
    
    if not channels:
        keyboard = get_main_menu_keyboard()
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard
        )
        return
    
    text = f"üì∫ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}:</b>\n\n"
    for ch in channels:
        status = "‚úÖ" if ch['is_active'] else "‚ùå"
        username = f"@{ch['username']}" if ch['username'] else "–ë–µ–∑ username"
        text += f"{status} <b>{ch['name']}</b> (ID: {ch['id']})\n"
        text += f"   üì± {username}\n"
        text += f"   üÜî Telegram ID: {ch['telegram_id']}\n"
        text += "\n"
    
    text += f"üí° –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}"
    keyboard = get_main_menu_keyboard()
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='HTML')

async def subscriptions_command_callback(query, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ —á–µ—Ä–µ–∑ callback"""
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏...")
    
    user_id = query.from_user.id
    categories = await get_bot_categories()
    
    if not categories:
        keyboard = get_main_menu_keyboard()
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=keyboard
        )
        return
    
    current_subscriptions = get_user_subscriptions(user_id)
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    for cat in categories:
        if cat['is_active']:
            is_subscribed = cat['id'] in current_subscriptions
            emoji = "‚úÖ" if is_subscribed else "‚¨ú"
            text = f"{emoji} {cat['name']}"
            callback_data = f"toggle_category_{cat['id']}"
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_subscriptions")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}</b>\n\n"
    text += f"üìä –¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {len(current_subscriptions)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:"
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def digest_command_callback(query, context):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —á–µ—Ä–µ–∑ callback"""
    await query.edit_message_text("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å –¥–≤–æ–π–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π...")
    
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscribed_category_ids = get_user_subscriptions(user_id, 'categories')
    subscribed_channel_ids = get_user_subscriptions(user_id, 'channels')
    
    if not subscribed_category_ids and not subscribed_channel_ids:
        keyboard = get_main_menu_keyboard()
        await query.edit_message_text(
            f"üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –±–æ—Ç–∞ {PUBLIC_BOT_ID}.\n\n"
            f"üéØ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω—É–∂–Ω–æ:\n"
            f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π)\n"
            f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–µ–º—ã –Ω–æ–≤–æ—Å—Ç–µ–π)\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üéØ –ü–æ–¥–ø–∏—Å–∫–∏' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=keyboard
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
    categories = await get_bot_categories()
    channels = await get_bot_channels()
    
    category_names = {cat['id']: cat['name'] for cat in categories}
    channel_names = {ch['id']: ch['name'] for ch in channels}
    
    subscribed_category_names = [category_names.get(cat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat_id}") for cat_id in subscribed_category_ids]
    subscribed_channel_names = [channel_names.get(ch_id, f"–ö–∞–Ω–∞–ª {ch_id}") for ch_id in subscribed_channel_ids]
    
    # –ü–æ–ª—É—á–∞–µ–º Telegram ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    subscribed_channel_telegram_ids = []
    for ch in channels:
        if ch['id'] in subscribed_channel_ids:
            subscribed_channel_telegram_ids.append(ch['telegram_id'])
    
    # –ü–æ–ª—É—á–∞–µ–º AI –ø–æ—Å—Ç—ã
    posts = await get_ai_posts(limit=30)
    
    if not posts:
        keyboard = get_main_menu_keyboard()
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard
        )
        return
    
    # –î–í–û–ô–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –∫–∞–Ω–∞–ª—ã ‚à© –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    filtered_posts = filter_posts_by_subscriptions(posts, subscribed_category_names, subscribed_channel_telegram_ids)
    
    if not filtered_posts:
        keyboard = get_main_menu_keyboard()
        filter_info = ""
        if subscribed_channel_names:
            filter_info += f"üì∫ –ö–∞–Ω–∞–ª—ã: {', '.join(subscribed_channel_names)}\n"
        if subscribed_category_names:
            filter_info += f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(subscribed_category_names)}\n"
            
        await query.edit_message_text(
            f"üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.\n\n"
            f"üéØ <b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n{filter_info}\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
    def calculate_score(post):
        importance = post.get('ai_importance', 0)
        urgency = post.get('ai_urgency', 0)
        significance = post.get('ai_significance', 0)
        return importance * 3 + urgency * 2 + significance * 2
    
    filtered_posts.sort(key=calculate_score, reverse=True)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
    max_posts = 10
    filtered_posts = filtered_posts[:max_posts]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º
    posts_by_channel = {}
    for post in filtered_posts:
        channel_id = post.get('channel_telegram_id')
        channel_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        for ch in channels:
            if ch['telegram_id'] == channel_id:
                channel_name = ch['name']
                break
        
        if channel_name not in posts_by_channel:
            posts_by_channel[channel_name] = []
        posts_by_channel[channel_name].append(post)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
    text = f"üì∞ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç v4</b>\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    text += f"üéØ <b>–§–∏–ª—å—Ç—Ä—ã:</b>\n"
    if subscribed_channel_names:
        text += f"üì∫ –ö–∞–Ω–∞–ª—ã: {', '.join(subscribed_channel_names)}\n"
    if subscribed_category_names:
        text += f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(subscribed_category_names)}\n"
    
    text += f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(filtered_posts)}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º
    for channel_name, posts in posts_by_channel.items():
        text += f"üì∫ <b>{channel_name.upper()}</b>\n"
        
        for i, post in enumerate(posts, 1):
            ai_summary = post.get('ai_summary') or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
            ai_category = post.get('ai_category') or '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
            media_urls = post.get('media_urls', [])
            if media_urls and isinstance(media_urls, list) and len(media_urls) > 0:
                post_url = media_urls[0]
                text += f"{i}. {ai_summary} <a href='{post_url}'>üîó</a>\n"
            else:
                text += f"{i}. {ai_summary}\n"
            
            text += f"   üè∑Ô∏è {ai_category}\n"
        
        text += "\n"
    
    keyboard = get_main_menu_keyboard()
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='HTML')

async def help_command_callback(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ callback"""
    help_text = f"""
ü§ñ <b>MorningStar Bot v4 - –°–ø—Ä–∞–≤–∫–∞</b>

üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ üéØ –ü–æ–¥–ø–∏—Å–∫–∏ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ üì∞ –î–∞–π–¥–∂–µ—Å—Ç - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
‚Ä¢ ‚ùì –°–ø—Ä–∞–≤–∫–∞ - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîß <b>–û—Ç–ª–∞–¥–∫–∞:</b>
‚Ä¢ üß™ –¢–µ—Å—Ç - –ü–æ–∫–∞–∑–∞—Ç—å 10 AI –ø–æ—Å—Ç–æ–≤
‚Ä¢ üîß –û—Ç–ª–∞–¥–∫–∞ - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üéØ <b>–î–≤–æ–π–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:</b>
‚Ä¢ üì∫ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–∞–Ω–∞–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏
‚Ä¢ üìÅ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º
‚Ä¢ üîç –ü–æ–ª—É—á–∞–µ—Ç–µ –ø–æ—Å—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º

üí° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ v4:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç endpoint /api/posts/cache-with-ai?bot_id={PUBLIC_BOT_ID}
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª user_subscriptions.json
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º –ò –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –ø–æ –∫–∞–Ω–∞–ª–∞–º
‚Ä¢ –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ AI –º–µ—Ç—Ä–∏–∫–∞–º
"""
    keyboard = get_main_menu_keyboard()
    await query.edit_message_text(help_text, reply_markup=keyboard, parse_mode='HTML')

async def test_command_callback(query, context):
    """–¢–µ—Å—Ç —á–µ—Ä–µ–∑ callback"""
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã...")
    
    posts = await get_ai_posts(limit=10)
    
    if not posts:
        keyboard = get_main_menu_keyboard()
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã.",
            reply_markup=keyboard
        )
        return
    
    text = f"üß™ <b>–¢–µ—Å—Ç AI –ø–æ—Å—Ç–æ–≤ (bot_id: {PUBLIC_BOT_ID})</b>\n\n"
    text += f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}\n\n"
    
    for i, post in enumerate(posts[:5], 1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ post —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if not isinstance(post, dict):
            text += f"<b>{i}. –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞</b>\n"
            text += f"–¢–∏–ø: {type(post)}\n\n"
            continue
            
        title = (post.get('title') or '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:30]
        ai_category = post.get('ai_category') or '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        importance = post.get('ai_importance', 0)
        urgency = post.get('ai_urgency', 0)
        significance = post.get('ai_significance', 0)
        
        text += f"<b>{i}. {title}</b>\n"
        text += f"üè∑Ô∏è {ai_category}\n"
        text += f"üìä {importance:.1f}/{urgency:.1f}/{significance:.1f}\n\n"
    
    keyboard = get_main_menu_keyboard()
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='HTML')

async def debug_command_callback(query, context):
    """–û—Ç–ª–∞–¥–∫–∞ —á–µ—Ä–µ–∑ callback"""
    await query.edit_message_text("‚è≥ –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    user_id = query.from_user.id
    category_subscriptions = get_user_subscriptions(user_id, 'categories')
    channel_subscriptions = get_user_subscriptions(user_id, 'channels')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    posts = await get_ai_posts(limit=3)
    
    text = f"üîß <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è v4</b>\n\n"
    text += f"üë§ User ID: {user_id}\n"
    text += f"ü§ñ Bot ID: {PUBLIC_BOT_ID}\n"
    text += f"üîó Backend URL: {BACKEND_URL}\n\n"
    
    text += f"üìä <b>–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
    text += f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_subscriptions}\n"
    text += f"üì∫ –ö–∞–Ω–∞–ª—ã: {channel_subscriptions}\n"
    text += f"üìù –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: {len(user_subscriptions)}\n\n"
    
    text += f"üíæ <b>–°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è:</b>\n"
    text += f"üìÇ –§–∞–π–ª: {SUBSCRIPTIONS_FILE}\n"
    text += f"üîÑ –†–µ–∂–∏–º: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –¥–≤–æ–π–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π\n"
    text += f"üéØ Endpoint: /api/posts/cache-with-ai?bot_id={PUBLIC_BOT_ID}\n\n"
    
    # –û—Ç–ª–∞–¥–∫–∞ API –¥–∞–Ω–Ω—ã—Ö
    text += f"üîç <b>API Debug:</b>\n"
    text += f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts) if isinstance(posts, list) else '–Ω–µ —Å–ø–∏—Å–æ–∫'}\n"
    
    if posts and isinstance(posts, list):
        for i, post in enumerate(posts[:2], 1):
            text += f"\nüìù –ü–æ—Å—Ç {i}:\n"
            text += f"  –¢–∏–ø: {type(post)}\n"
            if isinstance(post, dict):
                text += f"  –ö–ª—é—á–∏: {list(post.keys())[:5]}\n"
                text += f"  ai_category: {post.get('ai_category', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
                text += f"  channel_telegram_id: {post.get('channel_telegram_id', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
                text += f"  title: {(post.get('title') or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')[:30]}\n"
            else:
                text += f"  –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {str(post)[:50]}\n"
    
    keyboard = get_main_menu_keyboard()
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='HTML')

async def manage_channels_callback(query, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã...")
    
    user_id = query.from_user.id
    channels = await get_bot_channels()
    
    if not channels:
        keyboard = get_main_menu_keyboard()
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã.",
            reply_markup=keyboard
        )
        return
    
    current_subscriptions = get_user_subscriptions(user_id, 'channels')
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    keyboard = []
    for ch in channels:
        if ch['is_active']:
            is_subscribed = ch['id'] in current_subscriptions
            emoji = "‚úÖ" if is_subscribed else "‚¨ú"
            display_name = ch['name'][:30] + "..." if len(ch['name']) > 30 else ch['name']
            text = f"{emoji} {display_name}"
            callback_data = f"toggle_channel_{ch['id']}"
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_subscriptions")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cmd_subscriptions")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"üì∫ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã</b>\n\n"
    text += f"üìä –¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {len(current_subscriptions)} –∏–∑ {len(channels)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:"
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def manage_categories_callback(query, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    
    user_id = query.from_user.id
    categories = await get_bot_categories()
    
    if not categories:
        keyboard = get_main_menu_keyboard()
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=keyboard
        )
        return
    
    current_subscriptions = get_user_subscriptions(user_id, 'categories')
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = []
    for cat in categories:
        if cat['is_active']:
            is_subscribed = cat['id'] in current_subscriptions
            emoji = "‚úÖ" if is_subscribed else "‚¨ú"
            text = f"{emoji} {cat['name']}"
            callback_data = f"toggle_category_{cat['id']}"
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_subscriptions")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cmd_subscriptions")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"üìÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
    text += f"üìä –¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {len(current_subscriptions)} –∏–∑ {len(categories)}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:"
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def setup_bot_commands(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é —Å–ª–µ–≤–∞)"""
    commands = [
        BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("channels", "üì∫ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"),
        BotCommand("categories", "üìÅ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
        BotCommand("subscribe", "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"),
        BotCommand("digest", "üì∞ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç"),
        BotCommand("help", "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand("test", "üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"),
        BotCommand("debug", "üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    ]
    
    try:
        await application.bot.set_my_commands(commands)
        print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é —Å–ª–µ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("channels", channels_command))
    application.add_handler(CommandHandler("categories", categories_command))
    application.add_handler(CommandHandler("subscribe", subscriptions_command))
    application.add_handler(CommandHandler("digest", digest_command))
    application.add_handler(CommandHandler("test", test_command))
    application.add_handler(CommandHandler("debug", debug_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print(f"üöÄ –ó–∞–ø—É—Å–∫ MorningStar Bot v4 (–î–í–û–ô–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø)")
    print(f"ü§ñ Bot ID: {PUBLIC_BOT_ID}")
    print(f"üíæ –†–µ–∂–∏–º: –ü–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ {SUBSCRIPTIONS_FILE}")
    print(f"üéØ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –∫–∞–Ω–∞–ª—ã ‚à© –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print(f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –∫–∞–Ω–∞–ª—ã + –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    async def post_init(application):
        await setup_bot_commands(application)
    
    application.post_init = post_init
    application.run_polling()

if __name__ == '__main__':
    main() 