#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MultiBotManager - –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ Telegram –±–æ—Ç–∞–º–∏

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏–∑ Backend API
- –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
- –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –±–æ—Ç–æ–≤ (start/stop/restart)
- –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –∏ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å
- –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ webhooks

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- BotInstance: –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
- MultiBotManager: –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –±–æ—Ç–∞–º–∏
- WebhookServer: HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
"""

import asyncio
import logging
import time
import traceback
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from datetime import datetime
import aiohttp
import json
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import FloodWait, Unauthorized, ApiIdInvalid
import os
import sys
from pathlib import Path
from fastapi import FastAPI, HTTPException
import uvicorn
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/multibot_manager.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏–∑ Backend API"""
    bot_id: int
    name: str
    bot_token: str
    status: str  # active, paused, development
    welcome_message: str
    categorization_prompt: str
    summarization_prompt: str
    max_posts_per_digest: int
    max_summary_length: int
    created_at: str
    updated_at: str

class BotInstance:
    """–û—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞"""
    
    def __init__(self, config: BotConfig, backend_api_url: str):
        self.config = config
        self.backend_api_url = backend_api_url
        self.client: Optional[Client] = None
        self.is_running = False
        self.start_time: Optional[datetime] = None
        self.message_count = 0
        self.error_count = 0
        
        # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è session –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
        self.session_name = f"bot_{config.bot_id}_{config.name.replace(' ', '_')}"
        
        logger.info(f"–°–æ–∑–¥–∞–Ω BotInstance –¥–ª—è –±–æ—Ç–∞ {config.bot_id}: {config.name}")
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
        try:
            if self.is_running:
                logger.warning(f"–ë–æ—Ç {self.config.bot_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            # –°–æ–∑–¥–∞–Ω–∏–µ Pyrogram Client
            self.client = Client(
                name=self.session_name,
                bot_token=self.config.bot_token,
                session_string=None,  # –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è session —Ñ–∞–π–ª
                workdir="session/"
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self._register_handlers()
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await self.client.start()
            self.is_running = True
            self.start_time = datetime.now()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
            me = await self.client.get_me()
            logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω –±–æ—Ç {self.config.bot_id}: {me.first_name} (@{me.username})")
            
            return True
            
        except Unauthorized:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ {self.config.bot_id}: {self.config.name}")
            self.error_count += 1
            return False
        except ApiIdInvalid:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API ID –¥–ª—è –±–æ—Ç–∞ {self.config.bot_id}: {self.config.name}")
            self.error_count += 1
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {self.config.bot_id}: {e}")
            logger.error(traceback.format_exc())
            self.error_count += 1
            return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
        try:
            if not self.is_running:
                logger.warning(f"–ë–æ—Ç {self.config.bot_id} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return
            
            if self.client:
                await self.client.stop()
                
            self.is_running = False
            self.start_time = None
            
            logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–æ—Ç {self.config.bot_id}: {self.config.name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {self.config.bot_id}: {e}")
            logger.error(traceback.format_exc())
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        if not self.client:
            return
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @self.client.on_message(filters.command("start") & filters.private)
        async def start_handler(client, message: Message):
            self.message_count += 1
            await message.reply_text(
                self.config.welcome_message or f"–ü—Ä–∏–≤–µ—Ç! –Ø {self.config.name}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                reply_markup=None
            )
            logger.info(f"üì® –ë–æ—Ç {self.config.bot_id} –æ–±—Ä–∞–±–æ—Ç–∞–ª –∫–æ–º–∞–Ω–¥—É /start –æ—Ç {message.from_user.id}")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        @self.client.on_message(filters.command("help") & filters.private)
        async def help_handler(client, message: Message):
            self.message_count += 1
            help_text = f"""
ü§ñ **{self.config.name}**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/categories - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ë–æ—Ç ID: {self.config.bot_id}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {self.config.status}
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ: {self.config.max_posts_per_digest}
"""
            await message.reply_text(help_text)
            logger.info(f"üì® –ë–æ—Ç {self.config.bot_id} –æ–±—Ä–∞–±–æ—Ç–∞–ª –∫–æ–º–∞–Ω–¥—É /help –æ—Ç {message.from_user.id}")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
        @self.client.on_message(filters.command("status") & filters.private)
        async def status_handler(client, message: Message):
            self.message_count += 1
            uptime = datetime.now() - self.start_time if self.start_time else None
            status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ {self.config.name}**

üü¢ **–†–∞–±–æ—Ç–∞–µ—Ç —Å** {self.start_time.strftime('%Y-%m-%d %H:%M:%S') if self.start_time else 'N/A'}
üìà **Uptime:** {str(uptime).split('.')[0] if uptime else 'N/A'}
üì® **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {self.message_count}
‚ùå **–û—à–∏–±–æ–∫:** {self.error_count}
üîß **–†–µ–∂–∏–º:** {self.config.status}
"""
            await message.reply_text(status_text)
            logger.info(f"üì® –ë–æ—Ç {self.config.bot_id} –æ–±—Ä–∞–±–æ—Ç–∞–ª –∫–æ–º–∞–Ω–¥—É /status –æ—Ç {message.from_user.id}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
        uptime = datetime.now() - self.start_time if self.start_time else None
        return {
            "bot_id": self.config.bot_id,
            "name": self.config.name,
            "status": self.config.status,
            "is_running": self.is_running,
            "start_time": self.start_time.isoformat() if self.start_time else None,
            "uptime_seconds": uptime.total_seconds() if uptime else 0,
            "message_count": self.message_count,
            "error_count": self.error_count
        }

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã
from fastapi import FastAPI, HTTPException
import uvicorn
import threading

# === WEBHOOK SERVER ===

class WebhookServer:
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Backend API"""
    
    def __init__(self, manager: 'MultiBotManager', port: int = 8001):
        self.manager = manager
        self.port = port
        self.app = FastAPI(title="MultiBotManager Webhook Server", version="1.0.0")
        self.server_task = None
        self.is_running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ routes
        self.setup_routes()
        
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP routes"""
        
        @self.app.post("/reload")
        async def reload_bot_config(request: dict):
            """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
            try:
                bot_id = request.get("bot_id")
                action = request.get("action", "updated")
                
                logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω webhook: bot_id={bot_id}, action={action}")
                
                if not bot_id:
                    raise HTTPException(status_code=400, detail="bot_id is required")
                
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                asyncio.create_task(self.manager.handle_bot_change(bot_id, action))
                
                return {
                    "status": "success",
                    "message": f"Bot {bot_id} configuration reload requested",
                    "action": action
                }
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
                raise HTTPException(status_code=500, detail=f"Webhook processing failed: {str(e)}")
        
        @self.app.get("/status")
        async def get_manager_status():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
            return self.manager.get_stats()
        
        @self.app.get("/health")
        async def health_check():
            """Health check endpoint"""
            return {
                "status": "healthy",
                "manager_running": self.manager.is_running,
                "total_bots": len(self.manager.bots),
                "running_bots": len([b for b in self.manager.bots.values() if b.is_running])
            }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.is_running:
            return
            
        try:
            config = uvicorn.Config(
                self.app,
                host="0.0.0.0",
                port=self.port,
                log_level="info"
            )
            
            server = uvicorn.Server(config)
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def run_server():
                asyncio.run(server.serve())
            
            self.server_task = threading.Thread(target=run_server, daemon=True)
            self.server_task.start()
            self.is_running = True
            
            logger.info(f"üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.is_running:
            return
            
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            if self.server_task and self.server_task.is_alive():
                self.server_task.join(timeout=5)
            
            self.is_running = False
            logger.info("üõë Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")

# === –û–ë–ù–û–í–õ–ï–ù–ù–´–ô MULTIBOTMANAGER ===

class MultiBotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏"""
    
    def __init__(self, backend_api_url: str = "http://localhost:8000", webhook_port: int = 8001):
        self.backend_api_url = backend_api_url
        self.bots: Dict[int, BotInstance] = {}
        self.is_running = False
        self.last_config_check = 0
        self.config_check_interval = 60  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        os.makedirs("logs", exist_ok=True)
        os.makedirs("session", exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è webhook —Å–µ—Ä–≤–µ—Ä–∞
        self.webhook_server = WebhookServer(self, webhook_port)
        
        logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω MultiBotManager —Å Backend API: {backend_api_url}")
        logger.info(f"üåê Webhook —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {webhook_port}")
    
    async def get_active_bots(self) -> List[BotConfig]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏–∑ Backend API —Å retry –ª–æ–≥–∏–∫–æ–π"""
        for attempt in range(3):  # Retry 3 —Ä–∞–∑–∞
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        f"{self.backend_api_url}/api/public-bots",
                        params={"status": "active"}
                    ) as response:
                        if response.status == 200:
                            data = await response.json()
                            bots = []
                            for bot_data in data:
                                bot_config = BotConfig(
                                    bot_id=bot_data["id"],
                                    name=bot_data["name"],
                                    bot_token=bot_data["bot_token"],
                                    status=bot_data["status"],
                                    welcome_message=bot_data.get("welcome_message", ""),
                                    categorization_prompt=bot_data.get("categorization_prompt", ""),
                                    summarization_prompt=bot_data.get("summarization_prompt", ""),
                                    max_posts_per_digest=bot_data.get("max_posts_per_digest", 15),
                                    max_summary_length=bot_data.get("max_summary_length", 200),
                                    created_at=bot_data.get("created_at", ""),
                                    updated_at=bot_data.get("updated_at", "")
                                )
                                bots.append(bot_config)
                            
                            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(bots)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏–∑ Backend API")
                            return bots
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                            
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤: {e}")
                if attempt < 2:
                    await asyncio.sleep(2 ** attempt)  # Exponential backoff
        
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤")
        return []
    
    async def start_bot(self, config: BotConfig) -> bool:
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if config.bot_id in self.bots:
                logger.warning(f"‚ö†Ô∏è –ë–æ—Ç {config.bot_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
            bot_instance = BotInstance(config, self.backend_api_url)
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            success = await bot_instance.start()
            if success:
                self.bots[config.bot_id] = bot_instance
                logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω –±–æ—Ç {config.bot_id}: {config.name}")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç {config.bot_id}: {config.name}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {config.bot_id}: {e}")
            logger.error(traceback.format_exc())
            return False
    
    async def stop_bot(self, bot_id: int):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if bot_id not in self.bots:
                logger.warning(f"‚ö†Ô∏è –ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            bot_instance = self.bots[bot_id]
            await bot_instance.stop()
            del self.bots[bot_id]
            
            logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–æ—Ç {bot_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_id}: {e}")
            logger.error(traceback.format_exc())
    
    async def restart_bot(self, bot_id: int):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ {bot_id}")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        await self.stop_bot(bot_id)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫
        bots = await self.get_active_bots()
        for bot_config in bots:
            if bot_config.bot_id == bot_id:
                await self.start_bot(bot_config)
                break
    
    async def sync_bots(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ —Å Backend API"""
        try:
            active_bots = await self.get_active_bots()
            active_bot_ids = {bot.bot_id for bot in active_bots}
            current_bot_ids = set(self.bots.keys())
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã
            for bot_id in current_bot_ids - active_bot_ids:
                logger.info(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç {bot_id}")
                await self.stop_bot(bot_id)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –±–æ—Ç—ã
            for bot_config in active_bots:
                if bot_config.bot_id not in current_bot_ids:
                    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –±–æ—Ç {bot_config.bot_id}: {bot_config.name}")
                    await self.start_bot(bot_config)
            
            logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(self.bots)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤: {e}")
            logger.error(traceback.format_exc())
    
    async def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ MultiBotManager...")
        
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
        await self.webhook_server.start()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        await self.sync_bots()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        asyncio.create_task(self._background_monitor())
        
        logger.info(f"‚úÖ MultiBotManager –∑–∞–ø—É—â–µ–Ω —Å {len(self.bots)} –±–æ—Ç–∞–º–∏")
    
    async def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MultiBotManager...")
        
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞
        await self.webhook_server.stop()
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        for bot_id in list(self.bots.keys()):
            await self.stop_bot(bot_id)
        
        logger.info("‚úÖ MultiBotManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def handle_bot_change(self, bot_id: int, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–µ–±—Ö—É–∫–æ–º/–ø–ª–∞–Ω–æ–≤–æ)."""
        try:
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–æ—Ç–∞ {bot_id}: {action}")
            if action == "deleted":
                await self.stop_bot(bot_id)
                logger.info(f"üóëÔ∏è –ë–æ—Ç {bot_id} —É–¥–∞–ª–µ–Ω")
            elif action in ["created", "updated", "status_changed"]:
                await self.sync_bots()
                logger.info(f"üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ {bot_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–æ—Ç–∞ {bot_id}: {e}")
    
    async def _background_monitor(self):
        """–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"""
        while self.is_running:
            try:
                await asyncio.sleep(self.config_check_interval)
                
                if time.time() - self.last_config_check > self.config_check_interval:
                    await self.sync_bots()
                    self.last_config_check = time.time()
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(10)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = {
            "manager_running": self.is_running,
            "total_bots": len(self.bots),
            "running_bots": sum(1 for bot in self.bots.values() if bot.is_running),
            "total_messages": sum(bot.message_count for bot in self.bots.values()),
            "total_errors": sum(bot.error_count for bot in self.bots.values()),
            "bots": [bot.get_stats() for bot in self.bots.values()]
        }
        return stats
    
    def print_status(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        stats = self.get_stats()
        
        print("\n" + "="*50)
        print("üìä –°–¢–ê–¢–£–° MULTIBOTMANAGER")
        print("="*50)
        print(f"üîÑ –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω: {'‚úÖ' if stats['manager_running'] else '‚ùå'}")
        print(f"ü§ñ –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: {stats['total_bots']}")
        print(f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {stats['running_bots']}")
        print(f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}")
        print(f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['total_errors']}")
        print()
        
        for bot_stats in stats['bots']:
            status_icon = "üü¢" if bot_stats['is_running'] else "üî¥"
            uptime = f"{bot_stats['uptime_seconds']:.0f}s" if bot_stats['uptime_seconds'] > 0 else "N/A"
            print(f"{status_icon} ID {bot_stats['bot_id']}: {bot_stats['name']} | "
                  f"Uptime: {uptime} | "
                  f"Messages: {bot_stats['message_count']} | "
                  f"Errors: {bot_stats['error_count']}")
        
        print("="*50)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å Backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é docker service name)
    backend_api_url = os.getenv("BACKEND_API_URL", "http://backend:8000")
    manager = MultiBotManager(backend_api_url=backend_api_url)
    
    try:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        await manager.start_all()
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
        while True:
            await asyncio.sleep(30)
            manager.print_status()
            
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await manager.stop_all()

if __name__ == "__main__":
    asyncio.run(main()) 