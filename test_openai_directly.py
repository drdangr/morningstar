#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import openai
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

def test_openai_direct():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ OpenAI API"""
    print("ü§ñ –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –û–ë–†–ê–©–ï–ù–ò–Ø –ö OPENAI API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
        return False
    
    print(f"üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:8]}...{api_key[-4:]}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = openai.OpenAI(api_key=api_key)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = ['AI –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–í–æ–π–Ω–∞', '–ö—É–ª—å—Ç—É—Ä–∞', '–ù–∞—É–∫–∞']
    topics_str = ', '.join(categories)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–∫–∞–∫ –≤ N8N)
    prompt = f"""–û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π –ø–æ—Å—Ç—ã –ø–æ —Ç–µ–º–∞–º: {topics_str}.

–ü—Ä–∞–≤–∏–ª–æ: summary = "NULL" –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –ù–ï –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ù–ò –ö –û–î–ù–û–ô –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º.

–í–æ–∑–≤—Ä–∞—â–∞–π JSON: {{"results": [{{"id": "post_id", "summary": "—Ä–µ–∑—é–º–µ –∏–ª–∏ NULL", "importance": 8, "urgency": 6, "significance": 7, "category": "–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã"}}]}}

–í–ê–ñ–ù–û: category –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: {topics_str} –∏–ª–∏ "NULL"

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ –°–ú–´–°–õ–£."""

    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
    test_posts = [
        {
            "id": "test_1",
            "text": "OpenAI –≤—ã–ø—É—Å—Ç–∏–ª–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é GPT-4o —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            "channel": "Tech News",
            "views": 1000,
            "date": "2025-06-10",
            "url": "https://t.me/test/1"
        },
        {
            "id": "test_2", 
            "text": "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –¥—Ä–æ–Ω—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ –≤–æ–µ–Ω–Ω—É—é –±–∞–∑—É –≤ –†–æ—Å—Å–∏–∏, –µ—Å—Ç—å –∂–µ—Ä—Ç–≤—ã",
            "channel": "War News",
            "views": 5000,
            "date": "2025-06-10",
            "url": "https://t.me/test/2"
        }
    ]
    
    print(f"\nüìù –¢–ï–°–¢–ò–†–£–ï–ú –ü–†–û–ú–ü–¢:")
    print("-" * 30)
    print(prompt)
    print("-" * 30)
    
    print(f"\nüìÑ –¢–ï–°–¢–û–í–´–ï –ü–û–°–¢–´:")
    for post in test_posts:
        print(f"   {post['id']}: {post['text'][:50]}...")
    
    try:
        print(f"\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenAI...")
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –ø–æ—Å—Ç—ã:\n\n{json.dumps(test_posts, ensure_ascii=False)}"}
            ],
            max_tokens=6000,
            temperature=0.3,
            response_format={"type": "json_object"}
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens}")
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        content = response.choices[0].message.content
        print(f"\nüìã RAW –û–¢–í–ï–¢:")
        print("-" * 30)
        print(content)
        print("-" * 30)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            parsed = json.loads(content)
            results = parsed.get('results', [])
            
            print(f"\n‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω!")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            
            for i, result in enumerate(results):
                print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}:")
                print(f"   ID: {result.get('id')}")
                print(f"   Summary: {result.get('summary')}")
                print(f"   Category: {result.get('category')}")
                print(f"   Importance: {result.get('importance')}")
                print(f"   Urgency: {result.get('urgency')}")
                print(f"   Significance: {result.get('significance')}")
                
            return True
            
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        return False

def main():
    success = test_openai_direct()
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:")
    if success:
        print("‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üí° –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ N8N workflow –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–æ–≤")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å OpenAI API!")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á, –ª–∏–º–∏—Ç—ã, –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

if __name__ == "__main__":
    main() 