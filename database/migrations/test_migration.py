#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ multi-tenant database migration
–ó–∞–ø—É—Å–∫–∞–µ—Ç SQL –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
"""

import os
import sys
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
sys.path.append('../../backend')

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –ë–î"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π PostgreSQL (–∏–∑ .env —Ñ–∞–π–ª–∞)
    config = {
        'host': 'localhost',
        'port': '5432',
        'database': 'digest_bot',
        'user': 'digest_bot',
        'password': 'SecurePassword123!'
    }
    
    try:
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL ({config['host']}:{config['port']})...")
        conn = psycopg2.connect(**config)
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ PostgreSQL –ë–î digest_bot")
        return conn
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –ë–î: {e}")
        return None

def run_sql_file(conn, filename):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞"""
    try:
        print(f"üìÑ –í—ã–ø–æ–ª–Ω—è—é {filename}...")
        
        with open(filename, 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        cursor = conn.cursor()
        
        # –î–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if filename == '000_run_all_migrations.sql':
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –±–ª–æ–∫–∏ –ø–æ echo –∫–æ–º–∞–Ω–¥–∞–º
            sql_blocks = sql_content.split('\\echo')
            
            for i, block in enumerate(sql_blocks):
                if block.strip():
                    # –£–±–∏—Ä–∞–µ–º echo –∫–æ–º–∞–Ω–¥—ã –∏ \\i –∫–æ–º–∞–Ω–¥—ã (include)
                    clean_block = []
                    for line in block.split('\n'):
                        line = line.strip()
                        if line and not line.startswith('\\i') and not line.startswith('\\echo'):
                            clean_block.append(line)
                    
                    if clean_block:
                        block_sql = '\n'.join(clean_block)
                        try:
                            cursor.execute(block_sql)
                            print(f"  ‚úÖ –ë–ª–æ–∫ {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        except Exception as block_error:
                            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ {i+1}: {block_error}")
        else:
            # –û–±—ã—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            cursor.execute(sql_content)
            
        cursor.close()
        print(f"‚úÖ {filename} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {filename}: {e}")
        return False

def run_individual_migrations(conn):
    """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö migration —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
    migration_files = [
        '001_create_public_bots.sql',
        '002_create_bot_relationships.sql', 
        '003_create_posts_cache.sql',
        '004_create_processed_data.sql',
        '005_create_multitenant_users.sql',
        '006_create_llm_management.sql'
    ]
    
    success_count = 0
    for filename in migration_files:
        if run_sql_file(conn, filename):
            success_count += 1
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
    
    return success_count, len(migration_files)

def check_migration_results(conn):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    cursor.execute("""
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name IN ('public_bots', 'bot_channels', 'bot_categories', 
                          'posts_cache', 'processed_data', 'bot_users', 
                          'user_subscriptions', 'llm_providers', 'llm_settings',
                          'billing_transactions')
        ORDER BY table_name
    """)
    
    tables = cursor.fetchall()
    print(f"üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ({len(tables)}):")
    for table in tables:
        print(f"  ‚úÖ {table[0]}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–π posts_cache
    cursor.execute("""
        SELECT schemaname, tablename 
        FROM pg_tables 
        WHERE tablename LIKE 'posts_cache_%'
        ORDER BY tablename
    """)
    
    partitions = cursor.fetchall()
    print(f"\nüìÖ –ü–∞—Ä—Ç–∏—Ü–∏–∏ posts_cache ({len(partitions)}):")
    for partition in partitions:
        print(f"  ‚úÖ {partition[1]}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–π processed_data
    cursor.execute("""
        SELECT schemaname, tablename 
        FROM pg_tables 
        WHERE tablename LIKE 'processed_data_p%'
        ORDER BY tablename
    """)
    
    partitions = cursor.fetchall()
    print(f"\nüîÄ –ü–∞—Ä—Ç–∏—Ü–∏–∏ processed_data ({len(partitions)}):")
    for partition in partitions:
        print(f"  ‚úÖ {partition[1]}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    cursor.execute("SELECT provider_name, is_active FROM llm_providers ORDER BY provider_name")
    providers = cursor.fetchall()
    print(f"\nü§ñ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã ({len(providers)}):")
    for provider in providers:
        status = "üü¢" if provider[1] else "üî¥"
        print(f"  {status} {provider[0]}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ default PublicBot
    cursor.execute("SELECT bot_name, status, default_language FROM public_bots")
    bots = cursor.fetchall()
    print(f"\nü§ñ PublicBots ({len(bots)}):")
    for bot in bots:
        print(f"  ü§ñ {bot[0]} (status: {bot[1]}, language: {bot[2]})")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π bot-channel
    cursor.execute("""
        SELECT pb.bot_name, COUNT(bc.channel_id) as channels_count
        FROM public_bots pb
        LEFT JOIN bot_channels bc ON pb.id = bc.public_bot_id
        GROUP BY pb.bot_name
    """)
    bot_channels = cursor.fetchall()
    print(f"\nüîó –°–≤—è–∑–∏ –±–æ—Ç-–∫–∞–Ω–∞–ª:")
    for bot_channel in bot_channels:
        print(f"  ü§ñ {bot_channel[0]}: {bot_channel[1]} –∫–∞–Ω–∞–ª–æ–≤")
    
    cursor.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Multi-tenant Database Migration")
    print("=" * 60)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = get_db_connection()
    if not conn:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return False
    
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    print("\nüì¶ –ó–∞–ø—É—Å–∫ migration —Ñ–∞–π–ª–æ–≤...")
    success_count, total_count = run_individual_migrations(conn)
    
    if success_count == total_count:
        print(f"‚úÖ –í—Å–µ {total_count} –º–∏–≥—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count} –∏–∑ {total_count} –º–∏–≥—Ä–∞—Ü–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    check_migration_results(conn)
    
    conn.close()
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ migration –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return success_count == total_count

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 