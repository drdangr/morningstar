-- Master Migration Script: Multi-tenant Database Schema
-- –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

-- –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è atomic migration
BEGIN;

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –º–∏–≥—Ä–∞—Ü–∏–π
CREATE TABLE IF NOT EXISTS schema_migrations (
    id SERIAL PRIMARY KEY,
    migration_name VARCHAR(255) NOT NULL UNIQUE,
    executed_at TIMESTAMP DEFAULT NOW(),
    checksum VARCHAR(64)
);

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
CREATE OR REPLACE FUNCTION log_migration(migration_name TEXT, checksum TEXT DEFAULT NULL)
RETURNS VOID AS $$
BEGIN
    INSERT INTO schema_migrations (migration_name, checksum)
    VALUES (migration_name, checksum)
    ON CONFLICT (migration_name) DO NOTHING;
    
    RAISE NOTICE 'Migration executed: %', migration_name;
END;
$$ LANGUAGE plpgsql;

-- Migration 001: Public Bots
\echo 'Executing Migration 001: Create public_bots table...'
\i 001_create_public_bots.sql
SELECT log_migration('001_create_public_bots');

-- Migration 002: Bot Relationships  
\echo 'Executing Migration 002: Create bot relationships tables...'
\i 002_create_bot_relationships.sql
SELECT log_migration('002_create_bot_relationships');

-- Migration 003: Posts Cache
\echo 'Executing Migration 003: Create posts_cache with partitioning...'
\i 003_create_posts_cache.sql
SELECT log_migration('003_create_posts_cache');

-- Migration 004: Processed Data
\echo 'Executing Migration 004: Create processed_data with partitioning...'
\i 004_create_processed_data.sql
SELECT log_migration('004_create_processed_data');

-- Migration 005: Multitenant Users
\echo 'Executing Migration 005: Create multitenant users and subscriptions...'
\i 005_create_multitenant_users.sql
SELECT log_migration('005_create_multitenant_users');

-- Migration 006: LLM Management
\echo 'Executing Migration 006: Create LLM management and billing...'
\i 006_create_llm_management.sql
SELECT log_migration('006_create_llm_management');

-- Run migration 012: Add processing_status to processed_data
\i 012_add_processing_status_to_processed_data.sql

-- Run migration 013: Add boolean flags to processed_data
\i 013_add_boolean_flags_to_processed_data.sql

-- –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ default PublicBot
INSERT INTO public_bots (
    bot_name, 
    bot_token, 
    description, 
    ai_prompt_template,
    categorization_prompt,
    summarization_prompt,
    welcome_message
) VALUES (
    'default_digest_bot',
    'TEMP_TOKEN_TO_BE_REPLACED', -- –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    '–ì–ª–∞–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç-–±–æ—Ç (–º–∏–≥—Ä–∞—Ü–∏—è –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)',
    '–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å—Ç—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∫—Ä–∞—Ç–∫–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',
    '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –ø–æ—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–µ–º–∞–Ω—Ç–∏–∫—É, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.',
    '–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –°–æ—Ö—Ä–∞–Ω–∏ –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª—è.',
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–∞–π–¥–∂–µ—Å—Ç-–±–æ—Ç! üì∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /categories –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.'
) ON CONFLICT (bot_name) DO NOTHING;

-- –ü–æ–ª—É—á–µ–Ω–∏–µ ID default –±–æ—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
DO $$
DECLARE
    default_bot_id INTEGER;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º ID default –±–æ—Ç–∞
    SELECT id INTO default_bot_id FROM public_bots WHERE bot_name = 'default_digest_bot';
    
    -- Default bot —Å–æ–∑–¥–∞–Ω, –∫–∞–Ω–∞–ª—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    RAISE NOTICE 'Default bot created with ID: %', default_bot_id;
END $$;

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LLM –¥–ª—è default –±–æ—Ç–∞
DO $$
DECLARE
    default_bot_id INTEGER;
    openai_provider_id INTEGER;
BEGIN
    SELECT id INTO default_bot_id FROM public_bots WHERE bot_name = 'default_digest_bot';
    SELECT id INTO openai_provider_id FROM llm_providers WHERE provider_name = 'openai';
    
    INSERT INTO llm_settings (
        public_bot_id,
        llm_provider_id,
        model_name,
        max_tokens,
        temperature,
        system_prompt,
        is_active
    ) VALUES (
        default_bot_id,
        openai_provider_id,
        'gpt-4o-mini',
        4000,
        0.7,
        '–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-—Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',
        TRUE
    ) ON CONFLICT DO NOTHING;
    
    RAISE NOTICE 'LLM settings configured for default bot';
END $$;

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è multi-tenant —Å—Ö–µ–º–æ–π
CREATE OR REPLACE FUNCTION create_new_public_bot(
    p_bot_name VARCHAR,
    p_bot_token VARCHAR,
    p_description TEXT DEFAULT NULL,
    p_ai_prompt_template TEXT DEFAULT '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AI –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.',
    p_language VARCHAR DEFAULT 'ru'
)
RETURNS INTEGER AS $$
DECLARE
    new_bot_id INTEGER;
BEGIN
    INSERT INTO public_bots (
        bot_name, bot_token, description, ai_prompt_template, default_language
    ) VALUES (
        p_bot_name, p_bot_token, p_description, p_ai_prompt_template, p_language
    ) RETURNING id INTO new_bot_id;
    
    -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ LLM (OpenAI –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    INSERT INTO llm_settings (
        public_bot_id, llm_provider_id, model_name, is_active
    ) SELECT 
        new_bot_id, id, 'gpt-4o-mini', TRUE
    FROM llm_providers 
    WHERE provider_name = 'openai' 
    LIMIT 1;
    
    RETURN new_bot_id;
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏
CREATE OR REPLACE FUNCTION clone_bot_settings(source_bot_id INTEGER, target_bot_id INTEGER)
RETURNS VOID AS $$
BEGIN
    -- –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    INSERT INTO bot_channels (public_bot_id, channel_id, weight, is_active)
    SELECT target_bot_id, channel_id, weight, is_active
    FROM bot_channels
    WHERE public_bot_id = source_bot_id
    ON CONFLICT DO NOTHING;
    
    -- –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    INSERT INTO bot_categories (public_bot_id, category_id, custom_ai_instructions, weight, is_active)
    SELECT target_bot_id, category_id, custom_ai_instructions, weight, is_active
    FROM bot_categories
    WHERE public_bot_id = source_bot_id
    ON CONFLICT DO NOTHING;
    
    RAISE NOTICE 'Settings cloned from bot % to bot %', source_bot_id, target_bot_id;
END;
$$ LANGUAGE plpgsql;

-- –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
DO $$
DECLARE
    bots_count INTEGER;
    llm_providers_count INTEGER;
    partitions_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO bots_count FROM public_bots;
    SELECT COUNT(*) INTO llm_providers_count FROM llm_providers;
    SELECT COUNT(*) INTO partitions_count FROM pg_tables WHERE tablename LIKE '%partition%';
    
    RAISE NOTICE '=== MIGRATION COMPLETED SUCCESSFULLY ===';
    RAISE NOTICE 'Public Bots created: %', bots_count;
    RAISE NOTICE 'LLM Providers configured: %', llm_providers_count;
    RAISE NOTICE 'Database partitions created: %', partitions_count;
    RAISE NOTICE 'Multi-tenant schema ready for production!';
    RAISE NOTICE 'Next: Add channels and categories through Admin Panel';
END $$;

-- –ö–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
COMMIT;

\echo 'Multi-tenant database migration completed successfully!'
\echo 'Next steps:'
\echo '1. Update Backend API models to support multi-tenant schema'
\echo '2. Create Python AI Services (SummarizationService + CategorizationService)'
\echo '3. Archive and remove N8N workflows'
\echo '4. Test the new architecture with real data'

-- All migrations completed 