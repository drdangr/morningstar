import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  Tabs,
  Tab,
  Grid,
  Card,
  CardContent,
  CardActions,
  Button,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Switch,
  FormControlLabel,
  Alert,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  LinearProgress,
  Tooltip,
  Badge
} from '@mui/material';
import {
  Settings as SettingsIcon,
  Psychology as AIIcon,
  Speed as PerformanceIcon,
  AttachMoney as CostIcon,
  ExpandMore as ExpandMoreIcon,
  Edit as EditIcon,
  Save as SaveIcon,
  Refresh as RefreshIcon,
  TrendingUp as TrendingUpIcon,
  Memory as MemoryIcon,
  Timer as TimerIcon,
  CompareArrows as CompareIcon
} from '@mui/icons-material';
import apiService from '../services/api';

/**
 * LLM Settings Page v5 - –í—ã–±–æ—Ä —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 * Task 2.1: –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Ä–∞–∑–Ω—ã—Ö LLM –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
const AI_SERVICES = {
  categorization: {
    name: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è',
    description: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å—Ç–æ–≤',
    icon: <AIIcon />,
    color: 'primary',
    recommended_models: ['gpt-4o-mini', 'gpt-3.5-turbo'],
    priority: 'speed' // speed, quality, balance
  },
  summarization: {
    name: '–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è',
    description: '–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–∏—Ö —Ä–µ–∑—é–º–µ –ø–æ—Å—Ç–æ–≤',
    icon: <MemoryIcon />,
    color: 'secondary',
    recommended_models: ['gpt-4o', 'gpt-4'],
    priority: 'quality'
  },
  analysis: {
    name: '–ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏',
    description: '–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏',
    icon: <TrendingUpIcon />,
    color: 'success',
    recommended_models: ['gpt-4o-mini', 'gpt-4o'],
    priority: 'balance'
  }
};

// –ú–æ–¥–µ–ª—ã —Å –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ (–∏–∑ –Ω–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞)
const MODEL_SPECS = {
  'gpt-4o-mini': {
    provider: 'OpenAI',
    input_price: 0.15,
    output_price: 0.60,
    context_window: 128000,
    speed: 'fast',
    quality: 'good',
    category: 'budget',
    description: '–ë—ã—Å—Ç—Ä–∞—è –∏ –¥–µ—à—ë–≤–∞—è, —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ'
  },
  'gpt-4o': {
    provider: 'OpenAI',
    input_price: 2.50,
    output_price: 10.00,
    context_window: 128000,
    speed: 'fast',
    quality: 'excellent',
    category: 'flagship',
    description: '–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è, –±—ã—Å—Ç—Ä–∞—è, –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è'
  },
  'gpt-3.5-turbo': {
    provider: 'OpenAI',
    input_price: 0.50,
    output_price: 1.50,
    context_window: 16385,
    speed: 'very_fast',
    quality: 'good',
    category: 'budget',
    description: '–ë–∞–∑–æ–≤–∞—è, –±—é–¥–∂–µ—Ç–Ω–∞—è'
  },
  'gpt-4': {
    provider: 'OpenAI',
    input_price: 30.00,
    output_price: 60.00,
    context_window: 8192,
    speed: 'medium',
    quality: 'excellent',
    category: 'premium',
    description: '–£–º–Ω–∞—è –º–æ–¥–µ–ª—å —Å –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º'
  }
};

function LLMSettingsPage() {
  const [activeTab, setActiveTab] = useState('services');
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ LLM
  const [llmSettings, setLlmSettings] = useState({});
  const [availableModels, setAvailableModels] = useState([]);
  const [modelComparison, setModelComparison] = useState(null);
  const [costAnalysis, setCostAnalysis] = useState(null);
  
  // –î–∏–∞–ª–æ–≥–∏
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [editingService, setEditingService] = useState(null);
  const [comparisonDialogOpen, setComparisonDialogOpen] = useState(false);

  useEffect(() => {
    loadLLMSettings();
    loadAvailableModels();
  }, []);

  const loadLLMSettings = async () => {
    setLoading(true);
    try {
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
      const mockSettings = {
        categorization: { model_name: 'gpt-4o-mini', max_tokens: 2000, temperature: 0.3 },
        summarization: { model_name: 'gpt-4o', max_tokens: 4000, temperature: 0.7 },
        analysis: { model_name: 'gpt-4o-mini', max_tokens: 1500, temperature: 0.5 }
      };
      setLlmSettings(mockSettings);
      
      // Mock –∞–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
      const mockCostAnalysis = {
        categorization: { avg_input_tokens: 800, avg_output_tokens: 200, monthly_requests: 5000 },
        summarization: { avg_input_tokens: 1200, avg_output_tokens: 800, monthly_requests: 3000 },
        analysis: { avg_input_tokens: 600, avg_output_tokens: 300, monthly_requests: 2000 }
      };
      setCostAnalysis(mockCostAnalysis);
      
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ LLM: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const loadAvailableModels = async () => {
    try {
      // Mock –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
      setAvailableModels(Object.keys(MODEL_SPECS));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:', err);
    }
  };

  const handleServiceModelChange = async (serviceKey, modelName) => {
    setSaving(true);
    try {
      // Mock –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      setLlmSettings(prev => ({
        ...prev,
        [serviceKey]: {
          ...prev[serviceKey],
          model_name: modelName
        }
      }));
      
      setSuccessMessage(`–ú–æ–¥–µ–ª—å –¥–ª—è ${AI_SERVICES[serviceKey].name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${modelName}`);
      
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + err.message);
    } finally {
      setSaving(false);
    }
  };

  const runModelComparison = async () => {
    setLoading(true);
    try {
      // Mock —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
      const mockComparison = {
        categorization: {
          'gpt-4o-mini': { accuracy: 0.92, speed: 1.2, cost: 0.001 },
          'gpt-3.5-turbo': { accuracy: 0.88, speed: 0.8, cost: 0.0008 },
          'gpt-4o': { accuracy: 0.95, speed: 1.1, cost: 0.005 }
        },
        summarization: {
          'gpt-4o': { quality: 0.96, speed: 1.3, cost: 0.008 },
          'gpt-4': { quality: 0.94, speed: 0.9, cost: 0.025 },
          'gpt-4o-mini': { quality: 0.89, speed: 1.4, cost: 0.002 }
        }
      };
      setModelComparison(mockComparison);
      setComparisonDialogOpen(true);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const getModelBadgeColor = (category) => {
    switch (category) {
      case 'budget': return 'success';
      case 'flagship': return 'primary';
      case 'premium': return 'warning';
      default: return 'default';
    }
  };

  const getSpeedIcon = (speed) => {
    switch (speed) {
      case 'very_fast': return 'üöÄ';
      case 'fast': return '‚ö°';
      case 'medium': return 'üèÉ';
      case 'slow': return 'üêå';
      default: return '‚è±Ô∏è';
    }
  };

  const getQualityStars = (quality) => {
    switch (quality) {
      case 'excellent': return '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê';
      case 'very_good': return '‚≠ê‚≠ê‚≠ê‚≠ê';
      case 'good': return '‚≠ê‚≠ê‚≠ê';
      case 'fair': return '‚≠ê‚≠ê';
      default: return '‚≠ê';
    }
  };

  const calculateServiceCost = (serviceKey, modelName) => {
    if (!costAnalysis || !costAnalysis[serviceKey]) return null;
    
    const serviceData = costAnalysis[serviceKey];
    const modelData = MODEL_SPECS[modelName];
    
    if (!modelData) return null;
    
    const avgTokensInput = serviceData.avg_input_tokens || 1000;
    const avgTokensOutput = serviceData.avg_output_tokens || 500;
    
    const inputCost = (avgTokensInput / 1_000_000) * modelData.input_price;
    const outputCost = (avgTokensOutput / 1_000_000) * modelData.output_price;
    
    return {
      per_request: inputCost + outputCost,
      per_1k_requests: (inputCost + outputCost) * 1000,
      monthly_estimate: (inputCost + outputCost) * (serviceData.monthly_requests || 1000)
    };
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
  const ServiceCard = ({ serviceKey, serviceConfig }) => {
    const currentModel = llmSettings[serviceKey]?.model_name || 'gpt-4o-mini';
    const modelSpec = MODEL_SPECS[currentModel];
    const cost = calculateServiceCost(serviceKey, currentModel);

    return (
      <Card sx={{ height: '100%' }}>
        <CardContent>
          <Box display="flex" alignItems="center" mb={2}>
            {serviceConfig.icon}
            <Box ml={2}>
              <Typography variant="h6">{serviceConfig.name}</Typography>
              <Typography variant="body2" color="text.secondary">
                {serviceConfig.description}
              </Typography>
            </Box>
          </Box>

          <Box mb={2}>
            <FormControl fullWidth size="small">
              <InputLabel>–ú–æ–¥–µ–ª—å</InputLabel>
              <Select
                value={currentModel}
                label="–ú–æ–¥–µ–ª—å"
                onChange={(e) => handleServiceModelChange(serviceKey, e.target.value)}
                disabled={saving}
              >
                {Object.keys(MODEL_SPECS).map(modelName => (
                  <MenuItem key={modelName} value={modelName}>
                    <Box display="flex" alignItems="center" width="100%">
                      <Typography variant="body2" sx={{ flexGrow: 1 }}>
                        {modelName}
                      </Typography>
                      <Chip 
                        label={MODEL_SPECS[modelName].category}
                        size="small"
                        color={getModelBadgeColor(MODEL_SPECS[modelName].category)}
                        sx={{ ml: 1 }}
                      />
                    </Box>
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Box>

          {modelSpec && (
            <Box>
              <Box display="flex" justifyContent="space-between" mb={1}>
                <Typography variant="body2" color="text.secondary">
                  –°–∫–æ—Ä–æ—Å—Ç—å: {getSpeedIcon(modelSpec.speed)}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  –ö–∞—á–µ—Å—Ç–≤–æ: {getQualityStars(modelSpec.quality)}
                </Typography>
              </Box>
              
              <Box display="flex" justifyContent="space-between" mb={1}>
                <Typography variant="body2" color="text.secondary">
                  –ö–æ–Ω—Ç–µ–∫—Å—Ç: {modelSpec.context_window.toLocaleString()}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {modelSpec.provider}
                </Typography>
              </Box>

              {cost && (
                <Box mt={2} p={1} bgcolor="grey.100" borderRadius={1}>
                  <Typography variant="body2" color="text.secondary" gutterBottom>
                    üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:
                  </Typography>
                  <Typography variant="body2">
                    –ó–∞ –∑–∞–ø—Ä–æ—Å: ${cost.per_request.toFixed(6)}
                  </Typography>
                  <Typography variant="body2">
                    –í –º–µ—Å—è—Ü: ${cost.monthly_estimate.toFixed(2)}
                  </Typography>
                </Box>
              )}
            </Box>
          )}
        </CardContent>

        <CardActions>
          <Button 
            size="small" 
            onClick={() => {
              setEditingService(serviceKey);
              setEditDialogOpen(true);
            }}
            startIcon={<EditIcon />}
          >
            –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
          </Button>
        </CardActions>
      </Card>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
  const ModelsComparisonTable = () => (
    <TableContainer component={Paper}>
      <Table size="small">
        <TableHead>
          <TableRow>
            <TableCell>–ú–æ–¥–µ–ª—å</TableCell>
            <TableCell>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</TableCell>
            <TableCell>–°–∫–æ—Ä–æ—Å—Ç—å</TableCell>
            <TableCell>–ö–∞—á–µ—Å—Ç–≤–æ</TableCell>
            <TableCell>–ö–æ–Ω—Ç–µ–∫—Å—Ç</TableCell>
            <TableCell>–¶–µ–Ω–∞ –≤—Ö–æ–¥</TableCell>
            <TableCell>–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥</TableCell>
            <TableCell>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {Object.entries(MODEL_SPECS).map(([modelName, spec]) => (
            <TableRow key={modelName}>
              <TableCell>
                <Typography variant="body2" fontWeight="bold">
                  {modelName}
                </Typography>
              </TableCell>
              <TableCell>
                <Chip 
                  label={spec.category}
                  size="small"
                  color={getModelBadgeColor(spec.category)}
                />
              </TableCell>
              <TableCell>{getSpeedIcon(spec.speed)}</TableCell>
              <TableCell>{getQualityStars(spec.quality)}</TableCell>
              <TableCell>{spec.context_window.toLocaleString()}</TableCell>
              <TableCell>${spec.input_price}/1M</TableCell>
              <TableCell>${spec.output_price}/1M</TableCell>
              <TableCell>
                <Box>
                  {Object.entries(AI_SERVICES)
                    .filter(([, config]) => config.recommended_models.includes(modelName))
                    .map(([serviceKey, config]) => (
                      <Chip 
                        key={serviceKey}
                        label={config.name}
                        size="small"
                        variant="outlined"
                        sx={{ mr: 0.5, mb: 0.5 }}
                      />
                    ))
                  }
                </Box>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );

  return (
    <Box p={3}>
      <Box mb={3}>
        <Typography variant="h4" gutterBottom>
          <SettingsIcon sx={{ mr: 2, verticalAlign: 'middle' }} />
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –ú–æ–¥–µ–ª–µ–π
        </Typography>
        <Typography variant="body1" color="text.secondary">
          –í—ã–±–æ—Ä —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤
        </Typography>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError('')}>
          {error}
        </Alert>
      )}

      {successMessage && (
        <Alert severity="success" sx={{ mb: 2 }} onClose={() => setSuccessMessage('')}>
          {successMessage}
        </Alert>
      )}

      <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)} sx={{ mb: 3 }}>
        <Tab label="–°–µ—Ä–≤–∏—Å—ã AI" value="services" />
        <Tab label="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π" value="comparison" />
        <Tab label="–ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏" value="cost" />
      </Tabs>

      {loading && <LinearProgress sx={{ mb: 2 }} />}

      {activeTab === 'services' && (
        <Box>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
            <Typography variant="h6">
              –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
            </Typography>
            <Box>
              <Button
                variant="outlined"
                startIcon={<CompareIcon />}
                onClick={runModelComparison}
                disabled={loading}
                sx={{ mr: 1 }}
              >
                –°—Ä–∞–≤–Ω–∏—Ç—å –º–æ–¥–µ–ª–∏
              </Button>
              <Button
                variant="outlined"
                startIcon={<RefreshIcon />}
                onClick={loadLLMSettings}
                disabled={loading}
              >
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </Box>
          </Box>

          <Grid container spacing={3}>
            {Object.entries(AI_SERVICES).map(([serviceKey, serviceConfig]) => (
              <Grid item xs={12} md={4} key={serviceKey}>
                <ServiceCard serviceKey={serviceKey} serviceConfig={serviceConfig} />
              </Grid>
            ))}
          </Grid>
        </Box>
      )}

      {activeTab === 'comparison' && (
        <Box>
          <Typography variant="h6" gutterBottom>
            –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
          </Typography>
          <ModelsComparisonTable />
        </Box>
      )}

      {activeTab === 'cost' && (
        <Box>
          <Typography variant="h6" gutterBottom>
            –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
          </Typography>
          
          {costAnalysis && (
            <Grid container spacing={3}>
              {Object.entries(AI_SERVICES).map(([serviceKey, serviceConfig]) => {
                const currentModel = llmSettings[serviceKey]?.model_name || 'gpt-4o-mini';
                const cost = calculateServiceCost(serviceKey, currentModel);
                
                return (
                  <Grid item xs={12} md={4} key={serviceKey}>
                    <Card>
                      <CardContent>
                        <Box display="flex" alignItems="center" mb={2}>
                          {serviceConfig.icon}
                          <Typography variant="h6" sx={{ ml: 1 }}>
                            {serviceConfig.name}
                          </Typography>
                        </Box>
                        
                        <Typography variant="body2" color="text.secondary" gutterBottom>
                          –ú–æ–¥–µ–ª—å: {currentModel}
                        </Typography>
                        
                        {cost && (
                          <Box>
                            <Typography variant="body2">
                              –ó–∞ –∑–∞–ø—Ä–æ—Å: ${cost.per_request.toFixed(6)}
                            </Typography>
                            <Typography variant="body2">
                              –ó–∞ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤: ${cost.per_1k_requests.toFixed(4)}
                            </Typography>
                            <Typography variant="body2" fontWeight="bold">
                              –ú–µ—Å—è—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: ${cost.monthly_estimate.toFixed(2)}
                            </Typography>
                          </Box>
                        )}
                      </CardContent>
                    </Card>
                  </Grid>
                );
              })}
            </Grid>
          )}
        </Box>
      )}

      {/* –î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ */}
      <Dialog 
        open={editDialogOpen} 
        onClose={() => setEditDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {editingService && AI_SERVICES[editingService]?.name}
        </DialogTitle>
        <DialogContent>
          {editingService && (
            <Box pt={1}>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                {AI_SERVICES[editingService].description}
              </Typography>
              
              <FormControl fullWidth sx={{ mt: 2 }}>
                <InputLabel>–ú–æ–¥–µ–ª—å</InputLabel>
                <Select
                  value={llmSettings[editingService]?.model_name || 'gpt-4o-mini'}
                  label="–ú–æ–¥–µ–ª—å"
                  onChange={(e) => handleServiceModelChange(editingService, e.target.value)}
                >
                  {Object.keys(MODEL_SPECS).map(modelName => (
                    <MenuItem key={modelName} value={modelName}>
                      {modelName} - {MODEL_SPECS[modelName].description}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              
              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
              <TextField
                fullWidth
                label="–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤"
                type="number"
                value={llmSettings[editingService]?.max_tokens || 4000}
                sx={{ mt: 2 }}
              />
              
              <TextField
                fullWidth
                label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"
                type="number"
                inputProps={{ min: 0, max: 2, step: 0.1 }}
                value={llmSettings[editingService]?.temperature || 0.3}
                sx={{ mt: 2 }}
              />
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEditDialogOpen(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            variant="contained" 
            onClick={() => setEditDialogOpen(false)}
            startIcon={<SaveIcon />}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π */}
      <Dialog 
        open={comparisonDialogOpen} 
        onClose={() => setComparisonDialogOpen(false)}
        maxWidth="lg"
        fullWidth
      >
        <DialogTitle>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π</DialogTitle>
        <DialogContent>
          {modelComparison && (
            <Box>
              {Object.entries(modelComparison).map(([serviceKey, results]) => (
                <Box key={serviceKey} mb={3}>
                  <Typography variant="h6" gutterBottom>
                    {AI_SERVICES[serviceKey].name}
                  </Typography>
                  <TableContainer component={Paper} sx={{ mb: 2 }}>
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell>–ú–æ–¥–µ–ª—å</TableCell>
                          <TableCell>–¢–æ—á–Ω–æ—Å—Ç—å/–ö–∞—á–µ—Å—Ç–≤–æ</TableCell>
                          <TableCell>–°–∫–æ—Ä–æ—Å—Ç—å (—Å–µ–∫)</TableCell>
                          <TableCell>–°—Ç–æ–∏–º–æ—Å—Ç—å ($)</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {Object.entries(results).map(([model, metrics]) => (
                          <TableRow key={model}>
                            <TableCell>{model}</TableCell>
                            <TableCell>
                              {((metrics.accuracy || metrics.quality) * 100).toFixed(1)}%
                            </TableCell>
                            <TableCell>{metrics.speed.toFixed(1)}</TableCell>
                            <TableCell>${metrics.cost.toFixed(6)}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                </Box>
              ))}
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setComparisonDialogOpen(false)}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}

export default LLMSettingsPage; 