import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Grid,
  LinearProgress,
  Chip,
  Button,
  Stack,
  Divider,
  Alert,
  CircularProgress,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Snackbar,
  Tooltip,
  IconButton,
  Collapse
} from '@mui/material';

import {
  Assessment as AssessmentIcon,
  Psychology as PsychologyIcon,
  SmartToy as SmartToyIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Pending as PendingIcon,
  RestartAlt as RestartAltIcon,
  Refresh as RefreshIcon,
  Visibility as VisibilityIcon,
  ExpandLess as ExpandLessIcon,
  ExpandMore as ExpandMoreIcon
} from '@mui/icons-material';

const AIResultsPage = () => {
  const [loading, setLoading] = useState(true);
  const [alert, setAlert] = useState({ show: false, type: 'info', message: '' });
  const [botsWithStats, setBotsWithStats] = useState([]);
  const [expandedBot, setExpandedBot] = useState(null);
  const [orchestratorStatus, setOrchestratorStatus] = useState(null);

  // üÜï –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–æ—Ç–∞–º
  const fetchBotsWithMultitenantStats = async () => {
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
      const botsResponse = await fetch('http://localhost:8000/api/public-bots');
      if (!botsResponse.ok) throw new Error('Failed to fetch bots');
      const allBots = await botsResponse.json();
      
      // 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const botsWithStatsPromises = allBots.map(async (bot) => {
        try {
          // AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
          const resultsResponse = await fetch(`http://localhost:8000/api/ai/results?bot_id=${bot.id}&limit=1000`);
          const results = resultsResponse.ok ? await resultsResponse.json() : [];
          
          // –ö–∞–Ω–∞–ª—ã –±–æ—Ç–∞
          const channelsResponse = await fetch(`http://localhost:8000/api/public-bots/${bot.id}/channels`);
          const botChannels = channelsResponse.ok ? await channelsResponse.json() : [];
          
          // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
          const categoriesResponse = await fetch(`http://localhost:8000/api/public-bots/${bot.id}/categories`);
          const botCategories = categoriesResponse.ok ? await categoriesResponse.json() : [];
          
          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
          const channelTelegramIds = botChannels.map(ch => ch.telegram_id);
          let postsStats = { total: 0, pending: 0, processing: 0, completed: 0, failed: 0 };
          
          if (channelTelegramIds.length > 0) {
            const postsStatsPromises = channelTelegramIds.map(async (channelId) => {
              try {
                const statsResponse = await fetch(`http://localhost:8000/api/posts/cache?channel_telegram_id=${channelId}&limit=1000`);
                if (statsResponse.ok) {
                  const posts = await statsResponse.json();
                  return posts;
                }
                return [];
              } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error);
                return [];
              }
            });
            
            const allChannelPosts = await Promise.all(postsStatsPromises);
            const flatPosts = allChannelPosts.flat();
            
            postsStats.total = flatPosts.length;
            postsStats.pending = flatPosts.filter(p => p.processing_status === 'pending').length;
            postsStats.processing = flatPosts.filter(p => p.processing_status === 'processing').length;
            postsStats.completed = flatPosts.filter(p => p.processing_status === 'completed').length;
            postsStats.failed = flatPosts.filter(p => p.processing_status === 'failed').length;
          }
          
          return {
            ...bot,
            ai_results_count: results.length,
            channels_count: botChannels.length,
            categories_count: botCategories.length,
            posts_stats: postsStats,
            last_ai_processing: results.length > 0 ? 
              Math.max(...results.map(r => new Date(r.processed_at).getTime())) : null,
            channels: botChannels,
            categories: botCategories,
            ai_results: results.slice(0, 5) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–≤—å—é
          };
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ ${bot.id}:`, error);
          return {
            ...bot,
            ai_results_count: 0,
            channels_count: 0,
            categories_count: 0,
            posts_stats: { total: 0, pending: 0, processing: 0, completed: 0, failed: 0 },
            last_ai_processing: null,
            channels: [],
            categories: [],
            ai_results: []
          };
        }
      });
      
      const botsWithStats = await Promise.all(botsWithStatsPromises);
      setBotsWithStats(botsWithStats);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤:', error);
      setBotsWithStats([]);
      showAlert('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤');
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ AI Orchestrator
  const fetchOrchestratorStatus = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/ai/orchestrator/live-status');
      if (response.ok) {
        const status = await response.json();
        setOrchestratorStatus(status);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Orchestrator:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const loadData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        fetchBotsWithMultitenantStats(),
        fetchOrchestratorStatus()
      ]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      showAlert('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –±–æ—Ç–∞
  const handleBotExpand = (botId) => {
    setExpandedBot(expandedBot === botId ? null : botId);
  };

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const showAlert = (type, message) => {
    setAlert({ show: true, type, message });
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (timestamp) => {
    if (!timestamp) return '–ù–∏–∫–æ–≥–¥–∞';
    return new Date(timestamp).toLocaleString('ru-RU');
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    loadData();
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(loadData, 15000);
    return () => clearInterval(interval);
  }, []);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height="50vh">
        <CircularProgress />
        <Typography variant="h6" sx={{ ml: 2 }}>
          –ó–∞–≥—Ä—É–∑–∫–∞ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...
        </Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Box>
          <Typography variant="h4" gutterBottom>
            <AssessmentIcon sx={{ mr: 2, verticalAlign: 'middle' }} />
            AI –†–µ–∑—É–ª—å—Ç–∞—Ç—ã - –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
          </Typography>
          <Typography variant="body2" color="text.secondary">
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –ø–æ –±–æ—Ç–∞–º ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date().toLocaleString('ru-RU')}
          </Typography>
        </Box>
        
        <Box display="flex" gap={2} alignItems="center">
          {/* –°—Ç–∞—Ç—É—Å AI Orchestrator */}
          {orchestratorStatus ? (
            <Chip
              label={orchestratorStatus.orchestrator_active ? "AI Orchestrator: –ê–ö–¢–ò–í–ï–ù" : "AI Orchestrator: –ù–ï –ê–ö–¢–ò–í–ï–ù"}
              color={orchestratorStatus.orchestrator_active ? "success" : "error"}
              icon={<SmartToyIcon />}
            />
          ) : (
            <Chip label="AI Orchestrator: –ù–ï–ò–ó–í–ï–°–¢–ù–û" color="warning" />
          )}
          
          <Button
            variant="outlined"
            startIcon={<RefreshIcon />}
            onClick={loadData}
            disabled={loading}
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        </Box>
      </Box>

      {/* Alert */}
      <Snackbar 
        open={alert.show} 
        autoHideDuration={6000} 
        onClose={() => setAlert({ show: false, type: 'info', message: '' })}
      >
        <Alert severity={alert.type} onClose={() => setAlert({ show: false, type: 'info', message: '' })}>
          {alert.message}
        </Alert>
      </Snackbar>

      {/* üöÄ –ì–õ–ê–í–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê: –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–û–¢–ê–ú */}
      <Card>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            <SmartToyIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º ({botsWithStats.length})
          </Typography>
          
          <Typography variant="body2" color="text.secondary" gutterBottom>
            –ö–∞–∂–¥—ã–π –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ —Å–≤–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ AI
          </Typography>

          {botsWithStats.length > 0 ? (
            <TableContainer component={Paper} variant="outlined" sx={{ mt: 2 }}>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell><strong>–ë–æ—Ç</strong></TableCell>
                    <TableCell align="center"><strong>AI –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</strong></TableCell>
                    <TableCell align="center"><strong>–ö–∞–Ω–∞–ª—ã</strong></TableCell>
                    <TableCell align="center"><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</strong></TableCell>
                    <TableCell align="center"><strong>–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤</strong></TableCell>
                    <TableCell align="center"><strong>–û–∂–∏–¥–∞—é—Ç</strong></TableCell>
                    <TableCell align="center"><strong>–û–±—Ä–∞–±–æ—Ç–∫–∞</strong></TableCell>
                    <TableCell align="center"><strong>–ì–æ—Ç–æ–≤–æ</strong></TableCell>
                    <TableCell align="center"><strong>–û—à–∏–±–∫–∏</strong></TableCell>
                    <TableCell align="center"><strong>–ü—Ä–æ–≥—Ä–µ—Å—Å</strong></TableCell>
                    <TableCell align="center"><strong>–î–µ—Ç–∞–ª–∏</strong></TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {botsWithStats.map((bot) => (
                    <React.Fragment key={bot.id}>
                      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –±–æ—Ç–∞ */}
                      <TableRow hover>
                        <TableCell>
                          <Box>
                            <Typography variant="body2" fontWeight="bold">
                              {bot.name}
                            </Typography>
                            <Box display="flex" gap={1} mt={0.5}>
                              <Chip 
                                label={bot.status} 
                                color={bot.status === 'active' ? 'success' : 'info'} 
                                size="small" 
                              />
                              {bot.last_ai_processing && (
                                <Chip 
                                  label={`${formatDate(bot.last_ai_processing).split(' ')[0]}`}
                                  size="small"
                                  variant="outlined"
                                />
                              )}
                            </Box>
                          </Box>
                        </TableCell>
                        <TableCell align="center">
                          <Typography variant="h6" color="primary" fontWeight="bold">
                            {bot.ai_results_count}
                          </Typography>
                        </TableCell>
                        <TableCell align="center">
                          <Chip 
                            label={bot.channels_count} 
                            color={bot.channels_count > 0 ? "success" : "default"} 
                            size="small" 
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Chip 
                            label={bot.categories_count} 
                            color={bot.categories_count > 0 ? "success" : "default"} 
                            size="small" 
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Typography variant="body2" fontWeight="bold">
                            {bot.posts_stats.total}
                          </Typography>
                        </TableCell>
                        <TableCell align="center">
                          <Chip 
                            label={bot.posts_stats.pending} 
                            color={bot.posts_stats.pending > 0 ? "warning" : "default"} 
                            size="small" 
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Chip 
                            label={bot.posts_stats.processing} 
                            color={bot.posts_stats.processing > 0 ? "info" : "default"} 
                            size="small" 
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Chip 
                            label={bot.posts_stats.completed} 
                            color="success" 
                            size="small" 
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Chip 
                            label={bot.posts_stats.failed} 
                            color={bot.posts_stats.failed > 0 ? "error" : "default"} 
                            size="small" 
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Box display="flex" alignItems="center" gap={1}>
                            <LinearProgress 
                              variant="determinate" 
                              value={bot.posts_stats.total > 0 ? 
                                Math.round((bot.posts_stats.completed / bot.posts_stats.total) * 100) : 0} 
                              sx={{ width: 60, height: 8 }}
                              color={bot.posts_stats.completed === bot.posts_stats.total ? "success" : "primary"}
                            />
                            <Typography variant="caption" fontWeight="bold">
                              {bot.posts_stats.total > 0 ? 
                                Math.round((bot.posts_stats.completed / bot.posts_stats.total) * 100) : 0}%
                            </Typography>
                          </Box>
                        </TableCell>
                        <TableCell align="center">
                          <IconButton
                            size="small"
                            onClick={() => handleBotExpand(bot.id)}
                            disabled={bot.channels_count === 0 && bot.ai_results_count === 0}
                          >
                            {expandedBot === bot.id ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                          </IconButton>
                        </TableCell>
                      </TableRow>

                      {/* –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –¥–µ—Ç–∞–ª–∏ –±–æ—Ç–∞ */}
                      <TableRow>
                        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={11}>
                          <Collapse in={expandedBot === bot.id} timeout="auto" unmountOnExit>
                            <Box sx={{ margin: 2, bgcolor: 'background.paper', p: 2, borderRadius: 1 }}>
                              <Typography variant="h6" gutterBottom>
                                üîç –î–µ—Ç–∞–ª–∏ –±–æ—Ç–∞: {bot.name}
                              </Typography>
                              
                              <Grid container spacing={3}>
                                {/* –ö–∞–Ω–∞–ª—ã –±–æ—Ç–∞ */}
                                <Grid item xs={12} md={6}>
                                  <Typography variant="subtitle2" gutterBottom>
                                    üì∫ –ö–∞–Ω–∞–ª—ã ({bot.channels.length}):
                                  </Typography>
                                  {bot.channels.length > 0 ? (
                                    <Stack spacing={1}>
                                      {bot.channels.map((channel) => (
                                        <Box key={channel.id} display="flex" alignItems="center" gap={1}>
                                          <Chip
                                            label={channel.username || channel.channel_name}
                                            size="small"
                                            variant="outlined"
                                            color="primary"
                                          />
                                          <Typography variant="caption" color="text.secondary">
                                            ID: {channel.telegram_id}
                                          </Typography>
                                        </Box>
                                      ))}
                                    </Stack>
                                  ) : (
                                    <Typography variant="body2" color="text.secondary">
                                      –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                                    </Typography>
                                  )}
                                </Grid>
                                
                                {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞ */}
                                <Grid item xs={12} md={6}>
                                  <Typography variant="subtitle2" gutterBottom>
                                    üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({bot.categories.length}):
                                  </Typography>
                                  {bot.categories.length > 0 ? (
                                    <Stack spacing={1}>
                                      {bot.categories.map((category) => (
                                        <Box key={category.id} display="flex" alignItems="center" gap={1}>
                                          <Chip
                                            label={category.category_name}
                                            size="small"
                                            color="secondary"
                                            variant="outlined"
                                          />
                                          <Typography variant="caption" color="text.secondary">
                                            –í–µ—Å: {category.weight || 'N/A'}
                                          </Typography>
                                        </Box>
                                      ))}
                                    </Stack>
                                  ) : (
                                    <Typography variant="body2" color="text.secondary">
                                      –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                                    </Typography>
                                  )}
                                </Grid>

                                {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
                                <Grid item xs={12}>
                                  <Typography variant="subtitle2" gutterBottom>
                                    üß† –ü–æ—Å–ª–µ–¥–Ω–∏–µ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({bot.ai_results.length} –∏–∑ {bot.ai_results_count}):
                                  </Typography>
                                  {bot.ai_results.length > 0 ? (
                                    <TableContainer component={Paper} variant="outlined" size="small">
                                      <Table size="small">
                                        <TableHead>
                                          <TableRow>
                                            <TableCell>–ü–æ—Å—Ç ID</TableCell>
                                            <TableCell>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</TableCell>
                                            <TableCell>–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å</TableCell>
                                            <TableCell>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ</TableCell>
                                          </TableRow>
                                        </TableHead>
                                        <TableBody>
                                          {bot.ai_results.map((result, index) => (
                                            <TableRow key={index}>
                                              <TableCell>
                                                <Typography variant="caption">
                                                  {result.post_id}
                                                </Typography>
                                              </TableCell>
                                              <TableCell>
                                                <Chip
                                                  label={result.category || 'NULL'}
                                                  size="small"
                                                  color={result.category ? 'success' : 'default'}
                                                />
                                              </TableCell>
                                              <TableCell>
                                                <Typography variant="caption">
                                                  {result.relevance_score ? `${(result.relevance_score * 100).toFixed(1)}%` : 'N/A'}
                                                </Typography>
                                              </TableCell>
                                              <TableCell>
                                                <Typography variant="caption">
                                                  {formatDate(result.processed_at)}
                                                </Typography>
                                              </TableCell>
                                            </TableRow>
                                          ))}
                                        </TableBody>
                                      </Table>
                                    </TableContainer>
                                  ) : (
                                    <Typography variant="body2" color="text.secondary">
                                      –ù–µ—Ç AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                                    </Typography>
                                  )}
                                </Grid>
                              </Grid>

                              {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                              <Box display="flex" gap={1} mt={2}>
                                <Button
                                  size="small"
                                  variant="outlined"
                                  startIcon={<RestartAltIcon />}
                                  onClick={() => {
                                    showAlert('info', `–ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞ ${bot.name} - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`);
                                  }}
                                >
                                  –ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
                                </Button>
                                <Button
                                  size="small"
                                  variant="outlined"
                                  startIcon={<VisibilityIcon />}
                                  onClick={() => {
                                    showAlert('info', `–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ—Ç–∞ ${bot.name} - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`);
                                  }}
                                >
                                  –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                </Button>
                              </Box>
                            </Box>
                          </Collapse>
                        </TableCell>
                      </TableRow>
                    </React.Fragment>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          ) : (
            <Box textAlign="center" py={4}>
              <Typography variant="h6" color="text.secondary" gutterBottom>
                –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–æ—Ç–∞–º
              </Typography>
              <Typography variant="body2" color="text.secondary">
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Backend API
              </Typography>
            </Box>
          )}

          {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          {botsWithStats.length > 0 && (
            <Box mt={3} p={2} bgcolor="background.paper" borderRadius={1}>
              <Typography variant="h6" gutterBottom>
                üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:
              </Typography>
              <Grid container spacing={2}>
                <Grid item xs={6} md={3}>
                  <Typography variant="body2" color="text.secondary">–í—Å–µ–≥–æ –±–æ—Ç–æ–≤:</Typography>
                  <Typography variant="h6">{botsWithStats.length}</Typography>
                </Grid>
                <Grid item xs={6} md={3}>
                  <Typography variant="body2" color="text.secondary">AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</Typography>
                  <Typography variant="h6" color="primary">
                    {botsWithStats.reduce((sum, bot) => sum + bot.ai_results_count, 0)}
                  </Typography>
                </Grid>
                <Grid item xs={6} md={3}>
                  <Typography variant="body2" color="text.secondary">–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤:</Typography>
                  <Typography variant="h6">
                    {botsWithStats.reduce((sum, bot) => sum + bot.posts_stats.total, 0)}
                  </Typography>
                </Grid>
                <Grid item xs={6} md={3}>
                  <Typography variant="body2" color="text.secondary">–ì–æ—Ç–æ–≤–æ:</Typography>
                  <Typography variant="h6" color="success.main">
                    {botsWithStats.reduce((sum, bot) => sum + bot.posts_stats.completed, 0)}
                  </Typography>
                </Grid>
              </Grid>
            </Box>
          )}
        </CardContent>
      </Card>
    </Box>
  );
};

export default AIResultsPage; 