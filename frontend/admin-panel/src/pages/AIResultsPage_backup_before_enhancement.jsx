import React, { useState, useEffect } from 'react';
import {
  Box, Typography, Paper, Grid, Card, CardContent, Chip, Alert, CircularProgress,
  Tab, Tabs, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions,
  Rating, List, ListItem, IconButton, Accordion, AccordionSummary, AccordionDetails,
  Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Stack,
  LinearProgress, Checkbox, FormControlLabel, FormGroup, Snackbar, Collapse
} from '@mui/material';

import {
  SmartToy as SmartToyIcon, Analytics as AnalyticsIcon, Speed as ProcessingIcon,
  ExpandMore as ExpandMoreIcon, Visibility as ViewIcon, Refresh as RefreshIcon,
  Stop as StopIcon, Delete as DeleteIcon, Assessment as AssessmentIcon,
  Psychology as PsychologyIcon, CheckCircle as CheckCircleIcon, Error as ErrorIcon,
  Pending as PendingIcon, RestartAlt as RestartAltIcon, ExpandLess as ExpandLessIcon,
  ExpandMore as ExpandMoreIconTable, Settings as SettingsIcon, Build as BuildIcon,
  Memory as MemoryIcon, Timeline as TimelineIcon, Dashboard as DashboardIcon
} from '@mui/icons-material';

function TabPanel({ children, value, index, ...other }) {
  return (
    <div role="tabpanel" hidden={value !== index} {...other}>
      {value === index && <Box sx={{ pt: 3 }}>{children}</Box>}
    </div>
  );
}

const AIResultsPage = () => {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [loading, setLoading] = useState(false);
  const [actionLoading, setActionLoading] = useState(false);
  const [alert, setAlert] = useState({ show: false, type: 'info', message: '' });
  const [confirmDialog, setConfirmDialog] = useState({ open: false, action: null, title: '', message: '' });
  
  // AI Orchestrator —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [orchestratorStatus, setOrchestratorStatus] = useState(null);
  const [aiServicesStats, setAiServicesStats] = useState(null);
  const [activeTasks, setActiveTasks] = useState([]);
  const [detailedTabValue, setDetailedTabValue] = useState(0);
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const [detailedAIStatus, setDetailedAIStatus] = useState(null);
  const [orchestratorCommands, setOrchestratorCommands] = useState([]);
  const [recentProcessedPosts, setRecentProcessedPosts] = useState([]);
  const [channelsDetailedStats, setChannelsDetailedStats] = useState([]);
  const [botsDetailedStats, setBotsDetailedStats] = useState([]);
  
  // –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [botsWithStats, setBotsWithStats] = useState([]);
  const [channels, setChannels] = useState([]);
  const [selectedChannels, setSelectedChannels] = useState([]);
  const [selectedBots, setSelectedBots] = useState([]);
  const [expandedBot, setExpandedBot] = useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadAllData();
    const interval = setInterval(loadAllData, 10000);
    return () => clearInterval(interval);
  }, []);

  const loadAllData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        fetchOrchestratorStatus(),
        fetchAIServicesStats(),
        fetchActiveTasks(),
        fetchDetailedAIStatus(),
        fetchOrchestratorCommands(),
        fetchBotsWithStats(),
        fetchChannels()
      ]);
    } catch (error) {
      showAlert('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI Orchestrator
  const fetchDetailedAIStatus = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/ai/detailed-status');
      if (response.ok) {
        const data = await response.json();
        setDetailedAIStatus(data);
        setChannelsDetailedStats(data.channels_detailed || []);
        setBotsDetailedStats(data.bots_detailed || []);
        setRecentProcessedPosts(data.recent_processed || []);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI:', error);
    }
  };

  const fetchOrchestratorCommands = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/ai/orchestrator-commands');
      if (response.ok) {
        const data = await response.json();
        setOrchestratorCommands(Array.isArray(data) ? data : []);
      }
    } catch (error) {
      setOrchestratorCommands([]);
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º loadAllData –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  const loadAllDataEnhanced = async () => {
    setLoading(true);
    try {
      await Promise.all([
        fetchOrchestratorStatus(),
        fetchAIServicesStats(),
        fetchActiveTasks(),
        fetchDetailedAIStatus(),
        fetchOrchestratorCommands(),
        fetchBotsWithStats(),
        fetchChannels()
      ]);
    } catch (error) {
      showAlert('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  // API —Ñ—É–Ω–∫—Ü–∏–∏
  const fetchOrchestratorStatus = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/ai/orchestrator-live-status');
      setOrchestratorStatus(response.ok ? await response.json() : 
        { orchestrator_active: false, status: 'UNAVAILABLE' });
    } catch (error) {
      setOrchestratorStatus({ orchestrator_active: false, status: 'ERROR', error: error.message });
    }
  };

  const fetchAIServicesStats = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/ai/status');
      if (response.ok) setAiServicesStats(await response.json());
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI:', error);
    }
  };

  const fetchActiveTasks = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/ai/tasks');
      setActiveTasks(response.ok ? await response.json() : []);
    } catch (error) {
      setActiveTasks([]);
    }
  };

  const fetchBotsWithStats = async () => {
    try {
      const botsResponse = await fetch('http://localhost:8000/api/public-bots');
      if (!botsResponse.ok) throw new Error('Failed to fetch bots');
      const allBots = await botsResponse.json();
      
      const botsWithStatsPromises = allBots.map(async (bot) => {
        try {
          const [resultsResponse, channelsResponse, categoriesResponse] = await Promise.all([
            fetch(`http://localhost:8000/api/ai/results?bot_id=${bot.id}&limit=500`),
            fetch(`http://localhost:8000/api/public-bots/${bot.id}/channels`),
            fetch(`http://localhost:8000/api/public-bots/${bot.id}/categories`)
          ]);
          
          const results = resultsResponse.ok ? await resultsResponse.json() : [];
          const botChannels = channelsResponse.ok ? await channelsResponse.json() : [];
          const botCategories = categoriesResponse.ok ? await categoriesResponse.json() : [];
          
          return {
            ...bot,
            ai_results_count: results.length,
            channels_count: botChannels.length,
            categories_count: botCategories.length,
            channels: botChannels,
            categories: botCategories,
            posts_stats: { total: results.length, completed: results.length, pending: 0, failed: 0 }
          };
        } catch (error) {
          return {
            ...bot, ai_results_count: 0, channels_count: 0, categories_count: 0,
            channels: [], categories: [], posts_stats: { total: 0, completed: 0, pending: 0, failed: 0 }
          };
        }
      });
      
      setBotsWithStats(await Promise.all(botsWithStatsPromises));
    } catch (error) {
      setBotsWithStats([]);
    }
  };

  const fetchChannels = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/channels');
      setChannels(response.ok ? await response.json() : []);
    } catch (error) {
      setChannels([]);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const showAlert = (type, message) => setAlert({ show: true, type, message });
  const openConfirmDialog = (action, title, message) => setConfirmDialog({ open: true, action, title, message });

  const handleRestartAll = async () => {
    setActionLoading(true);
    try {
      const response = await fetch('http://localhost:8000/api/ai/reprocess-all', { method: 'POST' });
      const data = await response.json();
      showAlert(data.success ? 'success' : 'error', 
        data.success ? `–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω. –°–±—Ä–æ—à–µ–Ω–æ ${data.posts_reset} –ø–æ—Å—Ç–æ–≤.` : 
        data.message || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
      if (data.success) await loadAllData();
    } catch (error) {
      showAlert('error', '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }
    setActionLoading(false);
    setConfirmDialog({ open: false, action: null, title: '', message: '' });
  };

  const handleBotExpand = (botId) => setExpandedBot(expandedBot === botId ? null : botId);
  
  const handleChannelSelect = (channelId) => {
    setSelectedChannels(prev => 
      prev.includes(channelId) ? prev.filter(id => id !== channelId) : [...prev, channelId]
    );
  };

  const getOrchestratorStatusInfo = () => {
    if (!orchestratorStatus) return { text: '–ù–ï–ò–ó–í–ï–°–¢–ù–û', color: 'default', icon: '‚ùì' };
    if (orchestratorStatus.orchestrator_active) {
      switch (orchestratorStatus.status) {
        case 'PROCESSING_STARTED': return { text: '–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–£–©–ï–ù–ê', color: 'info', icon: 'üöÄ' };
        case 'PROCESSING_COMPLETED': return { text: '–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê', color: 'success', icon: '‚úÖ' };
        case 'PROCESSING_FAILED': return { text: '–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò', color: 'error', icon: '‚ùå' };
        case 'IDLE': return { text: '–û–ñ–ò–î–ê–ù–ò–ï', color: 'warning', icon: '‚è≥' };
        default: return { text: '–ê–ö–¢–ò–í–ï–ù', color: 'success', icon: 'üü¢' };
      }
    }
    return { text: '–ù–ï –ê–ö–¢–ò–í–ï–ù', color: 'error', icon: 'üî¥' };
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>
        <AssessmentIcon sx={{ mr: 2, verticalAlign: 'middle' }} />
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI —Å–∏—Å—Ç–µ–º–æ–π –∏ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        <Box component="span" sx={{ ml: 2 }}>
          <Chip 
            label={orchestratorStatus?.orchestrator_active ? 'AI –ê–∫—Ç–∏–≤–µ–Ω' : 'AI –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            color={orchestratorStatus?.orchestrator_active ? 'success' : 'error'}
            icon={<span>{orchestratorStatus?.orchestrator_active ? 'üü¢' : 'üî¥'}</span>}
          />
        </Box>
      </Typography>

      <Typography variant="body2" color="text.secondary" gutterBottom>
        –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date().toLocaleString('ru-RU')}
      </Typography>

      {/* Alert Snackbar */}
      <Snackbar open={alert.show} autoHideDuration={6000} 
        onClose={() => setAlert({ show: false, type: 'info', message: '' })}>
        <Alert severity={alert.type} onClose={() => setAlert({ show: false, type: 'info', message: '' })}>
          {alert.message}
        </Alert>
      </Snackbar>

      {/* Confirm Dialog */}
      <Dialog open={confirmDialog.open} onClose={() => setConfirmDialog({ open: false, action: null, title: '', message: '' })}>
        <DialogTitle>{confirmDialog.title}</DialogTitle>
        <DialogContent>
          <DialogContentText>{confirmDialog.message}</DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setConfirmDialog({ open: false, action: null, title: '', message: '' })}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button onClick={confirmDialog.action} variant="contained" disabled={actionLoading}>
            {actionLoading ? <CircularProgress size={20} /> : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}
          </Button>
        </DialogActions>
      </Dialog>

      {loading && (
        <Box display="flex" justifyContent="center" my={2}>
          <CircularProgress />
        </Box>
      )}

      {/* –†–ê–ó–î–ï–õ 1: AI ORCHESTRATOR */}
      <Accordion defaultExpanded sx={{ mb: 2 }}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Box display="flex" alignItems="center" gap={1}>
            <PsychologyIcon color="primary" />
            <Typography variant="h6">AI Orchestrator –∏ —Å–µ—Ä–≤–∏—Å—ã</Typography>
            <Chip 
              label={orchestratorStatus?.orchestrator_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
              color={orchestratorStatus?.orchestrator_active ? 'success' : 'error'}
              size="small"
            />
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI Orchestrator */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                <SettingsIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI Orchestrator
              </Typography>
              
              <Grid container spacing={2}>
                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle2" gutterBottom>–°—Ç–∞—Ç—É—Å AI Orchestrator:</Typography>
                  <Box display="flex" alignItems="center" gap={1} mb={2}>
                    <Chip 
                      label={getOrchestratorStatusInfo().text}
                      color={getOrchestratorStatusInfo().color}
                      icon={<span>{getOrchestratorStatusInfo().icon}</span>}
                    />
                  </Box>
                  {orchestratorStatus?.error && (
                    <Alert severity="error" sx={{ mb: 2 }}>–û—à–∏–±–∫–∞: {orchestratorStatus.error}</Alert>
                  )}
                </Grid>
                
                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle2" gutterBottom>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π:</Typography>
                  <Stack direction="row" spacing={1} flexWrap="wrap">
                    <Button variant="contained" startIcon={<RestartAltIcon />}
                      onClick={() => openConfirmDialog(handleRestartAll, '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ë', 
                        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –≤ —Å—Ç–∞—Ç—É—Å "pending" –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç AI –æ–±—Ä–∞–±–æ—Ç–∫—É. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')}
                      disabled={actionLoading} size="small">
                      –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ë
                    </Button>
                    <Button variant="outlined" startIcon={<RefreshIcon />}
                      onClick={loadAllData} disabled={loading} size="small">
                      –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    </Button>
                  </Stack>
                </Grid>
              </Grid>
            </CardContent>
          </Card>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤ */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                <AnalyticsIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤
              </Typography>
              
              <Grid container spacing={3}>
                {[
                  { label: '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤', value: aiServicesStats?.total_processed || 0, color: 'primary' },
                  { label: '–í –æ—á–µ—Ä–µ–¥–∏', value: aiServicesStats?.total_pending || 0, color: 'warning.main' },
                  { label: '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å', value: `${aiServicesStats?.success_rate ? Math.round(aiServicesStats.success_rate * 100) : 0}%`, color: 'success.main' },
                  { label: '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è', value: aiServicesStats?.average_processing_time || 'N/A', color: 'info.main' }
                ].map((stat, index) => (
                  <Grid item xs={12} md={3} key={index}>
                    <Paper sx={{ p: 2, textAlign: 'center' }}>
                      <Typography variant="h4" color={stat.color}>{stat.value}</Typography>
                      <Typography variant="body2" color="text.secondary">{stat.label}</Typography>
                    </Paper>
                  </Grid>
                ))}
              </Grid>
            </CardContent>
          </Card>

          {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI Orchestrator */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                <ProcessingIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI Orchestrator
              </Typography>
              
              <Tabs 
                value={detailedTabValue} 
                onChange={(event, newValue) => setDetailedTabValue(newValue)}
                sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}
              >
                <Tab label="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã" icon={<DashboardIcon />} />
                <Tab label="–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏" icon={<ProcessingIcon />} />
                <Tab label="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏" icon={<TimelineIcon />} />
                <Tab label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤" icon={<MemoryIcon />} />
              </Tabs>

              <TabPanel value={detailedTabValue} index={0}>
                {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
                <Grid container spacing={3}>
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" gutterBottom>
                      –°—Ç–∞—Ç—É—Å AI Orchestrator:
                    </Typography>
                    
                    <Box display="flex" flexDirection="column" gap={2}>
                      {/* –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å */}
                      <Box display="flex" alignItems="center" gap={1}>
                        <Chip 
                          label={getOrchestratorStatusInfo().text}
                          color={getOrchestratorStatusInfo().color}
                          icon={<span>{getOrchestratorStatusInfo().icon}</span>}
                          size="medium"
                        />
                        {orchestratorStatus?.orchestrator_active && (
                          <Typography variant="body2" color="success.main">
                            –ê–∫—Ç–∏–≤–µ–Ω
                          </Typography>
                        )}
                      </Box>
                      
                      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                      {orchestratorStatus?.stats && (
                        <Box>
                          <Typography variant="body2" gutterBottom>
                            <strong>–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong>
                          </Typography>
                          <List dense>
                            <ListItem>
                              <Box display="flex" justifyContent="space-between" width="100%">
                                <Typography variant="body2">–†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏:</Typography>
                                <Typography variant="body2" fontWeight="bold">
                                  {orchestratorStatus.stats.queue_size || 0}
                                </Typography>
                              </Box>
                            </ListItem>
                            <ListItem>
                              <Box display="flex" justifyContent="space-between" width="100%">
                                <Typography variant="body2">–§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:</Typography>
                                <Chip 
                                  label={orchestratorStatus.stats.background_worker_running ? '–ó–∞–ø—É—â–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
                                  color={orchestratorStatus.stats.background_worker_running ? 'success' : 'default'}
                                  size="small"
                                />
                              </Box>
                            </ListItem>
                            <ListItem>
                              <Box display="flex" justifyContent="space-between" width="100%">
                                <Typography variant="body2">–ê–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:</Typography>
                                <Chip 
                                  label={orchestratorStatus.stats.processing_active ? '–î–∞' : '–ù–µ—Ç'}
                                  color={orchestratorStatus.stats.processing_active ? 'info' : 'default'}
                                  size="small"
                                />
                              </Box>
                            </ListItem>
                          </List>
                        </Box>
                      )}
                      
                      {/* –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
                      {orchestratorStatus?.last_update && (
                        <Typography variant="caption" color="text.secondary">
                          –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date(orchestratorStatus.last_update).toLocaleString('ru-RU')}
                        </Typography>
                      )}
                      
                      {/* –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
                      {orchestratorStatus?.time_since_update && (
                        <Typography variant="caption" color={orchestratorStatus.time_since_update > 120 ? 'error' : 'text.secondary'}>
                          {orchestratorStatus.time_since_update > 120 
                            ? `‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ ${Math.round(orchestratorStatus.time_since_update / 60)} –º–∏–Ω`
                            : `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${orchestratorStatus.time_since_update} —Å–µ–∫ –Ω–∞–∑–∞–¥`
                          }
                        </Typography>
                      )}
                    </Box>
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" gutterBottom>
                      –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:
                    </Typography>
                    
                    {detailedAIStatus ? (
                      <Box>
                        <List dense>
                          <ListItem>
                            <Box display="flex" justifyContent="space-between" width="100%">
                              <Typography variant="body2">–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤:</Typography>
                              <Typography variant="body2" fontWeight="bold">
                                {detailedAIStatus.total_posts || 0}
                              </Typography>
                            </Box>
                          </ListItem>
                          <ListItem>
                            <Box display="flex" justifyContent="space-between" width="100%">
                              <Typography variant="body2">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</Typography>
                              <Typography variant="body2" fontWeight="bold" color="success.main">
                                {detailedAIStatus.posts_stats?.completed || 0}
                              </Typography>
                            </Box>
                          </ListItem>
                          <ListItem>
                            <Box display="flex" justifyContent="space-between" width="100%">
                              <Typography variant="body2">–í –æ—á–µ—Ä–µ–¥–∏:</Typography>
                              <Typography variant="body2" fontWeight="bold" color="warning.main">
                                {detailedAIStatus.posts_stats?.pending || 0}
                              </Typography>
                            </Box>
                          </ListItem>
                          <ListItem>
                            <Box display="flex" justifyContent="space-between" width="100%">
                              <Typography variant="body2">–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è:</Typography>
                              <Typography variant="body2" fontWeight="bold" color="info.main">
                                {detailedAIStatus.posts_stats?.processing || 0}
                              </Typography>
                            </Box>
                          </ListItem>
                          <ListItem>
                            <Box display="flex" justifyContent="space-between" width="100%">
                              <Typography variant="body2">–û—à–∏–±–∫–∏:</Typography>
                              <Typography variant="body2" fontWeight="bold" color="error.main">
                                {detailedAIStatus.posts_stats?.failed || 0}
                              </Typography>
                            </Box>
                          </ListItem>
                          <ListItem>
                            <Box display="flex" justifyContent="space-between" width="100%">
                              <Typography variant="body2">–ü—Ä–æ–≥—Ä–µ—Å—Å:</Typography>
                              <Box display="flex" alignItems="center" gap={1}>
                                <LinearProgress 
                                  variant="determinate" 
                                  value={detailedAIStatus.progress_percentage || 0}
                                  sx={{ width: 80, height: 6 }}
                                />
                                <Typography variant="body2" fontWeight="bold">
                                  {Math.round(detailedAIStatus.progress_percentage || 0)}%
                                </Typography>
                              </Box>
                            </Box>
                          </ListItem>
                        </List>
                        
                        {detailedAIStatus.last_activity && (
                          <Typography variant="caption" color="text.secondary" sx={{ mt: 1 }}>
                            –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {new Date(detailedAIStatus.last_activity).toLocaleString('ru-RU')}
                          </Typography>
                        )}
                      </Box>
                    ) : (
                      <Alert severity="info">
                        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...
                      </Alert>
                    )}
                  </Grid>
                </Grid>
              </TabPanel>

              <TabPanel value={detailedTabValue} index={1}>
                {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ */}
                {activeTasks.length > 0 ? (
                  <TableContainer component={Paper} variant="outlined">
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell>ID –∑–∞–¥–∞—á–∏</TableCell>
                          <TableCell>–¢–∏–ø</TableCell>
                          <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
                          <TableCell>–ü—Ä–æ–≥—Ä–µ—Å—Å</TableCell>
                          <TableCell>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</TableCell>
                          <TableCell>–ë–æ—Ç ID</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {activeTasks.map((task, index) => (
                          <TableRow key={task.id || index}>
                            <TableCell>{task.id || `Task-${index}`}</TableCell>
                            <TableCell>
                              <Chip 
                                label={task.type || task.task_type || 'Unknown'} 
                                size="small"
                                variant="outlined"
                              />
                            </TableCell>
                            <TableCell>
                              <Chip 
                                label={task.status || 'pending'} 
                                color={task.status === 'completed' ? 'success' : 
                                       task.status === 'failed' ? 'error' : 
                                       task.status === 'processing' ? 'warning' : 'default'} 
                                size="small"
                              />
                            </TableCell>
                            <TableCell>
                              <Box display="flex" alignItems="center" gap={1}>
                                <LinearProgress 
                                  variant="determinate" 
                                  value={task.progress || 0} 
                                  sx={{ width: 60, height: 6 }}
                                />
                                <Typography variant="caption">
                                  {task.progress || 0}%
                                </Typography>
                              </Box>
                            </TableCell>
                            <TableCell>{task.execution_time || task.processing_time || 'N/A'}</TableCell>
                            <TableCell>{task.bot_id || 'N/A'}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                ) : (
                  <Alert severity="info">
                    –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
                  </Alert>
                )}
              </TabPanel>

              <TabPanel value={detailedTabValue} index={2}>
                {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
                {recentProcessedPosts.length > 0 ? (
                  <TableContainer component={Paper} variant="outlined">
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell>–í—Ä–µ–º—è</TableCell>
                          <TableCell>–ü–æ—Å—Ç ID</TableCell>
                          <TableCell>–ë–æ—Ç</TableCell>
                          <TableCell>–ö–∞–Ω–∞–ª</TableCell>
                          <TableCell>–í–µ—Ä—Å–∏—è</TableCell>
                          <TableCell>–ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {recentProcessedPosts.slice(0, 10).map((post, index) => (
                          <TableRow key={post.post_id || index}>
                            <TableCell>
                              <Typography variant="caption">
                                {new Date(post.processed_at).toLocaleString('ru-RU')}
                              </Typography>
                            </TableCell>
                            <TableCell>
                              <Chip label={post.post_id} size="small" variant="outlined" />
                            </TableCell>
                            <TableCell>
                              <Typography variant="body2">
                                {post.bot_name || `Bot ${post.bot_id}`}
                              </Typography>
                            </TableCell>
                            <TableCell>
                              <Typography variant="body2">
                                {post.channel_name || `Channel ${post.channel_id}`}
                              </Typography>
                            </TableCell>
                            <TableCell>
                              <Chip 
                                label={post.processing_version || 'v1.0'} 
                                size="small" 
                                color="primary"
                                variant="outlined"
                              />
                            </TableCell>
                            <TableCell>
                              <Typography variant="caption" sx={{ maxWidth: 200, display: 'block' }}>
                                {post.content_preview || '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è'}
                              </Typography>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                ) : (
                  <Alert severity="info">
                    –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
                  </Alert>
                )}
              </TabPanel>

              <TabPanel value={detailedTabValue} index={3}>
                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ */}
                {channelsDetailedStats.length > 0 ? (
                  <TableContainer component={Paper} variant="outlined">
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell>–ö–∞–Ω–∞–ª</TableCell>
                          <TableCell align="center">–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤</TableCell>
                          <TableCell align="center">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ</TableCell>
                          <TableCell align="center">–í –æ—á–µ—Ä–µ–¥–∏</TableCell>
                          <TableCell align="center">–û—à–∏–±–∫–∏</TableCell>
                          <TableCell align="center">–ü—Ä–æ–≥—Ä–µ—Å—Å</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {channelsDetailedStats.map((channel) => (
                          <TableRow key={channel.telegram_id}>
                            <TableCell>
                              <Box>
                                <Typography variant="body2" fontWeight="bold">
                                  {channel.name}
                                </Typography>
                                <Typography variant="caption" color="text.secondary">
                                  {channel.username || channel.telegram_id}
                                </Typography>
                              </Box>
                            </TableCell>
                            <TableCell align="center">
                              <Typography variant="body2" fontWeight="bold">
                                {channel.total_posts}
                              </Typography>
                            </TableCell>
                            <TableCell align="center">
                              <Chip 
                                label={channel.completed} 
                                color="success" 
                                size="small" 
                              />
                            </TableCell>
                            <TableCell align="center">
                              <Chip 
                                label={channel.pending} 
                                color={channel.pending > 0 ? "warning" : "default"} 
                                size="small" 
                              />
                            </TableCell>
                            <TableCell align="center">
                              <Chip 
                                label={channel.failed} 
                                color={channel.failed > 0 ? "error" : "default"} 
                                size="small" 
                              />
                            </TableCell>
                            <TableCell align="center">
                              <Box display="flex" alignItems="center" gap={1}>
                                <LinearProgress 
                                  variant="determinate" 
                                  value={channel.progress || 0}
                                  sx={{ width: 60, height: 6 }}
                                  color={channel.progress === 100 ? "success" : "primary"}
                                />
                                <Typography variant="caption">
                                  {Math.round(channel.progress || 0)}%
                                </Typography>
                              </Box>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                ) : (
                  <Alert severity="info">
                    –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–Ω–∞–ª–∞–º
                  </Alert>
                )}
              </TabPanel>
            </CardContent>
          </Card>
        </AccordionDetails>
      </Accordion>

      {/* –†–ê–ó–î–ï–õ 2: –ú–£–õ–¨–¢–ò–¢–ï–ù–ê–ù–¢–ù–´–ï –î–ê–ù–ù–´–ï */}
      <Accordion defaultExpanded sx={{ mb: 2 }}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Box display="flex" alignItems="center" gap={1}>
            <SmartToyIcon color="primary" />
            <Typography variant="h6">–ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</Typography>
            <Chip label={`${botsWithStats.length} –±–æ—Ç–æ–≤`} color="primary" size="small" />
          </Box>
        </AccordionSummary>
        <AccordionDetails>
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="h6">
                  <SmartToyIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º ({botsWithStats.length})
                </Typography>
                <Button variant="outlined" startIcon={<RefreshIcon />}
                  onClick={loadAllData} disabled={loading} size="small">
                  –û–±–Ω–æ–≤–∏—Ç—å
                </Button>
              </Box>

              {botsWithStats.length > 0 ? (
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>–ë–æ—Ç</TableCell>
                        <TableCell align="center">AI –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</TableCell>
                        <TableCell align="center">–ö–∞–Ω–∞–ª—ã</TableCell>
                        <TableCell align="center">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</TableCell>
                        <TableCell align="center">–ü—Ä–æ–≥—Ä–µ—Å—Å</TableCell>
                        <TableCell align="center">–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {botsWithStats.map((bot) => (
                        <React.Fragment key={bot.id}>
                          <TableRow>
                            <TableCell>
                              <Box>
                                <Typography variant="body2" fontWeight="bold">{bot.name}</Typography>
                                <Chip label={bot.status} 
                                  color={bot.status === 'active' ? 'success' : 'info'} size="small" />
                              </Box>
                            </TableCell>
                            <TableCell align="center">
                              <Typography variant="h6" color="primary">{bot.ai_results_count}</Typography>
                            </TableCell>
                            <TableCell align="center">
                              <Chip label={bot.channels_count} 
                                color={bot.channels_count > 0 ? "success" : "default"} size="small" />
                            </TableCell>
                            <TableCell align="center">
                              <Chip label={bot.categories_count} 
                                color={bot.categories_count > 0 ? "success" : "default"} size="small" />
                            </TableCell>
                            <TableCell align="center">
                              <Box display="flex" alignItems="center" gap={1}>
                                <LinearProgress variant="determinate" 
                                  value={bot.posts_stats.total > 0 ? 
                                    Math.round((bot.posts_stats.completed / bot.posts_stats.total) * 100) : 0} 
                                  sx={{ width: 60, height: 6 }}
                                  color={bot.posts_stats.completed === bot.posts_stats.total ? "success" : "primary"} />
                                <Typography variant="caption">
                                  {bot.posts_stats.total > 0 ? 
                                    Math.round((bot.posts_stats.completed / bot.posts_stats.total) * 100) : 0}%
                                </Typography>
                              </Box>
                            </TableCell>
                            <TableCell align="center">
                              <IconButton size="small" onClick={() => handleBotExpand(bot.id)}
                                disabled={bot.channels_count === 0}>
                                {expandedBot === bot.id ? <ExpandLessIcon /> : <ExpandMoreIconTable />}
                              </IconButton>
                            </TableCell>
                          </TableRow>

                          {/* –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –¥–µ—Ç–∞–ª–∏ –±–æ—Ç–∞ */}
                          <TableRow>
                            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>
                              <Collapse in={expandedBot === bot.id} timeout="auto" unmountOnExit>
                                <Box sx={{ margin: 2 }}>
                                  <Typography variant="h6" gutterBottom>
                                    –î–µ—Ç–∞–ª–∏ –±–æ—Ç–∞: {bot.name}
                                  </Typography>
                                  
                                  {/* –ö–∞–Ω–∞–ª—ã –±–æ—Ç–∞ */}
                                  {bot.channels && bot.channels.length > 0 && (
                                    <Box mb={2}>
                                      <Typography variant="subtitle2" gutterBottom>
                                        –ö–∞–Ω–∞–ª—ã ({bot.channels.length}):
                                      </Typography>
                                      <Grid container spacing={1}>
                                        {bot.channels.map((channel) => (
                                          <Grid item key={channel.id}>
                                            <Chip
                                              label={`${channel.username || channel.channel_name} (${channel.telegram_id})`}
                                              size="small" variant="outlined"
                                            />
                                          </Grid>
                                        ))}
                                      </Grid>
                                    </Box>
                                  )}
                                  
                                  {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞ */}
                                  {bot.categories && bot.categories.length > 0 && (
                                    <Box mb={2}>
                                      <Typography variant="subtitle2" gutterBottom>
                                        –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({bot.categories.length}):
                                      </Typography>
                                      <Grid container spacing={1}>
                                        {bot.categories.map((category) => (
                                          <Grid item key={category.id}>
                                            <Chip
                                              label={`${category.category_name} (${category.weight || 'N/A'})`}
                                              size="small" color="primary" variant="outlined"
                                            />
                                          </Grid>
                                        ))}
                                      </Grid>
                                    </Box>
                                  )}

                                  {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º */}
                                  <Box display="flex" gap={1}>
                                    <Button size="small" variant="outlined" startIcon={<RestartAltIcon />}>
                                      –ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç–∞
                                    </Button>
                                    <Button size="small" variant="outlined" startIcon={<ViewIcon />}>
                                      –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                    </Button>
                                  </Box>
                                </Box>
                              </Collapse>
                            </TableCell>
                          </TableRow>
                        </React.Fragment>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              ) : (
                <Typography variant="body2" color="text.secondary" textAlign="center" py={4}>
                  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–æ—Ç–∞–º
                </Typography>
              )}
            </CardContent>
          </Card>
        </AccordionDetails>
      </Accordion>
    </Box>
  );
};

export default AIResultsPage; 