import React, { useState, useEffect } from 'react';
import {
  Box,
  Button,
  Card,
  CardContent,
  Chip,
  CircularProgress,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  FormControl,
  FormControlLabel,
  Grid,
  IconButton,
  InputAdornment,
  InputLabel,
  MenuItem,
  Paper,
  Select,
  Switch,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField,
  Tooltip,
  Typography,
  Alert
} from '@mui/material';
import {
  Add as AddIcon,
  Settings as SettingsIcon,
  Visibility as PreviewIcon,
  PlayArrow as StartIcon,
  Pause as PauseIcon,
  AccessTime as TimeIcon,
  Language as LanguageIcon,
  Message as MessageIcon,
  Delete as DeleteIcon,
  Folder as CategoryIcon,
  Tv as ChannelIcon
} from '@mui/icons-material';

// –ò–º–ø–æ—Ä—Ç bulk –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ temp
import BotConfigurationTabs from '../components/BotConfigurationTabs';
import { apiEndpoints, API_BASE_URL } from '../config/api';

function PublicBotsPage() {
  const [bots, setBots] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [settingsDialogOpen, setSettingsDialogOpen] = useState(false);
  const [previewDialogOpen, setPreviewDialogOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [selectedBot, setSelectedBot] = useState(null);
  const [originalBot, setOriginalBot] = useState(null);
  const [saving, setSaving] = useState(false);
  const [deleting, setDeleting] = useState(false);
  const [previewLoading, setPreviewLoading] = useState(false);
  const [previewData, setPreviewData] = useState(null);
  const [botSubscriptions, setBotSubscriptions] = useState({});
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    bot_token: '',
    welcome_message: '',
    default_language: 'ru',
    max_posts_per_digest: 10,
    max_summary_length: 150,
    categorization_prompt: '',
    summarization_prompt: '',
    delivery_schedule: {},
    digest_schedule: {"enabled": false},
    timezone: 'Europe/Moscow'
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–æ–≤ –∏–∑ API
  const loadBots = async () => {
    try {
      setLoading(true);
      setError(null);
      const response = await fetch(apiEndpoints.publicBots());
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setBots(data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
  const loadBotSubscriptions = async (botsArray = bots) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      if (!botsArray || botsArray.length === 0) {
        console.log('–ë–æ—Ç—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–¥–ø–∏—Å–æ–∫');
        return;
      }

      const subscriptionsData = {};
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const subscriptionPromises = botsArray.map(async (bot) => {
        try {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
          const channelsResponse = await fetch(apiEndpoints.botChannels(bot.id));
          const channels = channelsResponse.ok ? await channelsResponse.json() : [];
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
          const categoriesResponse = await fetch(apiEndpoints.botCategories(bot.id));
          const categories = categoriesResponse.ok ? await categoriesResponse.json() : [];
          
          subscriptionsData[bot.id] = {
            channels: channels,
            categories: categories
          };
        } catch (err) {
          console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –±–æ—Ç–∞ ${bot.id}:`, err);
          subscriptionsData[bot.id] = {
            channels: [],
            categories: []
          };
        }
      });
      
      await Promise.all(subscriptionPromises);
      setBotSubscriptions(subscriptionsData);
      console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', subscriptionsData);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', err);
    }
  };

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const handleFillDefaults = async () => {
    try {
      console.log('üéØ LOADING DEFAULTS - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
      
      const response = await fetch(apiEndpoints.botTemplates());
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const defaults = await response.json();
      console.log('üéØ LOADING DEFAULTS - –ø–æ–ª—É—á–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', defaults);

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (—Å–æ—Ö—Ä–∞–Ω—è—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è)
      setFormData(prevData => ({
        ...prevData,
        welcome_message: defaults.default_welcome_message || prevData.welcome_message,
        default_language: defaults.default_digest_language || prevData.default_language,
        max_posts_per_digest: defaults.default_max_posts_per_digest || prevData.max_posts_per_digest,
        max_summary_length: defaults.default_max_summary_length || prevData.max_summary_length,
        categorization_prompt: defaults.default_categorization_prompt || prevData.categorization_prompt,
        summarization_prompt: defaults.default_summarization_prompt || prevData.summarization_prompt,
        delivery_schedule: defaults.default_delivery_schedule || prevData.delivery_schedule,
        digest_schedule: defaults.default_digest_schedule || prevData.digest_schedule,
        timezone: defaults.default_timezone || prevData.timezone
      }));

      console.log('üéØ LOADING DEFAULTS - —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏');
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + err.message);
      console.error('üéØ LOADING DEFAULTS - Error loading defaults:', err);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
  const handleCreateBot = async () => {
    try {
      console.log('üéØ CREATING BOT - formData –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:', formData);
      console.log('üéØ CREATING BOT - formData as JSON:', JSON.stringify(formData, null, 2));
      console.log('üéØ CREATING BOT - URL:', apiEndpoints.publicBots());
      
      const response = await fetch(apiEndpoints.publicBots(), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      console.log('üéØ CREATING BOT - response status:', response.status);
      console.log('üéØ CREATING BOT - response ok:', response.ok);

      if (!response.ok) {
        const errorData = await response.text();
        console.log('üéØ CREATING BOT - error response:', errorData);
        throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorData}`);
      }

      const responseData = await response.json();
      console.log('üéØ CREATING BOT - success response:', responseData);

      await loadBots();
      setCreateDialogOpen(false);
      setFormData({
        name: '',
        description: '',
        bot_token: '',
        welcome_message: '',
        default_language: 'ru',
        max_posts_per_digest: 10,
        max_summary_length: 150,
        categorization_prompt: '',
        summarization_prompt: '',
        delivery_schedule: {},
        digest_schedule: {"enabled": false},
        timezone: 'Europe/Moscow'
      });
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: ' + err.message);
      console.error('üéØ CREATING BOT - Error creating bot:', err);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
  const handleUpdateBot = async (updatedBot) => {
    setSaving(true);
    setError('');
    
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:', updatedBot.id);
      
      const response = await fetch(apiEndpoints.publicBot(updatedBot.id), {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: updatedBot.name,
          description: updatedBot.description,
          bot_token: updatedBot.bot_token,
          welcome_message: updatedBot.welcome_message,
          default_language: updatedBot.default_language,
          max_posts_per_digest: updatedBot.max_posts_per_digest,
          max_summary_length: updatedBot.max_summary_length,
          categorization_prompt: updatedBot.categorization_prompt,
          summarization_prompt: updatedBot.summarization_prompt,
          delivery_schedule: updatedBot.delivery_schedule,
          timezone: updatedBot.timezone
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
      }

      const updatedBotData = await response.json();
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', updatedBotData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º selectedBot –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      setSelectedBot(updatedBotData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º originalBot —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
      setOriginalBot(JSON.parse(JSON.stringify(updatedBotData)));
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
      await loadBots();
      
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + err.message);
      console.error('Error updating bot:', err);
    } finally {
      setSaving(false);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
  const toggleBotStatus = async (botId) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/public-bots/${botId}/toggle-status`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        console.log('Status toggled:', result);
        await loadBots(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
      } else {
        throw new Error('Failed to toggle bot status');
      }
    } catch (error) {
      console.error('Error toggling bot status:', error);
      setError('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞');
    }
  };

  const setBotStatus = async (botId, newStatus) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/public-bots/${botId}/set-status`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: newStatus }),
      });

      if (response.ok) {
        const result = await response.json();
        console.log('Status set:', result);
        await loadBots(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
      } else {
        throw new Error('Failed to set bot status');
      }
    } catch (error) {
      console.error('Error setting bot status:', error);
      setError('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞');
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const hasChanges = () => {
    if (!selectedBot || !originalBot) return false;
    return JSON.stringify(selectedBot) !== JSON.stringify(originalBot);
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞
  const handleDeleteBot = async () => {
    if (!selectedBot) return;
    
    setDeleting(true);
    setError('');
    
    try {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –±–æ—Ç–∞:', selectedBot.id);
      
      const response = await fetch(`${API_BASE_URL}/api/public-bots/${selectedBot.id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      console.log('‚úÖ –ë–æ—Ç —É–¥–∞–ª–µ–Ω:', result);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
      await loadBots();
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
      setDeleteDialogOpen(false);
      setSelectedBot(null);
      
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞: ' + err.message);
      console.error('Error deleting bot:', err);
    } finally {
      setDeleting(false);
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
  const handleGeneratePreview = async (bot) => {
    setSelectedBot(bot);
    setPreviewDialogOpen(true);
    setPreviewLoading(true);
    setPreviewData(null);
    
    try {
      console.log('üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –±–æ—Ç–∞:', bot.id);
      
      const response = await fetch(`${API_BASE_URL}/api/public-bots/${bot.id}/preview-digest`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      console.log('‚úÖ –ü—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω:', result);
      
      setPreviewData(result);
      
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é: ' + err.message);
      console.error('Error generating preview:', err);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setPreviewData({
        success: false,
        error: err.message,
        fallback_data: {
          bot_name: bot.name,
          message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞"
        }
      });
    } finally {
      setPreviewLoading(false);
    }
  };

  useEffect(() => {
    loadBots();
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤
  useEffect(() => {
    if (bots.length > 0) {
      loadBotSubscriptions(bots);
    }
  }, [bots.length]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞

  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return 'success';
      case 'setup': return 'warning';
      case 'paused': return 'error';
      case 'development': return 'info';
      default: return 'default';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'active': return '–ê–∫—Ç–∏–≤–µ–Ω';
      case 'setup': return '–ù–∞—Å—Ç—Ä–æ–π–∫–∞';
      case 'paused': return '–ü–∞—É–∑–∞';
      case 'development': return '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" gutterBottom>
          ü§ñ Public Bots Management
        </Typography>
        
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          onClick={() => setCreateDialogOpen(true)}
          sx={{ ml: 1 }}
        >
          –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞
        </Button>
      </Box>

      {/* Overview Stats */}
      <Card sx={{ mb: 3, bgcolor: 'background.default' }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤
          </Typography>
          <Box sx={{ display: 'flex', gap: 3 }}>
            <Chip 
              label={`${bots.filter(b => b.status === 'active').length} –∞–∫—Ç–∏–≤–Ω—ã—Ö`} 
              color="success" 
              variant="outlined"
            />
            <Chip 
              label={`${bots.filter(b => b.status === 'setup').length} –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ`} 
              color="warning" 
              variant="outlined"
            />
            <Chip 
              label={`${bots.filter(b => b.status === 'development').length} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`} 
              color="info" 
              variant="outlined"
            />
            <Chip 
              label={`${bots.filter(b => b.status === 'paused').length} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`} 
              color="error" 
              variant="outlined"
            />
          </Box>
        </CardContent>
      </Card>

      {/* Error Display */}
      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}

      {/* Loading */}
      {loading && (
        <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
          <CircularProgress />
        </Box>
      )}

      {/* Bots Grid */}
      {!loading && (
        <Grid container spacing={3}>
          {bots.map((bot) => (
            <Grid item xs={12} sm={6} md={4} key={bot.id}>
              <Card 
                sx={{ 
                  height: '100%',
                  display: 'flex',
                  flexDirection: 'column',
                  bgcolor: 'background.default',
                  position: 'relative',
                  '&:hover': {
                    boxShadow: 4,
                    transform: 'translateY(-2px)',
                    transition: 'all 0.2s ease-in-out'
                  }
                }}
              >
                {/* Delete Button - Top Right Corner */}
                <Tooltip title="–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞">
                  <IconButton 
                    size="small"
                    color="error"
                    onClick={() => {
                      setSelectedBot(bot);
                      setDeleteDialogOpen(true);
                    }}
                    sx={{ 
                      position: 'absolute', 
                      top: 8, 
                      right: 8, 
                      zIndex: 1,
                      bgcolor: 'background.paper',
                      '&:hover': {
                        bgcolor: 'error.light',
                        color: 'white'
                      }
                    }}
                  >
                    <DeleteIcon fontSize="small" />
                  </IconButton>
                </Tooltip>

                <CardContent sx={{ flexGrow: 1 }}>
                  {/* Bot Header */}
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2, pr: 5 }}>
                    <Typography variant="h6" component="div" sx={{ fontWeight: 'bold' }}>
                      {bot.name}
                    </Typography>
                  </Box>

                  {/* Bot Description */}
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                    {bot.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
                  </Typography>

                  {/* Bot Stats */}
                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, mb: 2 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <LanguageIcon fontSize="small" color="action" />
                      <Typography variant="body2">
                        {bot.default_language.toUpperCase()}
                      </Typography>
                    </Box>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <TimeIcon fontSize="small" color="action" />
                      <Typography variant="body2">
                        {bot.digest_generation_time} ‚Ä¢ {bot.max_posts_per_digest} –ø–æ—Å—Ç–æ–≤
                      </Typography>
                    </Box>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <MessageIcon fontSize="small" color="action" />
                      <Typography variant="body2">
                        {bot.max_summary_length} —Å–∏–º–≤. ‚Ä¢ {bot.users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                      </Typography>
                    </Box>
                    
                    {/* Bot Subscriptions */}
                    {botSubscriptions[bot.id] && (
                      <>
                        {/* Categories */}
                        {botSubscriptions[bot.id].categories && botSubscriptions[bot.id].categories.length > 0 && (
                          <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 1, mb: 1 }}>
                            <CategoryIcon fontSize="small" color="action" sx={{ mt: 0.5 }} />
                            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, flex: 1 }}>
                              {botSubscriptions[bot.id].categories
                                .sort((a, b) => (a.priority || 0) - (b.priority || 0))
                                .map((category, index) => (
                                  <Chip
                                    key={category.id || index}
                                    label={`${category.category_name || category.name}${category.priority ? `(${category.priority})` : ''}`}
                                    size="small"
                                    variant="outlined"
                                    color="primary"
                                    sx={{ fontSize: '0.75rem', height: '20px' }}
                                  />
                                ))}
                            </Box>
                          </Box>
                        )}
                        
                        {/* Channels */}
                        {botSubscriptions[bot.id].channels && botSubscriptions[bot.id].channels.length > 0 && (
                          <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 1 }}>
                            <ChannelIcon fontSize="small" color="action" sx={{ mt: 0.5 }} />
                            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, flex: 1 }}>
                              {botSubscriptions[bot.id].channels.map((channel, index) => (
                                <Chip
                                  key={channel.id || index}
                                  label={channel.username || channel.channel_name || channel.title || `ID:${channel.telegram_id}`}
                                  size="small"
                                  variant="outlined"
                                  color="secondary"
                                  sx={{ fontSize: '0.75rem', height: '20px' }}
                                />
                              ))}
                            </Box>
                          </Box>
                        )}
                      </>
                    )}
                  </Box>

                  {/* AI Prompt Preview */}
                  {bot.ai_prompt && (
                    <Box sx={{ mt: 2, p: 1, bgcolor: 'grey.50', borderRadius: 1 }}>
                      <Typography variant="caption" color="text.secondary">
                        AI Prompt:
                      </Typography>
                      <Typography variant="body2" sx={{ fontSize: '0.8rem' }}>
                        {bot.ai_prompt.length > 100 ? `${bot.ai_prompt.substring(0, 100)}...` : bot.ai_prompt}
                      </Typography>
                    </Box>
                  )}
                </CardContent>

                {/* Bot Actions */}
                <Box sx={{ p: 2, pt: 0, display: 'flex', justifyContent: 'space-between', alignItems: 'center', borderTop: 1, borderColor: 'divider' }}>
                  <Box sx={{ display: 'flex', gap: 1 }}>
                    <Tooltip title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞">
                      <IconButton 
                        size="small" 
                        onClick={() => {
                          setSelectedBot(bot);
                          setOriginalBot(JSON.parse(JSON.stringify(bot))); // –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
                          setSettingsDialogOpen(true);
                        }}
                      >
                        <SettingsIcon />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="–ü—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞">
                      <IconButton 
                        size="small"
                        onClick={() => handleGeneratePreview(bot)}
                      >
                        <PreviewIcon />
                      </IconButton>
                    </Tooltip>
                  </Box>
                  
                  {/* Status and Control Block */}
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Chip 
                      label={getStatusText(bot.status)}
                      color={getStatusColor(bot.status)}
                      size="small"
                    />
                    <Tooltip title={bot.status === 'active' ? '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'}>
                      <IconButton 
                        size="small"
                        color={bot.status === 'active' ? 'error' : 'success'}
                        onClick={() => toggleBotStatus(bot.id)}
                      >
                        {bot.status === 'active' ? <PauseIcon /> : <StartIcon />}
                      </IconButton>
                    </Tooltip>
                  </Box>
                </Box>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {/* Empty State */}
      {!loading && bots.length === 0 && !error && (
        <Box sx={{ textAlign: 'center', py: 8 }}>
          <Typography variant="h6" color="text.secondary" gutterBottom>
            –ü—É–±–ª–∏—á–Ω—ã–µ –±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
            –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
          </Typography>
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={() => setCreateDialogOpen(true)}
          >
            –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
          </Button>
        </Box>
      )}

      {/* Create Bot Dialog */}
      <Dialog 
        open={createDialogOpen} 
        onClose={() => setCreateDialogOpen(false)}
        maxWidth="lg"
        fullWidth
      >
        <DialogTitle>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞</DialogTitle>
        <DialogContent>
          <BotConfigurationTabs 
            bot={formData} 
            onBotUpdate={(updatedBot) => setFormData(updatedBot)}
            onClose={() => setCreateDialogOpen(false)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setCreateDialogOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button 
            onClick={handleFillDefaults}
            variant="outlined"
            sx={{ mr: 'auto' }}
          >
            –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
          </Button>
          <Button 
            onClick={handleCreateBot} 
            variant="contained"
            disabled={!formData.name || !formData.bot_token}
          >
            –°–æ–∑–¥–∞—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* Settings Dialog */}
      <Dialog
        open={settingsDialogOpen}
        onClose={() => {
          if (hasChanges()) {
            if (window.confirm('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?')) {
              setSelectedBot(originalBot); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              setSettingsDialogOpen(false);
            }
          } else {
            setSettingsDialogOpen(false);
          }
        }}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ {selectedBot?.name}
            {hasChanges() && (
              <Chip 
                label="–ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" 
                color="warning" 
                size="small" 
                variant="outlined"
              />
            )}
          </Box>
        </DialogTitle>
        <DialogContent>
          <BotConfigurationTabs 
            bot={selectedBot} 
            onBotUpdate={(updatedBot) => setSelectedBot(updatedBot)}
            onClose={() => setSettingsDialogOpen(false)}
          />
        </DialogContent>
        <DialogActions>
          <Button 
            onClick={() => {
              setSelectedBot(originalBot); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              setSettingsDialogOpen(false);
            }}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            variant="contained" 
            disabled={!hasChanges() || saving}
            onClick={() => {
              if (selectedBot) {
                handleUpdateBot(selectedBot);
              }
            }}
            startIcon={saving ? <CircularProgress size={16} /> : null}
          >
            {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Preview Dialog */}
      <Dialog
        open={previewDialogOpen}
        onClose={() => setPreviewDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <PreviewIcon />
            –ü—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ {selectedBot?.name}
          </Box>
        </DialogTitle>
        <DialogContent>
          {previewLoading ? (
            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', py: 4 }}>
              <CircularProgress sx={{ mb: 2 }} />
              <Typography variant="body2" color="text.secondary">
                –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞...
              </Typography>
            </Box>
          ) : previewData ? (
            previewData.success ? (
              <Box sx={{ mt: 2 }}>
                {/* Bot Info */}
                <Card sx={{ mb: 3, bgcolor: 'primary.light', color: 'primary.contrastText' }}>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      ü§ñ {previewData.bot_info.name}
                    </Typography>
                    <Typography variant="body2">
                      {previewData.bot_info.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
                    </Typography>
                    <Box sx={{ display: 'flex', gap: 2, mt: 1 }}>
                      <Chip label={`–Ø–∑—ã–∫: ${previewData.bot_info.language.toUpperCase()}`} size="small" />
                      <Chip label={`–ú–∞–∫—Å. –ø–æ—Å—Ç–æ–≤: ${previewData.bot_info.max_posts}`} size="small" />
                      <Chip label={`–ú–∞–∫—Å. –¥–ª–∏–Ω–∞: ${previewData.bot_info.max_summary_length}`} size="small" />
                    </Box>
                  </CardContent>
                </Card>

                {/* Digest Stats */}
                <Card sx={{ mb: 3, bgcolor: 'success.light', color: 'success.contrastText' }}>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                    </Typography>
                    <Grid container spacing={2}>
                      <Grid item xs={6} sm={3}>
                        <Typography variant="body2" component="div">–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:</Typography>
                        <Typography variant="h6" component="div">{previewData.preview_data.total_posts_analyzed}</Typography>
                      </Grid>
                      <Grid item xs={6} sm={3}>
                        <Typography variant="body2" component="div">–í –ø—Ä–µ–≤—å—é:</Typography>
                        <Typography variant="h6" component="div">{previewData.preview_data.posts_in_preview}</Typography>
                      </Grid>
                      <Grid item xs={6} sm={3}>
                        <Typography variant="body2" component="div">AI –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</Typography>
                        <Typography variant="h6" component="div" color={previewData.preview_data.ai_processed_posts > 0 ? 'success.main' : 'warning.main'}>
                          {previewData.preview_data.ai_processed_posts}/{previewData.preview_data.posts_in_preview}
                        </Typography>
                      </Grid>
                      <Grid item xs={6} sm={3}>
                        <Typography variant="body2" component="div">–ö–∞–Ω–∞–ª–æ–≤:</Typography>
                        <Typography variant="h6" component="div">{previewData.preview_data.channels_count}</Typography>
                      </Grid>
                      <Grid item xs={6} sm={3}>
                        <Typography variant="body2" component="div">–í–∞–∂–Ω–æ—Å—Ç—å:</Typography>
                        <Typography variant="h6" component="div">{previewData.digest_stats.avg_importance.toFixed(1)}</Typography>
                      </Grid>
                      <Grid item xs={6} sm={3}>
                        <Typography variant="body2" component="div">–°—Ä–æ—á–Ω–æ—Å—Ç—å:</Typography>
                        <Typography variant="h6" component="div">{previewData.digest_stats.avg_urgency.toFixed(1)}</Typography>
                      </Grid>
                      <Grid item xs={6} sm={3}>
                        <Typography variant="body2" component="div">–ó–Ω–∞—á–∏–º–æ—Å—Ç—å:</Typography>
                        <Typography variant="h6" component="div">{previewData.digest_stats.avg_significance.toFixed(1)}</Typography>
                      </Grid>
                      <Grid item xs={6} sm={3}>
                        <Typography variant="body2" component="div">–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</Typography>
                        <Typography variant="h6" component="div">{previewData.digest_stats.total_views}</Typography>
                      </Grid>
                    </Grid>
                  </CardContent>
                </Card>

                {/* Channels Info */}
                {previewData.channels_info && previewData.channels_info.length > 0 && (
                  <Card sx={{ mb: 3, bgcolor: 'info.light', color: 'info.contrastText' }}>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        üì∫ –ö–∞–Ω–∞–ª—ã –±–æ—Ç–∞
                      </Typography>
                      <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                        {previewData.channels_info.map((channel) => (
                          <Chip 
                            key={channel.id}
                            label={`${channel.name} (@${channel.username || channel.telegram_id})`}
                            size="small"
                            variant="outlined"
                          />
                        ))}
                      </Box>
                    </CardContent>
                  </Card>
                )}

                {/* Posts Preview */}
                <Typography variant="h6" gutterBottom>
                  üìù –ü–æ—Å—Ç—ã –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ
                </Typography>
                {previewData.preview_data.posts.map((post, index) => (
                  <Card key={post.post_id} sx={{ mb: 2 }}>
                    <CardContent>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>
                        <Typography variant="h6" component="div">
                          {post.title}
                        </Typography>
                        <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
                          <Chip 
                            label={post.category} 
                            color={post.ai_processed ? "primary" : "default"}
                            size="small"
                          />
                          {post.ai_processed ? (
                            <Chip label="AI ‚úì" color="success" size="small" />
                          ) : (
                            <Chip label="–û–∂–∏–¥–∞–µ—Ç" color="warning" size="small" />
                          )}
                        </Box>
                      </Box>
                      
                      <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                        üì∫ –ö–∞–Ω–∞–ª: {post.channel_name}
                      </Typography>
                      
                      <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                        {post.content_preview}
                      </Typography>
                      
                      <Box sx={{ bgcolor: post.ai_processed ? 'success.light' : 'grey.50', p: 2, borderRadius: 1, mb: 2 }}>
                        <Typography variant="subtitle2" color={post.ai_processed ? "success.dark" : "primary"} gutterBottom>
                          {post.ai_processed ? "üß† AI –†–µ–∑—é–º–µ:" : "üìÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ:"}
                        </Typography>
                        <Typography variant="body2">
                          {post.summary}
                        </Typography>
                      </Box>
                      
                      <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                        <Chip label={`–í–∞–∂–Ω–æ—Å—Ç—å: ${post.metrics.importance}`} size="small" color="info" />
                        <Chip label={`–°—Ä–æ—á–Ω–æ—Å—Ç—å: ${post.metrics.urgency}`} size="small" color="warning" />
                        <Chip label={`–ó–Ω–∞—á–∏–º–æ—Å—Ç—å: ${post.metrics.significance}`} size="small" color="success" />
                        <Chip label={`–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${post.views}`} size="small" />
                      </Box>
                    </CardContent>
                  </Card>
                ))}

                {/* AI Processing Info */}
                <Card sx={{ mt: 3, bgcolor: previewData.ai_processing.status === 'real' ? 'success.light' : 'warning.light', 
                           color: previewData.ai_processing.status === 'real' ? 'success.contrastText' : 'warning.contrastText' }}>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      üß† AI –û–±—Ä–∞–±–æ—Ç–∫–∞
                    </Typography>
                    <Typography variant="body2" sx={{ mb: 2 }}>
                      {previewData.ai_processing.note}
                    </Typography>
                    
                    {previewData.ai_processing.status === 'real' && (
                      <Box sx={{ mb: 2 }}>
                        <Typography variant="subtitle2" gutterBottom>
                          üìà –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:
                        </Typography>
                        <Box sx={{ display: 'flex', gap: 1, mb: 1 }}>
                          <Chip 
                            label={`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${previewData.ai_processing.processed_posts}`} 
                            color="success" 
                            size="small" 
                          />
                          {previewData.ai_processing.pending_posts > 0 && (
                            <Chip 
                              label={`–û–∂–∏–¥–∞–µ—Ç: ${previewData.ai_processing.pending_posts}`} 
                              color="warning" 
                              size="small" 
                            />
                          )}
                        </Box>
                      </Box>
                    )}
                    
                    {previewData.ai_processing.categorization_prompt && (
                      <Box sx={{ mb: 1 }}>
                        <Typography variant="subtitle2" component="div">–ü—Ä–æ–º–ø—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏:</Typography>
                        <Typography variant="body2" component="div" sx={{ fontFamily: 'monospace', fontSize: '0.8rem' }}>
                          {previewData.ai_processing.categorization_prompt}
                        </Typography>
                      </Box>
                    )}
                    {previewData.ai_processing.summarization_prompt && (
                      <Box>
                        <Typography variant="subtitle2" component="div">–ü—Ä–æ–º–ø—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:</Typography>
                        <Typography variant="body2" component="div" sx={{ fontFamily: 'monospace', fontSize: '0.8rem' }}>
                          {previewData.ai_processing.summarization_prompt}
                        </Typography>
                      </Box>
                    )}
                  </CardContent>
                </Card>
              </Box>
            ) : (
              <Box sx={{ textAlign: 'center', py: 4 }}>
                <Typography variant="h6" color="error" gutterBottom>
                  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  {previewData.error}
                </Typography>
                {previewData.fallback_data && (
                  <Typography variant="body2">
                    {previewData.fallback_data.message}
                  </Typography>
                )}
              </Box>
            )
          ) : (
            <Typography variant="body2" color="text.secondary">
              –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
            </Typography>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setPreviewDialogOpen(false)}>–ó–∞–∫—Ä—ã—Ç—å</Button>
          {previewData && !previewData.success && (
            <Button 
              variant="contained" 
              onClick={() => handleGeneratePreview(selectedBot)}
              disabled={previewLoading}
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          )}
        </DialogActions>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog
        open={deleteDialogOpen}
        onClose={() => !deleting && setDeleteDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle sx={{ color: 'error.main' }}>
          ‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        </DialogTitle>
        <DialogContent>
          <Typography variant="body1" gutterBottom>
            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ <strong>"{selectedBot?.name}"</strong>?
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:
          </Typography>
          <Box component="ul" sx={{ mt: 1, pl: 2 }}>
            <Typography component="li" variant="body2" color="text.secondary">
              –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            </Typography>
            <Typography component="li" variant="body2" color="text.secondary">
              –°–≤—è–∑–∏ —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            </Typography>
            <Typography component="li" variant="body2" color="text.secondary">
              –ò—Å—Ç–æ—Ä–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
            </Typography>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button 
            onClick={() => setDeleteDialogOpen(false)}
            disabled={deleting}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            onClick={handleDeleteBot}
            color="error"
            variant="contained"
            disabled={deleting}
            startIcon={deleting ? <CircularProgress size={16} /> : <DeleteIcon />}
          >
            {deleting ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}

export default PublicBotsPage; 