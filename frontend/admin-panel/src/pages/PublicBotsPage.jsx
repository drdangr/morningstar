import React, { useState, useEffect } from 'react';
import {
  Paper,
  Typography,
  Box,
  Button,
  Alert,
  Card,
  CardContent,
  Grid,
  Chip,
  IconButton,
  Tooltip,
  CircularProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  InputAdornment
} from '@mui/material';
import {
  Add as AddIcon,
  Settings as SettingsIcon,
  Visibility as PreviewIcon,
  PlayArrow as StartIcon,
  Pause as PauseIcon,
  AccessTime as TimeIcon,
  Language as LanguageIcon,
  Message as MessageIcon
} from '@mui/icons-material';

// –ò–º–ø–æ—Ä—Ç bulk –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ temp
import BotConfigurationTabs from '../components/BotConfigurationTabs';

const API_BASE_URL = 'http://localhost:8000';

function PublicBotsPage() {
  const [bots, setBots] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [settingsDialogOpen, setSettingsDialogOpen] = useState(false);
  const [previewDialogOpen, setPreviewDialogOpen] = useState(false);
  const [selectedBot, setSelectedBot] = useState(null);
  const [originalBot, setOriginalBot] = useState(null);
  const [saving, setSaving] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    bot_token: '',
    welcome_message: '',
    default_language: 'ru',
    max_posts_per_digest: 10,
    max_summary_length: 150,
    categorization_prompt: '',
    summarization_prompt: '',
    delivery_schedule: {},
    timezone: 'Europe/Moscow'
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–æ–≤ –∏–∑ API
  const loadBots = async () => {
    setLoading(true);
    setError('');

    try {
      const response = await fetch(`${API_BASE_URL}/api/public-bots`);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const data = await response.json();
      setBots(data);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤: ' + err.message);
      console.error('Error loading bots:', err);
    } finally {
      setLoading(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
  const handleCreateBot = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/public-bots`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      await loadBots();
      setCreateDialogOpen(false);
      setFormData({
        name: '',
        description: '',
        bot_token: '',
        welcome_message: '',
        default_language: 'ru',
        max_posts_per_digest: 10,
        max_summary_length: 150,
        categorization_prompt: '',
        summarization_prompt: '',
        delivery_schedule: {},
        timezone: 'Europe/Moscow'
      });
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: ' + err.message);
      console.error('Error creating bot:', err);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
  const handleUpdateBot = async (updatedBot) => {
    setSaving(true);
    setError('');
    
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:', updatedBot.id);
      
      const response = await fetch(`${API_BASE_URL}/api/public-bots/${updatedBot.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: updatedBot.name,
          description: updatedBot.description,
          bot_token: updatedBot.bot_token,
          welcome_message: updatedBot.welcome_message,
          default_language: updatedBot.default_language,
          max_posts_per_digest: updatedBot.max_posts_per_digest,
          max_summary_length: updatedBot.max_summary_length,
          categorization_prompt: updatedBot.categorization_prompt,
          summarization_prompt: updatedBot.summarization_prompt,
          delivery_schedule: updatedBot.delivery_schedule,
          timezone: updatedBot.timezone
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
      }

      const updatedBotData = await response.json();
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', updatedBotData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º selectedBot –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      setSelectedBot(updatedBotData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º originalBot —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
      setOriginalBot(JSON.parse(JSON.stringify(updatedBotData)));
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
      await loadBots();
      
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + err.message);
      console.error('Error updating bot:', err);
    } finally {
      setSaving(false);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
  const toggleBotStatus = async (botId) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/public-bots/${botId}/toggle-status`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      await loadBots();
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ' + err.message);
      console.error('Error toggling status:', err);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const hasChanges = () => {
    if (!selectedBot || !originalBot) return false;
    return JSON.stringify(selectedBot) !== JSON.stringify(originalBot);
  };

  useEffect(() => {
    loadBots();
  }, []);

  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return 'success';
      case 'setup': return 'warning';
      case 'paused': return 'error';
      default: return 'default';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'active': return '–ê–∫—Ç–∏–≤–µ–Ω';
      case 'setup': return '–ù–∞—Å—Ç—Ä–æ–π–∫–∞';
      case 'paused': return '–ü–∞—É–∑–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" gutterBottom>
          ü§ñ Public Bots Management
        </Typography>
        
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          onClick={() => setCreateDialogOpen(true)}
          sx={{ ml: 1 }}
        >
          –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞
        </Button>
      </Box>

      {/* Overview Stats */}
      <Card sx={{ mb: 3, bgcolor: 'background.default' }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            üìä –û–±–∑–æ—Ä
          </Typography>
          <Box sx={{ display: 'flex', gap: 3 }}>
            <Chip 
              label={`${bots.filter(b => b.status === 'active').length} –∞–∫—Ç–∏–≤–Ω—ã—Ö`} 
              color="success" 
              variant="outlined"
            />
            <Chip 
              label={`${bots.filter(b => b.status === 'setup').length} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`} 
              color="warning" 
              variant="outlined"
            />
            <Chip 
              label={`${bots.filter(b => b.status === 'paused').length} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`} 
              color="error" 
              variant="outlined"
            />
          </Box>
        </CardContent>
      </Card>

      {/* Error Display */}
      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}

      {/* Loading */}
      {loading && (
        <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
          <CircularProgress />
        </Box>
      )}

      {/* Bots Grid */}
      {!loading && (
        <Grid container spacing={3}>
          {bots.map((bot) => (
            <Grid item xs={12} sm={6} md={4} key={bot.id}>
              <Card 
                sx={{ 
                  height: '100%',
                  display: 'flex',
                  flexDirection: 'column',
                  bgcolor: 'background.default',
                  '&:hover': {
                    boxShadow: 4,
                    transform: 'translateY(-2px)',
                    transition: 'all 0.2s ease-in-out'
                  }
                }}
              >
                <CardContent sx={{ flexGrow: 1 }}>
                  {/* Bot Header */}
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                    <Typography variant="h6" component="div" sx={{ fontWeight: 'bold' }}>
                      {bot.name}
                    </Typography>
                    <Chip 
                      label={getStatusText(bot.status)}
                      color={getStatusColor(bot.status)}
                      size="small"
                    />
                  </Box>

                  {/* Bot Description */}
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                    {bot.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
                  </Typography>

                  {/* Bot Stats */}
                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, mb: 2 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <LanguageIcon fontSize="small" color="action" />
                      <Typography variant="body2">
                        {bot.default_language.toUpperCase()}
                      </Typography>
                    </Box>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <TimeIcon fontSize="small" color="action" />
                      <Typography variant="body2">
                        {bot.digest_generation_time} ‚Ä¢ {bot.max_posts_per_digest} –ø–æ—Å—Ç–æ–≤
                      </Typography>
                    </Box>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <MessageIcon fontSize="small" color="action" />
                      <Typography variant="body2">
                        {bot.max_summary_length} —Å–∏–º–≤. ‚Ä¢ {bot.users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                      </Typography>
                    </Box>
                  </Box>

                  {/* AI Prompt Preview */}
                  {bot.ai_prompt && (
                    <Box sx={{ mt: 2, p: 1, bgcolor: 'grey.50', borderRadius: 1 }}>
                      <Typography variant="caption" color="text.secondary">
                        AI Prompt:
                      </Typography>
                      <Typography variant="body2" sx={{ fontSize: '0.8rem' }}>
                        {bot.ai_prompt.length > 100 ? `${bot.ai_prompt.substring(0, 100)}...` : bot.ai_prompt}
                      </Typography>
                    </Box>
                  )}
                </CardContent>

                {/* Bot Actions */}
                <Box sx={{ p: 2, pt: 0, display: 'flex', justifyContent: 'space-between', borderTop: 1, borderColor: 'divider' }}>
                  <Box sx={{ display: 'flex', gap: 1 }}>
                    <Tooltip title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞">
                      <IconButton 
                        size="small" 
                        onClick={() => {
                          setSelectedBot(bot);
                          setOriginalBot(JSON.parse(JSON.stringify(bot))); // –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
                          setSettingsDialogOpen(true);
                        }}
                      >
                        <SettingsIcon />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="–ü—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞">
                      <IconButton 
                        size="small"
                        onClick={() => {
                          setSelectedBot(bot);
                          setPreviewDialogOpen(true);
                        }}
                      >
                        <PreviewIcon />
                      </IconButton>
                    </Tooltip>
                  </Box>
                  
                  <Tooltip title={bot.status === 'active' ? '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'}>
                    <IconButton 
                      size="small"
                      color={bot.status === 'active' ? 'error' : 'success'}
                      onClick={() => toggleBotStatus(bot.id)}
                    >
                      {bot.status === 'active' ? <PauseIcon /> : <StartIcon />}
                    </IconButton>
                  </Tooltip>
                </Box>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {/* Empty State */}
      {!loading && bots.length === 0 && !error && (
        <Box sx={{ textAlign: 'center', py: 8 }}>
          <Typography variant="h6" color="text.secondary" gutterBottom>
            –ü—É–±–ª–∏—á–Ω—ã–µ –±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
            –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
          </Typography>
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={() => setCreateDialogOpen(true)}
          >
            –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
          </Button>
        </Box>
      )}

      {/* Create Bot Dialog */}
      <Dialog 
        open={createDialogOpen} 
        onClose={() => setCreateDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>
            <TextField
              label="–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞"
              fullWidth
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              required
            />
            <TextField
              label="–û–ø–∏—Å–∞–Ω–∏–µ"
              fullWidth
              multiline
              rows={3}
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
            />
            <TextField
              label="Telegram Bot Token"
              fullWidth
              value={formData.bot_token}
              onChange={(e) => setFormData({ ...formData, bot_token: e.target.value })}
              required
            />
            <TextField
              label="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
              fullWidth
              multiline
              rows={2}
              value={formData.welcome_message}
              onChange={(e) => setFormData({ ...formData, welcome_message: e.target.value })}
            />
            <FormControl fullWidth>
              <InputLabel>–Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</InputLabel>
              <Select
                value={formData.default_language}
                onChange={(e) => setFormData({ ...formData, default_language: e.target.value })}
                label="–Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
              >
                <MenuItem value="ru">–†—É—Å—Å–∫–∏–π</MenuItem>
                <MenuItem value="en">English</MenuItem>
              </Select>
            </FormControl>
            <TextField
              label="–ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ"
              type="number"
              fullWidth
              value={formData.max_posts_per_digest}
              onChange={(e) => setFormData({ ...formData, max_posts_per_digest: parseInt(e.target.value) })}
              InputProps={{
                startAdornment: <InputAdornment position="start">üìù</InputAdornment>,
              }}
            />
            <TextField
              label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ä–µ–∑—é–º–µ"
              type="number"
              fullWidth
              value={formData.max_summary_length}
              onChange={(e) => setFormData({ ...formData, max_summary_length: parseInt(e.target.value) })}
              InputProps={{
                startAdornment: <InputAdornment position="start">üìè</InputAdornment>,
              }}
            />
            <TextField
              label="–ü—Ä–æ–º–ø—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"
              fullWidth
              multiline
              rows={3}
              value={formData.categorization_prompt}
              onChange={(e) => setFormData({ ...formData, categorization_prompt: e.target.value })}
            />
            <TextField
              label="–ü—Ä–æ–º–ø—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"
              fullWidth
              multiline
              rows={3}
              value={formData.summarization_prompt}
              onChange={(e) => setFormData({ ...formData, summarization_prompt: e.target.value })}
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setCreateDialogOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
          <Button 
            onClick={handleCreateBot} 
            variant="contained"
            disabled={!formData.name || !formData.bot_token}
          >
            –°–æ–∑–¥–∞—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* Settings Dialog */}
      <Dialog
        open={settingsDialogOpen}
        onClose={() => {
          if (hasChanges()) {
            if (window.confirm('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?')) {
              setSelectedBot(originalBot); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              setSettingsDialogOpen(false);
            }
          } else {
            setSettingsDialogOpen(false);
          }
        }}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ {selectedBot?.name}
            {hasChanges() && (
              <Chip 
                label="–ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" 
                color="warning" 
                size="small" 
                variant="outlined"
              />
            )}
          </Box>
        </DialogTitle>
        <DialogContent>
          <BotConfigurationTabs 
            bot={selectedBot} 
            onBotUpdate={(updatedBot) => setSelectedBot(updatedBot)}
            onClose={() => setSettingsDialogOpen(false)}
          />
        </DialogContent>
        <DialogActions>
          <Button 
            onClick={() => {
              setSelectedBot(originalBot); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              setSettingsDialogOpen(false);
            }}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            variant="contained" 
            disabled={!hasChanges() || saving}
            onClick={() => {
              if (selectedBot) {
                handleUpdateBot(selectedBot);
              }
            }}
            startIcon={saving ? <CircularProgress size={16} /> : null}
          >
            {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Preview Dialog */}
      <Dialog
        open={previewDialogOpen}
        onClose={() => setPreviewDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>–ü—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ {selectedBot?.name}</DialogTitle>
        <DialogContent>
          <Typography variant="body2" color="text.secondary">
            –ü—Ä–µ–≤—å—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ Task 3
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setPreviewDialogOpen(false)}>–ó–∞–∫—Ä—ã—Ç—å</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}

export default PublicBotsPage; 