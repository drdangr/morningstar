import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  Typography,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Box,
  Alert,
  CircularProgress,
  Checkbox,
  FormControlLabel,
  Grid
} from '@mui/material';
import { Delete as DeleteIcon, Tv as ChannelIcon, SmartToy as BotIcon, Warning as WarningIcon } from '@mui/icons-material';

const DataCleanup = () => {
  const [channels, setChannels] = useState([]);
  const [bots, setBots] = useState([]);
  const [selectedChannel, setSelectedChannel] = useState('');
  const [selectedBot, setSelectedBot] = useState('');
  const [confirmDialog, setConfirmDialog] = useState(false);
  const [confirmData, setConfirmData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [cleanupType, setCleanupType] = useState('');
  const [cleanupOptions, setCleanupOptions] = useState({
    includePosts: false,      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï —É–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã
    includeAIResults: true    // ‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  });

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
      
      const [channelsRes, botsRes] = await Promise.all([
        fetch('http://localhost:8000/api/channels'),
        fetch('http://localhost:8000/api/public-bots')
      ]);
      
      console.log('–û—Ç–≤–µ—Ç –∫–∞–Ω–∞–ª–æ–≤:', channelsRes.status);
      console.log('–û—Ç–≤–µ—Ç –±–æ—Ç–æ–≤:', botsRes.status);
      
      if (channelsRes.ok) {
        const channelsData = await channelsRes.json();
        console.log('–î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–æ–≤:', channelsData);
        setChannels(Array.isArray(channelsData) ? channelsData : []);
      } else {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:', channelsRes.status);
        setMessage('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤');
      }
      
      if (botsRes.ok) {
        const botsData = await botsRes.json();
        console.log('–î–∞–Ω–Ω—ã–µ –±–æ—Ç–æ–≤:', botsData);
        setBots(Array.isArray(botsData) ? botsData : []);
      } else {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤:', botsRes.status);
        setMessage('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      setMessage(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
  };

  const showConfirm = (type) => {
    setCleanupType(type);
    
    let confirmText = '';
    switch (type) {
      case 'all':
        confirmText = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!';
        break;
      case 'channel':
        if (!selectedChannel) {
          setMessage('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
          return;
        }
        const channelName = channels.find(c => c.id === selectedChannel)?.channel_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª';
        confirmText = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ "${channelName}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`;
        break;
      case 'bot':
        if (!selectedBot) {
          setMessage('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
          return;
        }
        const botName = bots.find(b => b.id === selectedBot)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç';
        confirmText = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ "${botName}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`;
        break;
      default:
        return;
    }
    
    setConfirmData({ text: confirmText });
    setConfirmDialog(true);
  };

  const executeCleanup = async () => {
    setLoading(true);
    setConfirmDialog(false);
    setMessage('');
    
    try {
      let url = '';
      const params = new URLSearchParams({
        confirm: 'true',
        include_posts: cleanupOptions.includePosts,
        include_ai_results: cleanupOptions.includeAIResults
      });

      switch (cleanupType) {
        case 'all':
          url = `http://localhost:8000/api/data/clear-all?${params}`;
          break;
        case 'channel':
          url = `http://localhost:8000/api/data/clear-by-channel/${selectedChannel}?${params}`;
          break;
        case 'bot':
          url = `http://localhost:8000/api/data/clear-by-bot/${selectedBot}?${params}`;
          break;
        default:
          throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—á–∏—Å—Ç–∫–∏');
      }

      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞:', url);
      const response = await fetch(url, { method: 'DELETE' });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
        throw new Error(errorData.message || `HTTP ${response.status}`);
      }
      
      const result = await response.json();
      setMessage(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ: ${result.message}`);
      
      setSelectedChannel('');
      setSelectedBot('');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
      setMessage(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box>
      <Typography variant="h6" gutterBottom>
        üßπ –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      </Typography>

      {message && (
        <Alert severity={message.includes('‚ùå') ? 'error' : 'success'} sx={{ mb: 2 }}>
          {message}
        </Alert>
      )}

      <Card sx={{ mb: 2 }}>
        <CardContent>
          <Typography variant="subtitle1" gutterBottom>
            ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏
          </Typography>
          <Alert severity="info" sx={{ mb: 2 }}>
            <Typography variant="body2">
              <strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</strong> –û—á–∏—â–∞—Ç—å —Ç–æ–ª—å–∫–æ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "pending". 
              –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!
            </Typography>
          </Alert>
          <Box sx={{ display: 'flex', gap: 2 }}>
            <FormControlLabel
              control={
                <Checkbox
                  checked={cleanupOptions.includePosts}
                  onChange={(e) => setCleanupOptions(prev => ({ ...prev, includePosts: e.target.checked }))}
                />
              }
              label="‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç—ã (–û–ü–ê–°–ù–û!)"
            />
            <FormControlLabel
              control={
                <Checkbox
                  checked={cleanupOptions.includeAIResults}
                  onChange={(e) => setCleanupOptions(prev => ({ ...prev, includeAIResults: e.target.checked }))}
                />
              }
              label="‚úÖ –û—á–∏—Å—Ç–∏—Ç—å AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
            />
          </Box>
          <Typography variant="caption" color="text.secondary">
            –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {channels.length} –∫–∞–Ω–∞–ª–æ–≤, {bots.length} –±–æ—Ç–æ–≤
          </Typography>
        </CardContent>
      </Card>

      <Grid container spacing={2}>
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" color="error" gutterBottom>
                <DeleteIcon sx={{ mr: 1 }} />
                –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
              </Typography>
              <Typography variant="body2" color="text.secondary" paragraph>
                –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ—á–∏—â–∞–µ—Ç AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ "pending"
              </Typography>
              <Button
                variant="contained"
                color="error"
                fullWidth
                disabled={loading}
                onClick={() => showConfirm('all')}
                startIcon={<DeleteIcon />}
              >
                {loading && cleanupType === 'all' ? '–û—á–∏—Å—Ç–∫–∞...' : '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ'}
              </Button>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                <ChannelIcon sx={{ mr: 1 }} />
                –û—á–∏—Å—Ç–∫–∞ –ø–æ –∫–∞–Ω–∞–ª—É
              </Typography>
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª</InputLabel>
                <Select
                  value={selectedChannel}
                  onChange={(e) => setSelectedChannel(e.target.value)}
                  label="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª"
                >
                  {channels.map((channel) => (
                    <MenuItem key={channel.id} value={channel.id}>
                      {channel.channel_name} (@{channel.username})
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              <Button
                variant="contained"
                color="warning"
                fullWidth
                disabled={loading || !selectedChannel}
                onClick={() => showConfirm('channel')}
                startIcon={<DeleteIcon />}
              >
                {loading && cleanupType === 'channel' ? '–û—á–∏—Å—Ç–∫–∞...' : '–û—á–∏—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª'}
              </Button>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                <BotIcon sx={{ mr: 1 }} />
                –û—á–∏—Å—Ç–∫–∞ –ø–æ –±–æ—Ç—É
              </Typography>
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞</InputLabel>
                <Select
                  value={selectedBot}
                  onChange={(e) => setSelectedBot(e.target.value)}
                  label="–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞"
                >
                  {bots.map((bot) => (
                    <MenuItem key={bot.id} value={bot.id}>
                      {bot.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              <Button
                variant="contained"
                color="warning"
                fullWidth
                disabled={loading || !selectedBot}
                onClick={() => showConfirm('bot')}
                startIcon={<DeleteIcon />}
              >
                {loading && cleanupType === 'bot' ? '–û—á–∏—Å—Ç–∫–∞...' : '–û—á–∏—Å—Ç–∏—Ç—å –±–æ—Ç–∞'}
              </Button>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Dialog open={confirmDialog} onClose={() => setConfirmDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>
          <WarningIcon color="warning" sx={{ mr: 1 }} />
          –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        </DialogTitle>
        <DialogContent>
          {confirmData && (
            <Box>
              <Typography variant="body1" gutterBottom>
                {confirmData.text}
              </Typography>
              
              <Alert severity="warning" sx={{ mt: 2 }}>
                ‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ.
              </Alert>
              
              <Box sx={{ mt: 2 }}>
                <Typography variant="subtitle2" gutterBottom>
                  –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:
                </Typography>
                <Typography variant="body2">
                  ‚Ä¢ {cleanupOptions.includePosts ? '‚úÖ' : '‚ùå'} –ü–æ—Å—Ç—ã –∏–∑ –∫—ç—à–∞
                </Typography>
                <Typography variant="body2">
                  ‚Ä¢ {cleanupOptions.includeAIResults ? '‚úÖ' : '‚ùå'} AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
                </Typography>
              </Box>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setConfirmDialog(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            onClick={executeCleanup} 
            color="error" 
            variant="contained"
            disabled={loading}
            startIcon={loading ? <CircularProgress size={20} /> : <DeleteIcon />}
          >
            {loading ? '–û—á–∏—Å—Ç–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default DataCleanup; 