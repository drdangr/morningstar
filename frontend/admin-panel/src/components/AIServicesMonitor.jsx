import React, { useState, useEffect } from 'react';
import {
  Paper,
  Typography,
  Box,
  Grid,
  Card,
  CardContent,
  Button,
  Chip,
  Alert,
  CircularProgress,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  LinearProgress,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Tooltip,
  IconButton,
  Divider,
  Switch,
  FormControlLabel
} from '@mui/material';
import {
  SmartToy as AIIcon,
  Psychology as CategoryIcon,
  Summarize as SummaryIcon,
  Refresh as RefreshIcon,
  Settings as SettingsIcon,
  Queue as QueueIcon,
  TrendingUp as StatsIcon,
  Speed as PerformanceIcon,
  Visibility as ViewIcon,
  PlayArrow as StartIcon,
  Pause as PauseIcon,
  FlowerIcon,
  Memory as MemoryIcon
} from '@mui/icons-material';

// –ò–º–ø–æ—Ä—Ç API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
import { API_BASE_URL } from '../config/api';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
function ServiceCard({ service, onRefresh, onViewTasks }) {
  const getStatusColor = (status) => {
    switch (status) {
      case 'running': return 'success';
      case 'paused': return 'warning';
      case 'error': return 'error';
      default: return 'default';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'running': return '–†–∞–±–æ—Ç–∞–µ—Ç';
      case 'paused': return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      case 'error': return '–û—à–∏–±–∫–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  return (
    <Card sx={{ height: '100%' }}>
      <CardContent>
        <Box display="flex" alignItems="center" justifyContent="space-between" mb={2}>
          <Box display="flex" alignItems="center" gap={1}>
            {service.type === 'categorization' ? <CategoryIcon color="primary" /> : <SummaryIcon color="secondary" />}
            <Typography variant="h6">
              {service.name}
            </Typography>
          </Box>
          <Chip 
            label={getStatusText(service.status)} 
            color={getStatusColor(service.status)} 
            size="small"
          />
        </Box>

        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
          {service.description}
        </Typography>

                 {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ */}
         <Box sx={{ mb: 2 }}>
           <Typography variant="subtitle2" gutterBottom>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</Typography>
           <Typography variant="body2">‚Ä¢ –ú–æ–¥–µ–ª—å: {service.settings.model}</Typography>
           <Typography variant="body2">‚Ä¢ Max —Ç–æ–∫–µ–Ω–æ–≤: {service.settings.max_tokens}</Typography>
           <Typography variant="body2">‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {service.settings.temperature}</Typography>
           <Typography variant="body2">‚Ä¢ Top-p: {service.settings.top_p}</Typography>
           <Typography variant="body2">‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {service.settings.delay}—Å</Typography>
         </Box>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <Box sx={{ mb: 2 }}>
          <Typography variant="subtitle2" gutterBottom>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</Typography>
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="body2">–í—Å–µ–≥–æ:</Typography>
            <Typography variant="body2" fontWeight="bold">{service.stats.total}</Typography>
          </Box>
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="body2">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</Typography>
            <Typography variant="body2" fontWeight="bold" color="success.main">
              {service.stats.processed}
            </Typography>
          </Box>
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="body2">–í —Ä–∞–±–æ—Ç–µ:</Typography>
            <Typography variant="body2" fontWeight="bold" color="warning.main">
              {service.stats.processing}
            </Typography>
          </Box>
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="body2">–í –æ—á–µ—Ä–µ–¥–∏:</Typography>
            <Typography variant="body2" fontWeight="bold" color="info.main">
              {service.stats.pending}
            </Typography>
          </Box>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
          <Box sx={{ mt: 1 }}>
            <LinearProgress 
              variant="determinate" 
              value={service.stats.total > 0 ? (service.stats.processed / service.stats.total) * 100 : 0}
              sx={{ height: 8, borderRadius: 4 }}
            />
            <Typography variant="caption" color="text.secondary">
              {service.stats.total > 0 ? 
                `${Math.round((service.stats.processed / service.stats.total) * 100)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ` : 
                '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
              }
            </Typography>
          </Box>
        </Box>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <Box display="flex" gap={1} flexWrap="wrap">
          <Button 
            size="small" 
            variant="outlined" 
            startIcon={<RefreshIcon />}
            onClick={() => onRefresh(service.type)}
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
          <Button 
            size="small" 
            variant="outlined" 
            startIcon={<ViewIcon />}
            onClick={() => onViewTasks(service.type)}
          >
            –ó–∞–¥–∞—á–∏
          </Button>
        </Box>
      </CardContent>
    </Card>
  );
}

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç AI Services Monitor
function AIServicesMonitor() {
  const [services, setServices] = useState([]);
  const [systemStats, setSystemStats] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [autoRefresh, setAutoRefresh] = useState(true);
  const [refreshInterval, setRefreshInterval] = useState(30); // —Å–µ–∫—É–Ω–¥—ã
  const [currentTasks, setCurrentTasks] = useState([]);
  const [showTasks, setShowTasks] = useState(false);
  const [selectedService, setSelectedService] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤
  const loadAIServices = async () => {
    setLoading(true);
    setError('');

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É AI —Å–µ—Ä–≤–∏—Å–æ–≤
      const statsResponse = await fetch(`${API_BASE_URL}/api/ai/status`);
      if (!statsResponse.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${statsResponse.status}`);
      }
      const statsData = await statsResponse.json();

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤
      const settingsResponse = await fetch(`${API_BASE_URL}/api/settings`);
      const settingsData = settingsResponse.ok ? await settingsResponse.json() : [];

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–æ–≤
      const servicesData = [
        {
          type: 'categorization',
          name: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤',
          description: '–ü—Å–µ–≤–¥–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ–º –∏ –º–µ—Ç—Ä–∏–∫',
          status: 'running', // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Celery
                     settings: {
             model: getSettingValue(settingsData, 'ai_categorization_model', 'gpt-4o-mini'),
             max_tokens: getSettingValue(settingsData, 'ai_categorization_max_tokens', '1000'),
             temperature: getSettingValue(settingsData, 'ai_categorization_temperature', '0.3'),
             top_p: getSettingValue(settingsData, 'ai_categorization_top_p', '1.0'),
             delay: '5' // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Å–µ–≤–¥–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏
           },
          stats: {
            total: statsData.total_posts || 0,
            processed: statsData.categorized_posts || 0,
            processing: statsData.processing_posts || 0,
            pending: (statsData.total_posts || 0) - (statsData.categorized_posts || 0) - (statsData.processing_posts || 0)
          }
        },
        {
          type: 'summarization',
          name: '–°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤',
          description: '–ü—Å–µ–≤–¥–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ –ø–æ—Å—Ç–æ–≤ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤',
          status: 'running',
                     settings: {
             model: getSettingValue(settingsData, 'ai_summarization_model', 'gpt-4o'),
             max_tokens: getSettingValue(settingsData, 'ai_summarization_max_tokens', '2000'),
             temperature: getSettingValue(settingsData, 'ai_summarization_temperature', '0.7'),
             top_p: getSettingValue(settingsData, 'ai_summarization_top_p', '1.0'),
             delay: '2' // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Å–µ–≤–¥–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏
           },
          stats: {
            total: statsData.total_posts || 0,
            processed: statsData.summarized_posts || 0,
            processing: statsData.processing_posts || 0,
            pending: (statsData.total_posts || 0) - (statsData.summarized_posts || 0) - (statsData.processing_posts || 0)
          }
        }
      ];

      setServices(servicesData);
      setSystemStats(statsData);

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const getSettingValue = (settings, key, defaultValue) => {
    const setting = settings.find(s => s.key === key);
    return setting ? setting.value : defaultValue;
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
  const handleRefreshService = async (serviceType) => {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å: ${serviceType}`);
    await loadAIServices();
  };

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á —Å–µ—Ä–≤–∏—Å–∞
  const handleViewTasks = (serviceType) => {
    setSelectedService(serviceType);
    setShowTasks(true);
    console.log(`üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á —Å–µ—Ä–≤–∏—Å–∞: ${serviceType}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö –∏–∑ Flower API
  };

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  useEffect(() => {
    loadAIServices();

    if (autoRefresh) {
      const interval = setInterval(loadAIServices, refreshInterval * 1000);
      return () => clearInterval(interval);
    }
  }, [autoRefresh, refreshInterval]);

  return (
    <Box>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box display="flex" alignItems="center" gap={2} sx={{ mb: 3 }}>
        <AIIcon color="primary" sx={{ fontSize: 32 }} />
        <Typography variant="h4">
          AI Services Monitor
        </Typography>
        <Chip 
          label="–ü—Å–µ–≤–¥–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞" 
          color="info" 
          variant="outlined"
        />
      </Box>

      <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ AI —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤. 
        –ü—Å–µ–≤–¥–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ç–æ–∫–µ–Ω—ã.
      </Typography>

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <Paper sx={{ p: 2, mb: 3 }}>
        <Box display="flex" alignItems="center" justify="space-between" flexWrap="wrap" gap={2}>
          <Box display="flex" alignItems="center" gap={2}>
            <FormControlLabel
              control={
                <Switch
                  checked={autoRefresh}
                  onChange={(e) => setAutoRefresh(e.target.checked)}
                />
              }
              label="–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
            />
            
            <FormControl size="small" sx={{ minWidth: 120 }}>
              <InputLabel>–ò–Ω—Ç–µ—Ä–≤–∞–ª</InputLabel>
              <Select
                value={refreshInterval}
                onChange={(e) => setRefreshInterval(e.target.value)}
                label="–ò–Ω—Ç–µ—Ä–≤–∞–ª"
                disabled={!autoRefresh}
              >
                <MenuItem value={10}>10 —Å–µ–∫</MenuItem>
                <MenuItem value={30}>30 —Å–µ–∫</MenuItem>
                <MenuItem value={60}>1 –º–∏–Ω</MenuItem>
                <MenuItem value={300}>5 –º–∏–Ω</MenuItem>
              </Select>
            </FormControl>
          </Box>

          <Box display="flex" gap={1}>
            <Button
              variant="contained"
              startIcon={<RefreshIcon />}
              onClick={loadAIServices}
              disabled={loading}
            >
              –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ
            </Button>
            <Button
              variant="outlined"
              startIcon={<QueueIcon />}
              href="http://localhost:5555" // Flower URL
              target="_blank"
            >
              Flower Monitor
            </Button>
          </Box>
        </Box>
      </Paper>

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      {/* –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {systemStats && (
        <Paper sx={{ p: 2, mb: 3 }}>
          <Typography variant="h6" gutterBottom>
            üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
          </Typography>
          <Grid container spacing={2}>
            <Grid item xs={6} md={3}>
              <Box textAlign="center">
                <Typography variant="h4" color="primary">
                  {systemStats.total_posts || 0}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤
                </Typography>
              </Box>
            </Grid>
            <Grid item xs={6} md={3}>
              <Box textAlign="center">
                <Typography variant="h4" color="success.main">
                  {systemStats.processed_posts || 0}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                </Typography>
              </Box>
            </Grid>
            <Grid item xs={6} md={3}>
              <Box textAlign="center">
                <Typography variant="h4" color="warning.main">
                  {systemStats.processing_posts || 0}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  –í –æ–±—Ä–∞–±–æ—Ç–∫–µ
                </Typography>
              </Box>
            </Grid>
            <Grid item xs={6} md={3}>
              <Box textAlign="center">
                <Typography variant="h4" color="info.main">
                  {systemStats.active_bots || 0}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
                </Typography>
              </Box>
            </Grid>
          </Grid>
        </Paper>
      )}

      {/* –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ */}
      <Grid container spacing={3}>
        {loading ? (
          <Grid item xs={12}>
            <Box display="flex" justifyContent="center" alignItems="center" py={4}>
              <CircularProgress />
              <Typography variant="body1" sx={{ ml: 2 }}>
                –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤...
              </Typography>
            </Box>
          </Grid>
        ) : (
          services.map((service) => (
            <Grid item xs={12} md={6} key={service.type}>
              <ServiceCard
                service={service}
                onRefresh={handleRefreshService}
                onViewTasks={handleViewTasks}
              />
            </Grid>
          ))
        )}
      </Grid>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
      <Alert severity="info" sx={{ mt: 3 }}>
        <Typography variant="body2">
          üí° <strong>–ü—Å–µ–≤–¥–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞:</strong> AI —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ä–µ–∂–∏–º–µ –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. 
          –†–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã OpenAI API –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏: –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è 5—Å, —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è 2—Å.
        </Typography>
      </Alert>
    </Box>
  );
}

export default AIServicesMonitor; 