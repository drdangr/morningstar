import React, { useState, useEffect } from 'react';
import {
  Box,
  Tabs,
  Tab,
  Typography,
  Paper
} from '@mui/material';
import {
  Settings as SettingsIcon,
  Tv as ChannelsIcon,
  Category as CategoriesIcon,
  Psychology as AIIcon
} from '@mui/icons-material';

import BotChannelsManager from './BotChannelsManager';
import BotCategoriesManager from './BotCategoriesManager';
import BotAISettings from './BotAISettings';
import BotGeneralSettings from './BotGeneralSettings';

function TabPanel({ children, value, index, ...other }) {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`bot-config-tabpanel-${index}`}
      aria-labelledby={`bot-config-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const BotConfigurationTabs = ({ bot, onBotUpdate, onClose }) => {
  const [activeTab, setActiveTab] = useState(0);
  const [botChannels, setBotChannels] = useState([]);
  const [botCategories, setBotCategories] = useState([]);
  const [loading, setLoading] = useState(false);
  const [priorityChanges, setPriorityChanges] = useState({}); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–æ—Ç–∞
  useEffect(() => {
    if (bot?.id) {
      loadBotData();
    }
  }, [bot?.id]);

  const loadBotData = async () => {
    if (!bot?.id) return;
    
    setLoading(true);
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
      const channelsResponse = await fetch(`http://localhost:8000/api/public-bots/${bot.id}/channels`);
      if (channelsResponse.ok) {
        const channels = await channelsResponse.json();
        setBotChannels(channels);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
      const categoriesResponse = await fetch(`http://localhost:8000/api/public-bots/${bot.id}/categories`);
      if (categoriesResponse.ok) {
        const categories = await categoriesResponse.json();
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const categoriesWithPriority = categories.map((cat, index) => ({
          ...cat,
          name: cat.category_name || cat.name, // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          priority: index + 1
        }));
        setBotCategories(categoriesWithPriority);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };

  const handleChannelsChange = (newChannels) => {
    setBotChannels(newChannels);
    if (onBotUpdate) {
      onBotUpdate({ ...bot, channels: newChannels });
    }
  };

  const handleCategoriesChange = (newCategories) => {
    setBotCategories(newCategories);
    if (onBotUpdate) {
      onBotUpdate({ ...bot, categories: newCategories });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handlePriorityChange = (categoryId, newPriority) => {
    console.log(`üìù –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ${newPriority}`);
    setPriorityChanges(prev => ({
      ...prev,
      [categoryId]: newPriority
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
  const savePriorityChanges = async () => {
    const changesToSave = Object.keys(priorityChanges);
    if (changesToSave.length === 0) return;

    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏:`, priorityChanges);

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const savePromises = changesToSave.map(async (categoryId) => {
        const newPriority = priorityChanges[categoryId];
        
        const response = await fetch(`http://localhost:8000/api/public-bots/${bot.id}/categories/${categoryId}/priority`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            priority: parseFloat(newPriority)
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}: ${errorData.detail}`);
        }

        return { categoryId, newPriority };
      });

      await Promise.all(savePromises);
      console.log(`‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
      
      // –û—á–∏—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      setPriorityChanges({});
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:', error);
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (Object.keys(priorityChanges).length > 0) {
        savePriorityChanges();
      }
    };
  }, [priorityChanges]);

  if (!bot) {
    return (
      <Typography variant="body2" color="text.secondary">
        –í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      </Typography>
    );
  }

  return (
    <Paper sx={{ width: '100%' }}>
      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
        <Tabs 
          value={activeTab} 
          onChange={handleTabChange}
          variant="fullWidth"
          sx={{
            '& .MuiTab-root': {
              minHeight: 64,
              textTransform: 'none',
              fontSize: '1rem'
            }
          }}
        >
          <Tab 
            icon={<SettingsIcon />} 
            label="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" 
            iconPosition="start"
          />
          <Tab 
            icon={<ChannelsIcon />} 
            label={`–ö–∞–Ω–∞–ª—ã (${botChannels.length})`}
            iconPosition="start"
          />
          <Tab 
            icon={<CategoriesIcon />} 
            label={`–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (${botCategories.length})`}
            iconPosition="start"
          />
          <Tab 
            icon={<AIIcon />} 
            label="AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            iconPosition="start"
          />
        </Tabs>
      </Box>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <TabPanel value={activeTab} index={0}>
        <BotGeneralSettings 
          bot={bot}
          onBotUpdate={onBotUpdate}
        />
      </TabPanel>

      {/* –ö–∞–Ω–∞–ª—ã —Å bulk –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ */}
      <TabPanel value={activeTab} index={1}>
        <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <ChannelsIcon />
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
          <Typography variant="body2" color="textSecondary">
            ({botChannels.length} –∫–∞–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ)
          </Typography>
        </Typography>
        
        <BotChannelsManager
          botId={bot.id}
          botChannels={botChannels}
          onChannelsChange={handleChannelsChange}
        />
      </TabPanel>

      {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å bulk –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ */}
      <TabPanel value={activeTab} index={2}>
        <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <CategoriesIcon />
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
          <Typography variant="body2" color="textSecondary">
            ({botCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ)
          </Typography>
        </Typography>
        
        <BotCategoriesManager
          botId={bot.id}
          botCategories={botCategories}
          onCategoriesChange={handleCategoriesChange}
          onPriorityChange={handlePriorityChange}
        />
      </TabPanel>

      {/* AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <TabPanel value={activeTab} index={3}>
        <BotAISettings 
          bot={bot}
          onBotUpdate={onBotUpdate}
        />
      </TabPanel>
    </Paper>
  );
};

export default BotConfigurationTabs; 