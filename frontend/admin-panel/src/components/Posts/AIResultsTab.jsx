import React, { useState, useEffect } from 'react';
import {
  Paper,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  Box,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Chip,
  Button,
  IconButton,
  Tooltip,
  Alert,
  CircularProgress,
  Card,
  CardContent,
  Grid,
  Rating,
  Collapse,
  Divider
} from '@mui/material';
import {
  Search as SearchIcon,
  Refresh as RefreshIcon,
  Clear as ClearIcon,
  Visibility as ViewIcon,
  Link as LinkIcon,
  Psychology as PsychologyIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  Category as CategoryIcon,
  TrendingUp as TrendingUpIcon,
  SmartToy as SmartToyIcon
} from '@mui/icons-material';

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞
import BotSelector from './BotSelector';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º API URL –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
const API_BASE_URL = window.location.hostname === 'localhost' 
  ? 'http://localhost:8000' 
  : 'http://localhost:8000';

function AIResultsTab({ stats, onStatsUpdate }) {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  const [posts, setPosts] = useState([]);
  const [totalCount, setTotalCount] = useState(0);
  const [aiStats, setAiStats] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const [expandedPosts, setExpandedPosts] = useState(new Set());

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(25);
  const [selectedBotId, setSelectedBotId] = useState(''); // –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
  const [search, setSearch] = useState('');
  const [channelFilter, setChannelFilter] = useState('');
  const [aiStatusFilter, setAiStatusFilter] = useState('all'); // all, processed, unprocessed
  const [categoryFilter, setCategoryFilter] = useState('');
  const [dateFrom, setDateFrom] = useState(null);
  const [dateTo, setDateTo] = useState(null);
  const [sortBy, setSortBy] = useState('collected_at');
  const [sortOrder, setSortOrder] = useState('desc');

  // –ó–∞–≥—Ä—É–∑–∫–∞ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const loadAIStats = async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
      const response = await fetch(`${API_BASE_URL}/api/ai/multitenant-status`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data);
      setAiStats(data);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (data.bots_stats && data.bots_stats.length > 0 && !selectedBotId) {
        const activeBots = data.bots_stats.filter(bot => bot.status === 'active');
        if (activeBots.length > 0) {
          setSelectedBotId(activeBots[0].bot_id.toString());
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
          setSelectedBotId(data.bots_stats[0].bot_id.toString());
        }
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  const loadAIResults = async () => {
    setLoading(true);
    setError('');

    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –±–æ—Ç–∞:', selectedBotId);
      
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      const params = new URLSearchParams({
        skip: page * rowsPerPage,
        limit: rowsPerPage,
        sort_by: sortBy,
        sort_order: sortOrder,
        ai_status: aiStatusFilter
      });

      // üöÄ –ù–û–í–´–ô –§–ò–õ–¨–¢–†: bot_id –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      if (selectedBotId) params.append('bot_id', selectedBotId);
      
      if (search) params.append('search', search);
      if (channelFilter) params.append('channel_telegram_id', channelFilter);
      if (dateFrom) params.append('date_from', dateFrom.toISOString());
      if (dateTo) params.append('date_to', dateTo.toISOString());

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint /api/posts/cache-with-ai —Å bot_id —Ñ–∏–ª—å—Ç—Ä–æ–º
      const response = await fetch(`${API_BASE_URL}/api/posts/cache-with-ai?${params}`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.posts?.length || 0);
      
      setPosts(data.posts || []);
      setTotalCount(data.total_count || 0);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    if (selectedBotId) {
      loadAIResults();
    }
  }, [page, rowsPerPage, selectedBotId, search, channelFilter, aiStatusFilter, dateFrom, dateTo, sortBy, sortOrder]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–æ–≤ –∏ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadAIStats();
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handlePageChange = (event, newPage) => {
    setPage(newPage);
  };

  const handleRowsPerPageChange = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const handleBotChange = (botId) => {
    setSelectedBotId(botId ? botId.toString() : '');
    setPage(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Å–º–µ–Ω–µ –±–æ—Ç–∞
  };

  const handleClearFilters = () => {
    setSearch('');
    setChannelFilter('');
    setCategoryFilter('');
    setDateFrom(null);
    setDateTo(null);
    setPage(0);
  };

  const togglePostExpansion = (postId) => {
    const newExpanded = new Set(expandedPosts);
    if (newExpanded.has(postId)) {
      newExpanded.delete(postId);
    } else {
      newExpanded.add(postId);
    }
    setExpandedPosts(newExpanded);
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('ru-RU');
  };

  const formatViews = (views) => {
    if (views >= 1000000) return `${(views / 1000000).toFixed(1)}M`;
    if (views >= 1000) return `${(views / 1000).toFixed(1)}K`;
    return views?.toString() || '0';
  };

  const getChannelInfo = (telegramId) => {
    if (!stats?.channels) return { title: `ID: ${telegramId}`, username: '' };
    
    const channel = stats.channels.find(ch => ch.telegram_id === telegramId);
    if (!channel) return { title: `ID: ${telegramId}`, username: '' };
    
    return {
      title: channel.title || channel.channel_name || `ID: ${telegramId}`,
      username: channel.username || ''
    };
  };

  const truncateText = (text, maxLength = 100) => {
    if (!text) return '';
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  };

  const cleanMarkdownText = (text) => {
    if (!text) return '';
    
    return text
      .replace(/\*\*(.*?)\*\*/g, '$1')
      .replace(/\*(.*?)\*/g, '$1')
      .replace(/__(.*?)__/g, '$1')
      .replace(/_(.*?)_/g, '$1')
      .replace(/`(.*?)`/g, '$1')
      .replace(/\[(.*?)\]\(.*?\)/g, '$1')
      .replace(/#{1,6}\s/g, '')
      .replace(/>\s/g, '')
      .replace(/\n+/g, ' ')
      .trim();
  };

  const getAIStatusColor = (post) => {
    if (post.ai_is_categorized && post.ai_is_summarized) return 'success';
    if (post.ai_is_categorized || post.ai_is_summarized) return 'warning';
    return 'default';
  };

  const getAIStatusText = (post) => {
    if (post.ai_is_categorized && post.ai_is_summarized) return '–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω';
    if (post.ai_is_categorized && !post.ai_is_summarized) return '–¢–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω';
    if (!post.ai_is_categorized && post.ai_is_summarized) return '–¢–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω';
    return '–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω';
  };

  const formatAIMetric = (value) => {
    if (value === null || value === undefined) return 'N/A';
    return typeof value === 'number' ? value.toFixed(1) : value;
  };

  const selectedBot = aiStats?.bots_stats.find(bot => bot.bot_id === parseInt(selectedBotId));

  return (
    <Box>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–∞ */}
      <Box display="flex" alignItems="center" gap={2} sx={{ mb: 3 }}>
        <PsychologyIcon color="secondary" />
        <Typography variant="h5">
          AI RESULTS - –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        </Typography>
        <Chip 
          label={`${totalCount.toLocaleString()} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`} 
          color="secondary" 
          variant="outlined" 
        />
      </Box>

      <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
        AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –±–æ—Ç–∞–º. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ summary, –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –º–µ—Ç—Ä–∏–∫ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
      </Typography>

      {/* –í—ã–±–æ—Ä –±–æ—Ç–∞ –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */}
      <BotSelector 
        selectedBot={selectedBotId ? parseInt(selectedBotId) : null}
        onBotChange={handleBotChange}
        aiStats={aiStats}
      />

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
      {selectedBotId && aiStats && (
        <Grid container spacing={2} sx={{ mb: 3 }}>
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" gutterBottom>
                  –í—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ—Ç
                </Typography>
                <Typography variant="h6">
                  {selectedBot?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç'}
                </Typography>
                <Chip 
                  label={selectedBot?.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'} 
                  size="small" 
                  color={selectedBot?.status === 'active' ? 'success' : 'default'}
                />
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" gutterBottom>
                  AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                </Typography>
                <Typography variant="h6">
                  {posts.filter(p => p.ai_summary || p.ai_category).length} –∏–∑ {posts.length}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" gutterBottom>
                  –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                </Typography>
                <Typography variant="h6">
                  {posts.filter(p => p.ai_is_categorized && p.ai_is_summarized).length}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" gutterBottom>
                  –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å
                </Typography>
                <Typography variant="h6">
                  {posts.length > 0 ? 
                    (posts.filter(p => p.ai_importance).reduce((sum, p) => sum + (p.ai_importance || 0), 0) / 
                     posts.filter(p => p.ai_importance).length).toFixed(1) : 
                    'N/A'
                  }
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      )}

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError('')}>
          {error}
        </Alert>
      )}

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <Paper sx={{ p: 2, mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          –§–∏–ª—å—Ç—Ä—ã AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        </Typography>
        
        <Box display="flex" gap={2} alignItems="center" flexWrap="wrap">
          <Box sx={{ width: '150px' }}>
            <TextField
              fullWidth
              label="–ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"
              value={search}
              onChange={(e) => setSearch(e.target.value)}
              InputProps={{
                startAdornment: <SearchIcon sx={{ mr: 1, color: 'text.secondary' }} />
              }}
            />
          </Box>
          
          <Box sx={{ width: '180px' }}>
            <FormControl fullWidth>
              <InputLabel>–ö–∞–Ω–∞–ª—ã</InputLabel>
              <Select
                value={channelFilter}
                onChange={(e) => setChannelFilter(e.target.value)}
                label="–ö–∞–Ω–∞–ª—ã"
              >
                <MenuItem value="">–í—Å–µ –∫–∞–Ω–∞–ª—ã</MenuItem>
                {stats?.channels?.map((channel) => (
                  <MenuItem key={channel.telegram_id} value={channel.telegram_id}>
                    {channel.title || channel.channel_name} ({channel.posts_count})
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Box>
          
          <Box sx={{ width: '180px' }}>
            <FormControl fullWidth>
              <InputLabel>AI –°—Ç–∞—Ç—É—Å—ã</InputLabel>
              <Select
                value={aiStatusFilter}
                onChange={(e) => setAiStatusFilter(e.target.value)}
                label="AI –°—Ç–∞—Ç—É—Å—ã"
              >
                <MenuItem value="all">–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</MenuItem>
                <MenuItem value="processed">–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ</MenuItem>
                <MenuItem value="unprocessed">–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ</MenuItem>
              </Select>
            </FormControl>
          </Box>
          
          <Box sx={{ flex: 1, minWidth: '180px' }}>
            <Box display="flex" gap={1}>
              <Button
                variant="outlined"
                onClick={handleClearFilters}
                startIcon={<ClearIcon />}
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </Button>
              <Button
                variant="contained"
                onClick={loadAIResults}
                startIcon={<RefreshIcon />}
                disabled={loading}
              >
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </Box>
          </Box>
        </Box>
      </Paper>

      {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω */}
      {!selectedBotId && (
        <Alert severity="info" sx={{ mb: 3 }}>
          <Typography>
            –í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ö–∞–∂–¥—ã–π –±–æ—Ç –∏–º–µ–µ—Ç —Å–≤–æ–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏.
          </Typography>
        </Alert>
      )}

      {/* –¢–∞–±–ª–∏—Ü–∞ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>–ü–æ—Å—Ç</TableCell>
              <TableCell>AI –ö–∞—Ç–µ–≥–æ—Ä–∏—è</TableCell>
              <TableCell>AI Summary</TableCell>
              <TableCell>–ú–µ—Ç—Ä–∏–∫–∏</TableCell>
              <TableCell>AI –°—Ç–∞—Ç—É—Å</TableCell>
              <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {loading ? (
              <TableRow>
                <TableCell colSpan={6} align="center">
                  <CircularProgress />
                </TableCell>
              </TableRow>
            ) : posts.length === 0 ? (
              <TableRow>
                <TableCell colSpan={6} align="center">
                  <Typography color="text.secondary">
                    {selectedBotId ? '–ù–µ—Ç AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞' : '–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'}
                  </Typography>
                </TableCell>
              </TableRow>
            ) : (
              posts.map((post) => {
                const channelInfo = getChannelInfo(post.channel_telegram_id);
                const isExpanded = expandedPosts.has(post.id);
                
                return (
                  <React.Fragment key={post.id}>
                    <TableRow hover>
                      <TableCell>
                        <Box sx={{ maxWidth: 500 }}>
                          <Typography variant="body2" fontWeight="bold" gutterBottom>
                            {channelInfo.title}
                          </Typography>
                          {post.title && (
                            <Typography variant="body2" color="primary" gutterBottom>
                              {truncateText(post.title, 20)}
                            </Typography>
                          )}
                          <Typography variant="body2" color="text.secondary">
                            {truncateText(cleanMarkdownText(post.content), 30)}
                          </Typography>
                          <Box display="flex" gap={1} mt={1}>
                            <Chip label={`üëÅ ${formatViews(post.views)}`} size="small" />
                            <Chip label={`ID: ${post.id}`} size="small" variant="outlined" />
                          </Box>
                        </Box>
                      </TableCell>
                      
                      <TableCell>
                        {post.ai_category ? (
                          <Chip 
                            label={post.ai_category} 
                            color="primary" 
                            icon={<CategoryIcon />}
                          />
                        ) : (
                          <Typography variant="body2" color="text.secondary">
                            –ù–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω
                          </Typography>
                        )}
                      </TableCell>
                      
                      <TableCell>
                        <Box sx={{ maxWidth: 600 }}>
                          {post.ai_summary ? (
                            <Typography variant="body2">
                              {truncateText(post.ai_summary, 50)}
                            </Typography>
                          ) : (
                            <Typography variant="body2" color="text.secondary">
                              –ù–µ—Ç summary
                            </Typography>
                          )}
                        </Box>
                      </TableCell>
                      
                      <TableCell>
                        <Box display="flex" flexDirection="column" gap={0.5}>
                          {post.ai_importance && (
                            <Box display="flex" alignItems="center" gap={1}>
                              <Typography variant="caption">–í–∞–∂–Ω–æ—Å—Ç—å:</Typography>
                              <Rating 
                                value={post.ai_importance / 2} 
                                max={5} 
                                size="small" 
                                readOnly 
                              />
                              <Typography variant="caption">
                                {formatAIMetric(post.ai_importance)}
                              </Typography>
                            </Box>
                          )}
                          {post.ai_urgency && (
                            <Typography variant="caption" color="text.secondary">
                              –°—Ä–æ—á–Ω–æ—Å—Ç—å: {formatAIMetric(post.ai_urgency)}
                            </Typography>
                          )}
                          {post.ai_significance && (
                            <Typography variant="caption" color="text.secondary">
                              –ó–Ω–∞—á–∏–º–æ—Å—Ç—å: {formatAIMetric(post.ai_significance)}
                            </Typography>
                          )}
                        </Box>
                      </TableCell>
                      
                      <TableCell>
                        <Chip 
                          label={getAIStatusText(post)}
                          color={getAIStatusColor(post)}
                          size="small"
                        />
                        {post.ai_processed_at && (
                          <Typography variant="caption" display="block" color="text.secondary">
                            {formatDate(post.ai_processed_at)}
                          </Typography>
                        )}
                      </TableCell>
                      
                      <TableCell>
                        <Box display="flex" gap={1}>
                          <Tooltip title="–ü—Ä–æ—Å–º–æ—Ç—Ä –≤ Telegram">
                            <IconButton
                              size="small"
                              onClick={() => window.open(`https://t.me/c/${Math.abs(post.channel_telegram_id)}/1${post.telegram_message_id}`, '_blank')}
                            >
                              <LinkIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title={isExpanded ? "–°–≤–µ—Ä–Ω—É—Ç—å" : "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"}>
                            <IconButton
                              size="small"
                              onClick={() => togglePostExpansion(post.id)}
                            >
                              {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                            </IconButton>
                          </Tooltip>
                        </Box>
                      </TableCell>
                    </TableRow>
                    
                    {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                    <TableRow>
                      <TableCell colSpan={6} sx={{ py: 0 }}>
                        <Collapse in={isExpanded} timeout="auto" unmountOnExit>
                          <Box sx={{ p: 2, bgcolor: 'grey.50' }}>
                            <Grid container spacing={2}>
                              <Grid item xs={12} md={6}>
                                <Typography variant="subtitle2" gutterBottom>
                                  –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:
                                </Typography>
                                <Typography variant="body2" sx={{ mb: 2 }}>
                                  {post.content || '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ'}
                                </Typography>
                                
                                {post.media_urls && post.media_urls.length > 0 && (
                                  <Box>
                                    <Typography variant="subtitle2" gutterBottom>
                                      –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã ({post.media_urls.length}):
                                    </Typography>
                                    {post.media_urls.slice(0, 3).map((url, index) => (
                                      <Chip 
                                        key={index}
                                        label={`üìé –§–∞–π–ª ${index + 1}`} 
                                        size="small" 
                                        sx={{ mr: 1, mb: 1 }}
                                        onClick={() => window.open(url, '_blank')}
                                      />
                                    ))}
                                  </Box>
                                )}
                              </Grid>
                              
                              <Grid item xs={12} md={6}>
                                <Typography variant="subtitle2" gutterBottom>
                                  AI –û–±—Ä–∞–±–æ—Ç–∫–∞:
                                </Typography>
                                
                                {post.ai_summary && (
                                  <Box sx={{ mb: 2 }}>
                                    <Typography variant="body2" fontWeight="bold">
                                      Summary:
                                    </Typography>
                                    <Typography variant="body2">
                                      {post.ai_summary}
                                    </Typography>
                                  </Box>
                                )}
                                
                                <Box display="flex" gap={1} flexWrap="wrap">
                                  <Chip 
                                    label={`–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω: ${post.ai_is_categorized ? '–î–∞' : '–ù–µ—Ç'}`}
                                    color={post.ai_is_categorized ? 'success' : 'default'}
                                    size="small"
                                  />
                                  <Chip 
                                    label={`–°–∞–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω: ${post.ai_is_summarized ? '–î–∞' : '–ù–µ—Ç'}`}
                                    color={post.ai_is_summarized ? 'success' : 'default'}
                                    size="small"
                                  />
                                  {post.ai_processing_version && (
                                    <Chip 
                                      label={`–í–µ—Ä—Å–∏—è: ${post.ai_processing_version}`}
                                      size="small"
                                      variant="outlined"
                                    />
                                  )}
                                </Box>
                              </Grid>
                            </Grid>
                          </Box>
                        </Collapse>
                      </TableCell>
                    </TableRow>
                  </React.Fragment>
                );
              })
            )}
          </TableBody>
        </Table>
      </TableContainer>

      {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      <TablePagination
        component="div"
        count={totalCount}
        page={page}
        onPageChange={handlePageChange}
        rowsPerPage={rowsPerPage}
        onRowsPerPageChange={handleRowsPerPageChange}
        rowsPerPageOptions={[10, 25, 50, 100]}
        labelRowsPerPage="–°—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:"
        labelDisplayedRows={({ from, to, count }) => 
          `${from}-${to} –∏–∑ ${count !== -1 ? count : `–±–æ–ª–µ–µ ${to}`}`
        }
      />
    </Box>
  );
}

export default AIResultsTab; 