import requests
import json

def debug_batch_issue():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å batch processing –≤ N8N"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ BATCH WORKFLOW")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userbot –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\n1. üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
    
    try:
        response = requests.get("http://localhost:8000/api/digests?limit=1")
        if response.status_code == 200:
            digests = response.json()
            if digests:
                latest = digests[0]
                print(f"üîç –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: {latest['digest_id']}")
                print(f"üìà –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {latest['total_posts']}")
                print(f"üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {latest['relevant_posts']}")
                
                if latest['total_posts'] == 0:
                    print("üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: Batch workflow –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å—Ç—ã")
                    print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤ N8N –Ω–æ–¥–µ Split Posts Into Batches")
            else:
                print("üìù –ù–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
    print("1. **N8N Split Node Configuration:**")
    print("   - Batch Size: 30")
    print("   - Input Field: posts_for_ai")
    print("   - Reset node and reconfigure")
    
    print("\n2. **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:**")
    print("   {")
    print("     'posts_for_ai': [array of posts],")
    print("     'total_posts_for_ai': number,")
    print("     'dynamic_prompt': string")
    print("   }")
    
    print("\n3. **–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø–æ–ª–µ:**")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ 'Prepare for AI' –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç posts_for_ai")
    print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç")
    
    print("\nüö® –°–†–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
    print("1. –í N8N –Ω–∞–∂–∞—Ç—å –Ω–∞ Split Posts Into Batches node")
    print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Configuration ‚Üí Input Field = 'posts_for_ai'")
    print("3. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –Ω–æ–¥—É Split In Batches")
    print("4. –ü–µ—Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å workflow")
    
    print("\nüí° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê:")
    print("–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è - –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ:")
    print("- –£–≤–µ–ª–∏—á–∏—Ç—å maxTokens –≤ OpenAI node –¥–æ 4000")
    print("- –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –±–µ–∑ –±–∞—Ç—á–µ–π")
    print("- –ü–æ—Ç–æ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ batch —Ä–µ—à–µ–Ω–∏—é")

if __name__ == "__main__":
    debug_batch_issue() 