#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã user_subscriptions
–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ—Å—Ç—ã–ª–µ–π
"""

from sqlalchemy import create_engine, text, MetaData
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –≤ backend/main.py
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "5432")
DB_NAME = os.getenv("DB_NAME", "digest_bot")
DB_USER = os.getenv("DB_USER", "digest_bot")
DB_PASSWORD = os.getenv("DB_PASSWORD", "SecurePassword123!")

DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}?sslmode=disable"

def main():
    print("üîß –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ë–î")
    print("=" * 50)
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üîç DEBUG: DB_HOST = {DB_HOST}")
    print(f"üîç DEBUG: DB_PORT = {DB_PORT}")
    print(f"üîç DEBUG: DB_NAME = {DB_NAME}")
    print(f"üîç DEBUG: DB_USER = {DB_USER}")
    print(f"üîç DEBUG: DB_PASSWORD = {'*' * len(DB_PASSWORD) if DB_PASSWORD else 'NOT SET'}")
    print(f"üîç DEBUG: DATABASE_URL = {DATABASE_URL}")
    print()
    
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º TCP/IP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        connect_args = {"host": DB_HOST, "port": int(DB_PORT)}
        engine = create_engine(DATABASE_URL, echo=False, connect_args=connect_args)
        
        with engine.connect() as conn:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_subscriptions
            result = conn.execute(text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'user_subscriptions'
                )
            """))
            table_exists = result.fetchone()[0]
            
            if table_exists:
                print("üóëÔ∏è –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É user_subscriptions...")
                conn.execute(text("DROP TABLE IF EXISTS user_subscriptions CASCADE"))
                conn.commit()
                print("‚úÖ –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            print("üìã –°–æ–∑–¥–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É user_subscriptions...")
            conn.execute(text("""
                CREATE TABLE user_subscriptions (
                    user_id INTEGER NOT NULL,
                    category_id INTEGER NOT NULL,
                    PRIMARY KEY (user_id, category_id),
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                    FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE
                )
            """))
            conn.commit()
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            result = conn.execute(text("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'user_subscriptions' 
                ORDER BY ordinal_position
            """))
            columns = result.fetchall()
            
            print("\n‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:")
            for col in columns:
                print(f"  ‚Ä¢ {col[0]}: {col[1]} ({'NULL' if col[2] == 'YES' else 'NOT NULL'})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            result = conn.execute(text("""
                SELECT conname, contype 
                FROM pg_constraint 
                WHERE conrelid = 'user_subscriptions'::regclass
            """))
            constraints = result.fetchall()
            
            print("\nüîó –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
            for constraint in constraints:
                constraint_type = {
                    'p': 'PRIMARY KEY',
                    'f': 'FOREIGN KEY'
                }.get(constraint[1], constraint[1])
                print(f"  ‚Ä¢ {constraint[0]}: {constraint_type}")
        
        print("\nüéâ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê –ù–ê–í–°–ï–ì–î–ê!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å backend - –≤—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 