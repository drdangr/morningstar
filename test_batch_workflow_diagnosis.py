#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ workflow - –ø–æ—á–µ–º—É –ø–æ—Å—Ç—ã "–∏—Å—á–µ–∑–∞—é—Ç"
"""

import json
import requests
from datetime import datetime, timezone

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
def check_latest_digest():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–°–õ–ï–î–ù–ï–ì–û –î–ê–ô–î–ñ–ï–°–¢–ê:")
    print("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã
        response = requests.get("http://localhost:8000/api/digests?limit=1")
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            return
            
        digests = response.json()
        if not digests:
            print("‚ùå –ù–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
            
        latest_digest = digests[0]
        digest_id = latest_digest['digest_id']
        print(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç: {digest_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        detail_response = requests.get(f"http://localhost:8000/api/digests/{digest_id}/data")
        if detail_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {detail_response.status_code}")
            return
            
        full_data = detail_response.json()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(full_data.get('channels', []))}")
        print(f"   –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {full_data.get('total_posts', 0)}")
        print(f"   –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {full_data.get('batch_processing_applied', False)}")
        
        summary = full_data.get('summary', {})
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {summary.get('channels_processed', 0)}")
        print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {summary.get('original_posts', 0)}")
        print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {summary.get('relevant_posts', 0)}")
        print(f"   –ë–∞—Ç—á–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {summary.get('batches_processed', 0)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
        print("\nüì∫ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ö–ê–ù–ê–õ–ê–ú:")
        for channel in full_data.get('channels', []):
            print(f"   üì∫ {channel.get('title', 'Unknown')}")
            print(f"      Username: {channel.get('username', 'N/A')}")
            print(f"      –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {channel.get('categories', [])}")
            print(f"      –ü–æ—Å—Ç–æ–≤: {channel.get('posts_count', 0)}")
            print(f"      –ü–æ—Å—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ: {len(channel.get('posts', []))}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Å—Ç–æ–≤
            posts = channel.get('posts', [])
            if posts:
                print(f"      üìù –ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:")
                sample_post = posts[0]
                print(f"         Title: {sample_post.get('title', 'N/A')[:50]}...")
                print(f"         URL: {sample_post.get('url', 'N/A')}")
                print(f"         AI –≤–∞–∂–Ω–æ—Å—Ç—å: {sample_post.get('ai_importance', 'N/A')}")
                print(f"         AI —Å—Ä–æ—á–Ω–æ—Å—Ç—å: {sample_post.get('ai_urgency', 'N/A')}")
                print(f"         AI –∑–Ω–∞—á–∏–º–æ—Å—Ç—å: {sample_post.get('ai_significance', 'N/A')}")
                print(f"         –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Å—Ç–∞: {sample_post.get('post_category', 'N/A')}")
                print(f"         Summary: {sample_post.get('summary', 'N/A')[:50]}...")
            else:
                print(f"      ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ú–∞—Å—Å–∏–≤ –ø–æ—Å—Ç–æ–≤ –ø—É—Å—Ç!")
            print()
        
        return full_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return None

def analyze_batch_processing_issue(data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
    if not data:
        return
        
    print("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –ë–ê–¢–ß–ï–í–û–ô –û–ë–†–ê–ë–û–¢–ö–ò:")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    original_posts = data.get('summary', {}).get('original_posts', 0)
    relevant_posts = data.get('summary', {}).get('relevant_posts', 0)
    total_posts = data.get('total_posts', 0)
    
    print(f"üìä –ü–û–¢–ï–†–Ø –î–ê–ù–ù–´–•:")
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {original_posts}")
    print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {relevant_posts}")
    print(f"   –§–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {total_posts}")
    
    if original_posts > 0 and relevant_posts == 0:
        print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í–°–ï –ü–û–°–¢–´ –ü–û–¢–ï–†–Ø–ù–´ –ù–ê –≠–¢–ê–ü–ï AI –ê–ù–ê–õ–ò–ó–ê")
        print("   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("      1. AI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –∫–∞–∫ 'NULL' (–Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ)")
        print("      2. –ü—Ä–æ–±–ª–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –≤ 'Process Batch Results'")
        print("      3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ID –ø–æ—Å—Ç–æ–≤ –∏ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print("      4. –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ 'Merge Batch Results'")
    elif relevant_posts > 0 and total_posts == 0:
        print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–û–°–¢–´ –ü–û–¢–ï–†–Ø–ù–´ –ù–ê –≠–¢–ê–ü–ï PREPARE DIGEST")
        print("   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("      1. –û—à–∏–±–∫–∞ –≤ –Ω–æ–¥–µ 'Prepare Digest'")
        print("      2. –ü—Ä–æ–±–ª–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ processed_channels")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–Ω–∞–ª–æ–≤
    channels = data.get('channels', [])
    empty_channels = [ch for ch in channels if ch.get('posts_count', 0) == 0]
    
    print(f"\nüì∫ –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–û–í:")
    print(f"   –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
    print(f"   –ü—É—Å—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(empty_channels)}")
    
    if len(empty_channels) == len(channels) and len(channels) > 0:
        print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –í–°–ï –ö–ê–ù–ê–õ–´ –ü–£–°–¢–´–ï")
        print("   üí° –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É –≤ –Ω–æ–¥–µ 'Merge Batch Results'")
    
    # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ AI
    avg_importance = data.get('summary', {}).get('avg_importance', 0)
    avg_urgency = data.get('summary', {}).get('avg_urgency', 0)
    avg_significance = data.get('summary', {}).get('avg_significance', 0)
    
    print(f"\nü§ñ AI –ú–ï–¢–†–ò–ö–ò:")
    print(f"   –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å: {avg_importance}")
    print(f"   –°—Ä–µ–¥–Ω—è—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å: {avg_urgency}")
    print(f"   –°—Ä–µ–¥–Ω—è—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å: {avg_significance}")
    
    if avg_importance == 0 and avg_urgency == 0 and avg_significance == 0:
        print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: AI –ù–ï –í–ï–†–ù–£–õ –ú–ï–¢–†–ò–ö–ò")
        print("   üí° –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –≤ 'Process Batch Results'")

def suggest_fixes():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
    print("=" * 60)
    print("1. üîç –ü–†–û–í–ï–†–ò–¢–¨ –ù–û–î–£ 'Process Batch Results':")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ OpenAI –æ—Ç–≤–µ—Ç–∞")
    print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É batch_results")
    print()
    print("2. üîç –ü–†–û–í–ï–†–ò–¢–¨ –ù–û–î–£ 'Merge Batch Results':")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É allAIAnalysis.find(item => item.id == post.id)")
    print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ ID –ø–æ—Å—Ç–æ–≤ –∏ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ isRelevant = analysis && analysis.summary !== 'NULL'")
    print()
    print("3. üîç –ü–†–û–í–ï–†–ò–¢–¨ –ù–û–î–£ 'Prepare Digest':")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ processedData.processed_channels")
    print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ—Å—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è")
    print()
    print("4. üß™ –î–û–ë–ê–í–ò–¢–¨ –û–¢–õ–ê–î–ö–£:")
    print("   - –î–æ–±–∞–≤–∏—Ç—å console.log –≤ –∫–∞–∂–¥—É—é –Ω–æ–¥—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ë–ê–¢–ß–ï–í–û–ì–û WORKFLOW")
    print("=" * 60)
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    latest_data = check_latest_digest()
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
    analyze_batch_processing_issue(latest_data)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    suggest_fixes()
    
    print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê") 