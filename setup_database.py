#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è digest_bot –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
"""

from sqlalchemy import create_engine, text

def main():
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê POSTGRESQL - –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ë–î")
    print("=" * 60)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è postgres
    passwords = ["password", "", "admin", "postgres", "root"]
    
    for pwd in passwords:
        postgres_url = f"postgresql://postgres:{pwd}@localhost:5432/postgres?sslmode=disable"
        print(f"üîç –ü—Ä–æ–±—É—é –ø–∞—Ä–æ–ª—å: {pwd if pwd else '(–ø—É—Å—Ç–æ–π)'}")
        
        try:
            engine = create_engine(postgres_url, echo=False, isolation_level="AUTOCOMMIT")
            
            with engine.connect() as conn:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∫–∞–∫ postgres —É—Å–ø–µ—à–Ω–æ!")
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è digest_bot
                print("üë§ –°–æ–∑–¥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è digest_bot...")
                conn.execute(text("DROP USER IF EXISTS digest_bot CASCADE"))
                conn.execute(text("CREATE USER digest_bot WITH PASSWORD 'SecurePassword123!'"))
                
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                print("üóÑÔ∏è –°–æ–∑–¥–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö digest_bot...")
                conn.execute(text("DROP DATABASE IF EXISTS digest_bot"))
                conn.execute(text("CREATE DATABASE digest_bot OWNER digest_bot"))
                conn.execute(text("GRANT ALL PRIVILEGES ON DATABASE digest_bot TO digest_bot"))
                
                print("üéâ POSTGRESQL –ù–ê–°–¢–†–û–ï–ù –£–°–ü–ï–®–ù–û!")
                return
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º '{pwd}': {e}")
            continue
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ —Å –æ–¥–Ω–∏–º –ø–∞—Ä–æ–ª–µ–º")

if __name__ == "__main__":
    main()
