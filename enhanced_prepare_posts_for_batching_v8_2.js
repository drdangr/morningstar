// –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ v8.2 - –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å—Ç–∞—Ä–æ–π –Ω–æ–¥—ã "Prepare for AI"
console.log('ü§ñ Preparing all posts for AI batching with FULL functionality v8.2...');
const data = $json;
const posts = data.posts || [];
const channelsMetadata = data.channels_metadata || {};

console.log(`üìã Found posts: ${posts.length}`);
console.log('üìã Channels metadata available:', Object.keys(channelsMetadata));

// –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è description –∏ ai_prompt
const allActiveCategories = new Set();
const channelCategoryMap = {};
const categoryDescriptions = {}; // –î–ª—è —Ç–µ–º –∞–Ω–∞–ª–∏–∑–∞ (description –ø–æ–ª–µ)
const categoryAIPrompts = {};     // –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (ai_prompt –ø–æ–ª–µ)

Object.keys(channelsMetadata).forEach(channelUsername => {
    const channelData = channelsMetadata[channelUsername];
    console.log(`üìã –ö–∞–Ω–∞–ª: ${channelData.title} (${channelUsername})`);
    
    if (channelData.categories && Array.isArray(channelData.categories)) {
        const activeCategories = channelData.categories.filter(cat => cat.is_active);
        channelCategoryMap[channelUsername] = activeCategories;
        
        activeCategories.forEach(category => {
            allActiveCategories.add(category.name);
            
            // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—è
            if (category.description) {
                categoryDescriptions[category.name] = category.description;
            }
            if (category.ai_prompt) {
                categoryAIPrompts[category.name] = category.ai_prompt;
            }
            
            console.log(`  üè∑Ô∏è –ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}`);
            console.log(`    üìù Description: ${category.description?.substring(0, 50)}...`);
            console.log(`    ü§ñ AI Prompt: ${category.ai_prompt?.substring(0, 50)}...`);
        });
        
        if (activeCategories.length === 0) {
            console.log(`  ‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è ${channelUsername}`);
        }
    }
});

const categories = Array.from(allActiveCategories);

console.log(`‚úÖ RESTORED v8.2: –ù–∞–π–¥–µ–Ω–æ ${categories.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`, categories);
console.log('üîó –°–≤—è–∑–∏ –∫–∞–Ω–∞–ª–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:');
Object.keys(channelCategoryMap).forEach(channel => {
    const cats = channelCategoryMap[channel].map(c => c.name).join(', ');
    console.log(`  ${channel} ‚Üí [${cats}]`);
});

// –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º –∏–∑ –ø–æ–ª—è description
const topicsDescription = categories.map(cat => {
    const description = categoryDescriptions[cat] || cat;
    return `${cat} (${description})`;
}).join(', ');

// –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
const customInstructions = categories.map(cat => {
    const description = categoryDescriptions[cat] || cat;
    const aiPrompt = categoryAIPrompts[cat];
    if (aiPrompt) {
        return `–¥–ª—è –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Ç–µ–º—É '${cat} (${description})' —É—á—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${aiPrompt}`;
    }
    return null;
}).filter(instruction => instruction).join(', ');

// –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ–ª–µ–π
let dynamicPrompt = `–û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π –ø–æ—Å—Ç—ã –ø–æ —Ç–µ–º–∞–º: ${topicsDescription}.

–ü—Ä–∞–≤–∏–ª–æ: summary = "NULL" –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –ù–ï –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ù–ò –ö –û–î–ù–û–ô –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞:

–ï–°–õ–ò –ø–æ—Å—Ç –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ç–µ–º–µ - –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ + –º–µ—Ç—Ä–∏–∫–∏ 1-10.
–ï–°–õ–ò –ø–æ—Å—Ç –ù–ï –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Ç–µ–º–∞–º - –Ω–∞–ø–∏—à–∏ "NULL" + –º–µ—Ç—Ä–∏–∫–∏ 0.

–í–æ–∑–≤—Ä–∞—â–∞–π JSON:
{"results": [{"id": "post_id", "summary": "—Ä–µ–∑—é–º–µ –∏–ª–∏ NULL", "importance": 8, "urgency": 6, "significance": 7, "category": "–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã"}]}

–í–ê–ñ–ù–û:
- –ü–æ–ª–µ "category" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¢–û–ß–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã: ${categories.join(', ')}
- –í—ã–±–∏—Ä–∞–π –ù–ê–ò–ë–û–õ–ï–ï –ü–û–î–•–û–î–Ø–©–£–Æ —Ç–µ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
- –î–ª—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: category = "NULL"

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ –°–ú–´–°–õ–£, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º. –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–µ–º–∞–Ω—Ç–∏–∫—É.`;

// –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
if (customInstructions) {
    dynamicPrompt += `

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${customInstructions}`;
    console.log('‚úÖ Added RESTORED custom AI instructions from ai_prompt fields');
}

console.log('üîÆ Generated RESTORED prompt v8.2 with topic-specific instructions');
console.log('üìä Categories for analysis (from description):', categories);
console.log('üìä Custom instructions (from ai_prompt):', Object.keys(categoryAIPrompts).length, 'found');
console.log('üéØ Topics description:', topicsDescription);
if (customInstructions) {
    console.log('ü§ñ Custom instructions:', customInstructions.substring(0, 200) + '...');
}

// FALLBACK —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
if (categories.length === 0) {
    console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
    const fallbackPrompt = `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å—Ç—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–π –∏—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ–±—â–∏–º –Ω–æ–≤–æ—Å—Ç–Ω—ã–º —Ç–µ–º–∞–º. –î–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏ –º–µ—Ç—Ä–∏–∫–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏/—Å—Ä–æ—á–Ω–æ—Å—Ç–∏/–∑–Ω–∞—á–∏–º–æ—Å—Ç–∏, –¥–ª—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö - "NULL".`;
    
    return {
        timestamp: data.timestamp,
        collection_stats: data.collection_stats,
        channels_metadata: channelsMetadata,
        posts: posts,
        total_posts: posts.length,
        dynamic_prompt: fallbackPrompt,
        categories: ['–û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏'],
        channel_category_map: {},
        category_descriptions: {},
        category_ai_prompts: {},
        error: 'No active categories found',
        batch_processing: true,
        version: 'v8.2_fallback'
    };
}

console.log(`üìù Prepared ${posts.length} posts for ENHANCED batching`);

return {
    timestamp: data.timestamp,
    collection_stats: data.collection_stats,
    channels_metadata: channelsMetadata,
    posts: posts,
    total_posts: posts.length,
    dynamic_prompt: dynamicPrompt,
    categories: categories,
    channel_category_map: channelCategoryMap,
    category_descriptions: categoryDescriptions,
    category_ai_prompts: categoryAIPrompts,
    topics_description: topicsDescription,
    custom_instructions: customInstructions,
    binary_relevance: true,
    with_metrics: true,
    batch_processing: true,
    version: 'v8.2_full_functionality_restored'
}; 